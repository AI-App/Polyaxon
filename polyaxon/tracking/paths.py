# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

import json
import os

from hestia.env_var_keys import (
    POLYAXON_KEYS_ARTIFACTS_PATHS,
    POLYAXON_KEYS_LOG_LEVEL,
    POLYAXON_KEYS_OUTPUTS_PATH,
)

from polyaxon.tracking.is_managed import ensure_is_managed
from polyaxon.tracking.no_op import check_no_op


@check_no_op
def get_artifacts_paths():
    """
    The data/artifacts paths dictionary that you mounted for the job/experiment.
    {'data1': '/data/1/', 'data-foo': '/data/foo'}
    """
    ensure_is_managed()
    paths = os.getenv(POLYAXON_KEYS_ARTIFACTS_PATHS, None)
    try:
        return json.loads(paths) if paths else None
    except (ValueError, TypeError):
        print(
            "Could get data/artifacts paths, "
            "please make sure this is running inside a polyaxon job."
        )
        return None


@check_no_op
def get_base_outputs_path():
    """
    The bae outputs path generated
    """
    return os.getenv("POLYAXON_BASE_OUTPUTS_PATH", None)


@check_no_op
def get_outputs_path():
    """
    The outputs path generated by polyaxon based on the hierarchy of the experiment:
    Experiment:
        `user/project/group/experiment/files`
    Jobs:
        `user/project/jobs/files`
    """
    ensure_is_managed()
    return os.getenv(POLYAXON_KEYS_OUTPUTS_PATH, None)


@check_no_op
def get_log_level():
    """If set on the polyaxonfile it will return the log level."""
    ensure_is_managed()
    return os.getenv(POLYAXON_KEYS_LOG_LEVEL, None)
