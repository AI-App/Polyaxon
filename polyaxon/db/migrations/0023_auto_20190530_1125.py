# Generated by Django 2.2.1 on 2019-06-12 09:23

import db.models.abstract.owner
import db.models.abstract.unique_name
import db.models.fields.encrypted_pickledfield
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import libs.blacklist
import picklefield.fields
import re
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('db', '0022_auto_20190423_2241'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConfigOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=256)),
                ('secret', db.models.fields.encrypted_pickledfield.EncryptedPickledObjectField(blank=True, editable=False, null=True)),
                ('value', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='config_options', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'key')},
            },
            bases=(models.Model, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='K8SSecret',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('secret_ref', models.CharField(max_length=256)),
                ('keys', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='ArtifactsStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'),libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('type', models.CharField(blank=True, choices=[('host_path', 'host_path'), ('volume_claim', 'volume_claim'), ('gcs', 'gcs'), ('s3', 's3'), ('azure', 'azure')], max_length=16, null=True)),
                ('mount_path', models.CharField(blank=True, max_length=256, null=True)),
                ('host_path', models.CharField(blank=True, max_length=256, null=True)),
                ('volume_claim', models.CharField(blank=True, max_length=256, null=True)),
                ('bucket', models.CharField(blank=True, max_length=256, null=True)),
                ('db_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ConfigOption')),
                ('k8s_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.K8SSecret')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin,db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='RegistryAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('host', models.URLField(max_length=256)),
                ('insecure', models.NullBooleanField(default=False)),
                ('db_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ConfigOption')),
                ('k8s_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.K8SSecret')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='LogsStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('type', models.CharField(blank=True, choices=[('host_path', 'host_path'), ('volume_claim', 'volume_claim'), ('gcs', 'gcs'), ('s3', 's3'), ('azure', 'azure')], max_length=16, null=True)),
                ('mount_path', models.CharField(blank=True, max_length=256, null=True)),
                ('host_path', models.CharField(blank=True, max_length=256, null=True)),
                ('volume_claim', models.CharField(blank=True, max_length=256, null=True)),
                ('bucket', models.CharField(blank=True, max_length=256, null=True)),
                ('db_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ConfigOption')),
                ('k8s_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.K8SSecret')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='K8SConfigMap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('config_map_ref', models.CharField(max_length=256)),
                ('keys', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=256), blank=True, default=list, size=None)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='GitAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('host', models.URLField(max_length=256)),
                ('db_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ConfigOption')),
                ('k8s_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.K8SSecret')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='DataStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('readme', models.TextField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('type', models.CharField(blank=True, choices=[('host_path', 'host_path'), ('volume_claim', 'volume_claim'), ('gcs', 'gcs'), ('s3', 's3'), ('azure', 'azure')], max_length=16, null=True)),
                ('mount_path', models.CharField(blank=True, max_length=256, null=True)),
                ('host_path', models.CharField(blank=True, max_length=256, null=True)),
                ('volume_claim', models.CharField(blank=True, max_length=256, null=True)),
                ('bucket', models.CharField(blank=True, max_length=256, null=True)),
                ('db_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ConfigOption')),
                ('k8s_secret', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.K8SSecret')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='db.Owner')),
            ],
            options={
                'unique_together': {('owner', 'name')},
            },
            bases=(models.Model, db.models.abstract.owner.OwnerMixin, db.models.abstract.unique_name.UniqueNameMixin),
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('artifacts', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.ArtifactsStore')),
                ('datasets', models.ManyToManyField(blank=True, related_name='_config_datasets_+', to='db.DataStore')),
                ('git_access', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.GitAccess')),
                ('k8s_config_maps', models.ManyToManyField(blank=True, related_name='_config_k8s_config_maps_+', to='db.K8SConfigMap')),
                ('k8s_secrets', models.ManyToManyField(blank=True, related_name='_config_k8s_secrets_+', to='db.K8SSecret')),
                ('logs', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.LogsStore')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='config', to='db.Owner')),
                ('registry_access', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.RegistryAccess')),
            ],
        )
    ]
