# Generated by Django 2.0.3 on 2018-07-05 09:06

import db.models.abstract_jobs
import db.models.repos
import db.models.statuses
import db.models.utils
from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.utils.timezone
import libs.blacklist
import libs.resource_validation
import libs.spec_validation
import re
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login',
                 models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(
                    error_messages={'unique': 'A user with that username already exists.'},
                    help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                    max_length=150, unique=True,
                    validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                    verbose_name='username')),
                ('first_name',
                 models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name',
                 models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email',
                 models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now,
                                                     verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set',
                                                  related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions',
                 models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                        related_name='user_set', related_query_name='user',
                                        to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=128)),
                ('context', django.contrib.postgres.fields.jsonb.JSONField(help_text='Extra context information.')),
                ('created_at', models.DateTimeField()),
                ('object_id', models.PositiveIntegerField()),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name_plural': 'activities logs',
                'verbose_name': 'activity log',
            },
        ),
        migrations.CreateModel(
            name='BuildJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='The specific values/manifest for this job.')),
                ('config', django.contrib.postgres.fields.jsonb.JSONField(help_text='The compiled polyaxonfile for the build job.', validators=[libs.spec_validation.validate_build_spec_config])),
                ('dockerfile', models.TextField(blank=True, help_text='The dockerfile used to create the image with this job.', null=True)),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.JobMixin),
        ),
        migrations.CreateModel(
            name='BuildJobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('building', 'building'), ('unschedulable', 'unschedulable'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.BuildJob')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Build Job Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChartVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('version', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='CliVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latest_version', models.CharField(max_length=16)),
                ('min_version', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('version_api', django.contrib.postgres.fields.jsonb.JSONField(help_text='The cluster version api info')),
            ],
        ),
        migrations.CreateModel(
            name='ClusterEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField()),
                ('level', models.CharField(max_length=16)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='db.Cluster')),
            ],
        ),
        migrations.CreateModel(
            name='ClusterNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequence', models.PositiveSmallIntegerField(editable=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(help_text='Name of the node', max_length=256)),
                ('hostname', models.CharField(blank=True, max_length=256, null=True)),
                ('role', models.CharField(choices=[('master', 'master'), ('agent', 'agent')], help_text='The role of the node', max_length=16)),
                ('docker_version', models.CharField(blank=True, max_length=128, null=True)),
                ('kubelet_version', models.CharField(max_length=64)),
                ('os_image', models.CharField(max_length=128)),
                ('kernel_version', models.CharField(max_length=128)),
                ('schedulable_taints', models.BooleanField(default=False)),
                ('schedulable_state', models.BooleanField(default=False)),
                ('memory', models.BigIntegerField()),
                ('cpu', models.FloatField()),
                ('n_gpus', models.PositiveSmallIntegerField()),
                ('status', models.CharField(choices=[('unknown', 'unknown'), ('ready', 'ready'), ('notReady', 'notReady'), ('deleted', 'deleted')], default='unknown', max_length=24)),
                ('is_current', models.BooleanField(default=True)),
                ('cluster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nodes', to='db.Cluster')),
            ],
        ),
        migrations.CreateModel(
            name='CodeReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commit', models.CharField(blank=True, max_length=40, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('persistence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_persistence_config])),
                ('outputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_outputs_config])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('declarations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The parameters used for this experiment.', null=True)),
                ('config', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The compiled polyaxon with specific values for this experiment.', null=True, validators=[libs.spec_validation.validate_experiment_spec_config])),
                ('cloning_strategy', models.CharField(blank=True, choices=[('copy', 'copy'), ('restart', 'restart'), ('resume', 'resume')], max_length=16, null=True)),
                ('build_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.BuildJob')),
                ('code_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.TensorboardJobMixin),
        ),
        migrations.CreateModel(
            name='ExperimentGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('persistence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_persistence_config])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('content', models.TextField(blank=True, help_text='The yaml content of the polyaxonfile/specification.', null=True, validators=[libs.spec_validation.validate_group_spec_content])),
                ('hptuning', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The experiment group hptuning params config.', null=True, validators=[libs.spec_validation.validate_group_hptuning_config])),
                ('code_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.TensorboardJobMixin),
        ),
        migrations.CreateModel(
            name='ExperimentGroupIteration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(help_text='The experiment group iteration meta data.')),
                ('experiment_group', models.ForeignKey(help_text='The experiment group.', on_delete=django.db.models.deletion.CASCADE, related_name='iterations', to='db.ExperimentGroup')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentGroupStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('resuming', 'resuming'), ('running', 'running'), ('warning', 'warning'), ('done', 'done'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopping', 'stopping'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('experiment_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.ExperimentGroup')),
            ],
            options={
                'verbose_name_plural': 'Experiment group Statuses',
            },
        ),
        migrations.CreateModel(
            name='ExperimentJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='The specific values/manifest for this job.')),
                ('role', models.CharField(default='master', max_length=64)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='db.Experiment')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin),
        ),
        migrations.CreateModel(
            name='ExperimentJobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('building', 'building'), ('unschedulable', 'unschedulable'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.ExperimentJob')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Experiment Job Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentMetric',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('values', django.contrib.postgres.fields.jsonb.JSONField()),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='db.Experiment')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExperimentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('resuming', 'resuming'), ('warning', 'warning'), ('building', 'building'), ('scheduled', 'scheduled'), ('starting', 'starting'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('experiment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.Experiment')),
            ],
            options={
                'verbose_name_plural': 'Experiment Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='ExternalRepo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('git_url', models.URLField()),
                ('is_public', models.BooleanField(default=True, help_text='If repo is public or private.')),
            ],
            bases=(models.Model, db.models.repos.RepoMixin),
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('persistence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_persistence_config])),
                ('outputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_outputs_config])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='The specific values/manifest for this job.')),
                ('config', django.contrib.postgres.fields.jsonb.JSONField(help_text='The compiled polyaxonfile for the run job.', validators=[libs.spec_validation.validate_job_spec_config])),
                ('cloning_strategy', models.CharField(blank=True, choices=[('copy', 'copy'), ('restart', 'restart'), ('resume', 'resume')], max_length=16, null=True)),
                ('build_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.BuildJob')),
                ('code_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference')),
                ('original_job', models.ForeignKey(blank=True, help_text='The original job that was cloned from.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='db.Job')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.JobMixin),
        ),
        migrations.CreateModel(
            name='JobResources',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cpu', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, validators=[libs.resource_validation.validate_resource])),
                ('memory', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, validators=[libs.resource_validation.validate_resource])),
                ('gpu', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True, validators=[libs.resource_validation.validate_resource])),
            ],
            options={
                'verbose_name_plural': 'jobs resources',
                'verbose_name': 'job resources',
            },
        ),
        migrations.CreateModel(
            name='JobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('building', 'building'), ('unschedulable', 'unschedulable'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.Job')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Job Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='LibVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latest_version', models.CharField(max_length=16)),
                ('min_version', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='NodeGPU',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('index', models.PositiveSmallIntegerField()),
                ('serial', models.CharField(max_length=256)),
                ('name', models.CharField(max_length=256)),
                ('memory', models.BigIntegerField()),
                ('cluster_node', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gpus', to='db.ClusterNode')),
            ],
            options={
                'ordering': ['index'],
            },
        ),
        migrations.CreateModel(
            name='NotebookJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('persistence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_persistence_config])),
                ('outputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_outputs_config])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='The specific values/manifest for this job.')),
                ('config', django.contrib.postgres.fields.jsonb.JSONField(help_text='The compiled polyaxonfile for the notebook job.', validators=[libs.spec_validation.validate_notebook_spec_config])),
                ('build_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.BuildJob')),
                ('code_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.JobMixin),
        ),
        migrations.CreateModel(
            name='NotebookJobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('building', 'building'), ('unschedulable', 'unschedulable'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.NotebookJob')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Notebook Job Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('execute_at', models.DateTimeField(blank=True, help_text='When this instance should be executed. default None which translate to now', null=True)),
                ('timeout', models.PositiveIntegerField(blank=True, help_text='specify how long this instance should be up before timing out in seconds.', null=True)),
                ('trigger_policy', models.CharField(blank=True, choices=[('all_succeeded', 'all_succeeded'), ('all_failed', 'all_failed'), ('all_done', 'all_done'), ('one_succeeded', 'one_succeeded'), ('one_failed', 'one_failed'), ('one_done', 'one_done')], default='all_succeeded', help_text='defines the rule by which dependencies are applied, default is `all_success`.', max_length=16, null=True)),
                ('max_retries', models.PositiveSmallIntegerField(blank=True, help_text='the number of retries that should be performed before failing the operation.', null=True)),
                ('retry_delay', models.PositiveIntegerField(blank=True, default=60, help_text='The delay between retries.', null=True)),
                ('retry_exponential_backoff', models.BooleanField(default=False, help_text='allow progressive longer waits between retries by using exponential backoff algorithm on retry delay.')),
                ('max_retry_delay', models.PositiveIntegerField(blank=True, default=3600, help_text='maximum delay interval between retries.', null=True)),
                ('concurrency', models.PositiveSmallIntegerField(blank=True, help_text='When set, an operation will be able to limit the concurrent runs across execution_dates', null=True)),
                ('run_as_user', models.CharField(blank=True, help_text='unix username to impersonate while running the operation.', max_length=64, null=True)),
                ('config', models.TextField(blank=True, null=True)),
                ('celery_task', models.CharField(help_text='The celery task name to execute.', max_length=128)),
                ('celery_queue', models.CharField(blank=True, help_text='The celery queue name to use for the executing this task. If provided, it will override the queue provided in CELERY_TASK_ROUTES.', max_length=128, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OperationRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('celery_task_context', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The kwargs required to execute the celery task.', null=True)),
                ('celery_task_id', models.CharField(blank=True, max_length=36)),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='db.Operation')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin),
        ),
        migrations.CreateModel(
            name='OperationRunStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('retrying', 'retrying')], default='created', max_length=64, null=True)),
                ('operation_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.OperationRun')),
            ],
            options={
                'verbose_name_plural': 'Operation Run Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='OutputsRefs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('experiments', models.ManyToManyField(blank=True, related_name='_outputsrefs_experiments_+', to='db.Experiment')),
                ('jobs', models.ManyToManyField(blank=True, related_name='_outputsrefs_jobs_+', to='db.Job')),
            ],
        ),
        migrations.CreateModel(
            name='Pipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('execute_at', models.DateTimeField(blank=True, help_text='When this instance should be executed. default None which translate to now', null=True)),
                ('timeout', models.PositiveIntegerField(blank=True, help_text='specify how long this instance should be up before timing out in seconds.', null=True)),
                ('concurrency', models.PositiveSmallIntegerField(blank=True, help_text='If set, it determines the number of operation instances allowed to run concurrently.', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PipelineRun',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='runs', to='db.Pipeline')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin),
        ),
        migrations.CreateModel(
            name='PipelineRunStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('done', 'done'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('stopping', 'stopping'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('pipeline_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.PipelineRun')),
            ],
            options={
                'verbose_name_plural': 'Pipeline Run Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlatformVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('latest_version', models.CharField(max_length=16)),
                ('min_version', models.CharField(max_length=16)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=256, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('is_public', models.BooleanField(default=True, help_text='If project is public or private.')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            bases=(models.Model, db.models.abstract_jobs.TensorboardJobMixin),
        ),
        migrations.CreateModel(
            name='Repo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_public', models.BooleanField(default=True, help_text='If repo is public or private.')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='repo', to='db.Project')),
            ],
            bases=(models.Model, db.models.repos.RepoMixin),
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frequency', models.CharField(blank=True, help_text="Defines how often to run, this timedelta object gets added to your latest operation instance's execution_date to figure out the next schedule", max_length=64, null=True)),
                ('start_at', models.DateTimeField(blank=True, help_text='When this instance should run, default is None which translate to now.', null=True)),
                ('end_at', models.DateTimeField(blank=True, help_text='When this instance should stop running, default is None which translate to open ended.', null=True)),
                ('depends_on_past', models.BooleanField(default=False, help_text="when set to true, the instances will run sequentially while relying on the previous instances' schedule to succeed.")),
            ],
        ),
        migrations.CreateModel(
            name='Search',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('query', models.TextField()),
                ('is_default', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='searches', to='db.Project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SSOIdentity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('github', 'github'), ('bitbucket', 'bitbucket'), ('gitlab', 'gitlab'), ('azure', 'azure')], max_length=32)),
                ('external_id', models.CharField(max_length=64, null=True)),
                ('valid', models.BooleanField(default=False)),
                ('last_verified', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_synced', models.DateTimeField(default=django.utils.timezone.now)),
                ('scopes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, null=True, size=None)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'SSO identities',
                'verbose_name': 'SSO identity',
            },
        ),
        migrations.CreateModel(
            name='TensorboardJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True)),
                ('name', models.CharField(blank=True, default=None, max_length=256, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", 'invalid'), libs.blacklist.validate_blacklist_name])),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('tags', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=64), blank=True, help_text='The parameters used for this experiment.', null=True, size=None)),
                ('persistence', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_persistence_config])),
                ('outputs', django.contrib.postgres.fields.jsonb.JSONField(blank=True, help_text='The persistence definition.', null=True, validators=[libs.spec_validation.validate_outputs_config])),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('definition', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='The specific values/manifest for this job.')),
                ('config', django.contrib.postgres.fields.jsonb.JSONField(help_text='The compiled polyaxonfile for the tensorboard job.', validators=[libs.spec_validation.validate_tensorboard_spec_config])),
                ('build_job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.BuildJob')),
                ('code_reference', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference')),
                ('experiment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tensorboard_jobs', to='db.Experiment')),
                ('experiment_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tensorboard_jobs', to='db.ExperimentGroup')),
                ('outputs_refs', models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.OutputsRefs')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tensorboard_jobs', to='db.Project')),
            ],
            bases=(models.Model, db.models.statuses.LastStatusMixin, db.models.abstract_jobs.JobMixin),
        ),
        migrations.CreateModel(
            name='TensorboardJobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, db_index=True)),
                ('message', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'created'), ('building', 'building'), ('unschedulable', 'unschedulable'), ('warning', 'warning'), ('scheduled', 'scheduled'), ('running', 'running'), ('succeeded', 'succeeded'), ('failed', 'failed'), ('upstream_failed', 'upstream_failed'), ('stopped', 'stopped'), ('skipped', 'skipped'), ('unknown', 'unknown')], default='created', max_length=64, null=True)),
                ('details', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='statuses', to='db.TensorboardJob')),
            ],
            options={
                'abstract': False,
                'verbose_name_plural': 'Tensorboard Job Statuses',
                'ordering': ['created_at'],
            },
        ),
        migrations.AddField(
            model_name='tensorboardjob',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.TensorboardJobStatus'),
        ),
        migrations.AddField(
            model_name='tensorboardjob',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pipelinerun',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.PipelineRunStatus'),
        ),
        migrations.AddField(
            model_name='pipeline',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pipelines', to='db.Project'),
        ),
        migrations.AddField(
            model_name='pipeline',
            name='schedule',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Schedule'),
        ),
        migrations.AddField(
            model_name='pipeline',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='operationrun',
            name='pipeline_run',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operation_runs', to='db.PipelineRun'),
        ),
        migrations.AddField(
            model_name='operationrun',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.OperationRunStatus'),
        ),
        migrations.AddField(
            model_name='operationrun',
            name='upstream_runs',
            field=models.ManyToManyField(blank=True, related_name='downstream_runs', to='db.OperationRun'),
        ),
        migrations.AddField(
            model_name='operation',
            name='pipeline',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='db.Pipeline'),
        ),
        migrations.AddField(
            model_name='operation',
            name='schedule',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='db.Schedule'),
        ),
        migrations.AddField(
            model_name='operation',
            name='upstream_operations',
            field=models.ManyToManyField(blank=True, related_name='downstream_operations', to='db.Operation'),
        ),
        migrations.AddField(
            model_name='notebookjob',
            name='outputs_refs',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.OutputsRefs'),
        ),
        migrations.AddField(
            model_name='notebookjob',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notebook_jobs', to='db.Project'),
        ),
        migrations.AddField(
            model_name='notebookjob',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.NotebookJobStatus'),
        ),
        migrations.AddField(
            model_name='notebookjob',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='job',
            name='outputs_refs',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.OutputsRefs'),
        ),
        migrations.AddField(
            model_name='job',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='db.Project'),
        ),
        migrations.AddField(
            model_name='job',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.JobStatus'),
        ),
        migrations.AddField(
            model_name='job',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='externalrepo',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='external_repos', to='db.Project'),
        ),
        migrations.AddField(
            model_name='experimentjob',
            name='resources',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.JobResources'),
        ),
        migrations.AddField(
            model_name='experimentjob',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ExperimentJobStatus'),
        ),
        migrations.AddField(
            model_name='experimentgroup',
            name='project',
            field=models.ForeignKey(help_text='The project this polyaxonfile belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='experiment_groups', to='db.Project'),
        ),
        migrations.AddField(
            model_name='experimentgroup',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ExperimentGroupStatus'),
        ),
        migrations.AddField(
            model_name='experimentgroup',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='experiment',
            name='experiment_group',
            field=models.ForeignKey(blank=True, help_text='The experiment group that generate this experiment.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to='db.ExperimentGroup'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='metric',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ExperimentMetric'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='original_experiment',
            field=models.ForeignKey(blank=True, help_text='The original experiment that was cloned from.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='db.Experiment'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='outputs_refs',
            field=models.OneToOneField(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.OutputsRefs'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='experiments', to='db.Project'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.ExperimentStatus'),
        ),
        migrations.AddField(
            model_name='experiment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='codereference',
            name='external_repo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='references', to='db.ExternalRepo'),
        ),
        migrations.AddField(
            model_name='codereference',
            name='repo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='references', to='db.Repo'),
        ),
        migrations.AddField(
            model_name='buildjob',
            name='code_reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.CodeReference'),
        ),
        migrations.AddField(
            model_name='buildjob',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='build_jobs', to='db.Project'),
        ),
        migrations.AddField(
            model_name='buildjob',
            name='status',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='db.BuildJobStatus'),
        ),
        migrations.AddField(
            model_name='buildjob',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='ssoidentity',
            unique_together={('provider', 'external_id'), ('provider', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='search',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together={('user', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='pipeline',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='operation',
            unique_together={('pipeline', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='nodegpu',
            unique_together={('cluster_node', 'index')},
        ),
        migrations.AlterUniqueTogether(
            name='job',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='externalrepo',
            unique_together={('project', 'git_url')},
        ),
        migrations.AlterUniqueTogether(
            name='experimentgroup',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='experiment',
            unique_together={('project', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='clusternode',
            unique_together={('cluster', 'sequence')},
        ),
        migrations.AlterUniqueTogether(
            name='buildjob',
            unique_together={('project', 'name')},
        ),
    ]
