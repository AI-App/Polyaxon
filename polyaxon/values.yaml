namespace: "polyaxon"
passwordLenght: 10
ingress:
  enabled: false
rbac:
  enabled: false

# Initial admin user to create
user:
  username: "root"
  emailFrom: <root@polyaxon.local>
  email: "root@polyaxon.local"
  password: "rootpassword"

dirs:
  nvidia:
    lib: ""  # e.g. "/usr/lib/nvidia-384"
    bin: ""  # e.g. "/usr/lib/nvidia-384/bin"
    libcuda: ""  # e.g. "/usr/lib/x86_64-linux-gnu/libcuda.so.1"
  docker: "/var/run/docker.sock"

# This is where we mount nvidia on hosts
mountPaths:
  nvidia:
    lib: "/usr/local/nvidia/lib"
    bin: "/usr/local/nvidia/bin"
    libcuda: "/usr/local/nvidia/libcuda/libcuda.so.1"
  docker: "/var/run/docker.sock"

persistence:
  data:
    storageClass:
    existingClaim:
    accessMode: ReadWriteMany
    size: 10Gi
    mountPath: "/data"
    subPath: ""
  logs:
    name: "polyaxon-pvc-logs"
    storageClass:
    existingClaim:
    enabled: false
    accessMode: ReadWriteOnce
    size: 5Gi
    mountPath: "/logs"
    subPath: ""
  outputs:
    name: "polyaxon-pvc-outputs"
    storageClass:
    existingClaim:
    enabled: false
    accessMode: ReadWriteMany
    size: 5Gi
    mountPath: "/outputs"
    subPath: ""
  repos:
    name: "polyaxon-pvc-repos"
    storageClass:
    existingClaim:
    enabled: false
    accessMode: ReadWriteOnce
    size: 5Gi
    mountPath: "/repos"
    subPath: ""
  upload:
    name: "polyaxon-pvc-upload"
    storageClass:
    existingClaim:
    enabled: false
    accessMode: ReadWriteOnce
    size: 10Gi
    mountPath: "/tmp/plx"
    subPath: ""

api:
  image: polyaxon/polyaxon-api
  imageTag: 0.0.2
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi

  service:
    name: api
    type: ClusterIP
    externalPort: 80
    internalPort: 80
    nodePort: 31811

apiEvents:
  image: polyaxon/polyaxon-api-events
  imageTag: 0.0.2
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

  service:  # service type is the same as api
    name: api-events
    externalPort: 1337
    internalPort: 1337
    nodePort: 31812

workers:
  scheduler:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.2
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 300m
        memory: 350Mi
      requests:
        cpu: 100m
        memory: 100Mi
  events:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.2
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 100Mi
  crons:
    image: polyaxon/polyaxon-workers
    imageTag: 0.0.2
    imagePullPolicy: IfNotPresent
    replicas: 1
    concurrency: 2
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 100m
        memory: 100Mi

beat:
  image: polyaxon/polyaxon-beat
  imageTag: 0.0.2
  imagePullPolicy: IfNotPresent
  replicas: 1
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi

events:
  namespace:
    enabled: true
    image: polyaxon/polyaxon-monitor-namespace
    imageTag: 0.0.2
    imagePullPolicy: IfNotPresent
    replicas: 1
    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 128Mi
    persists: false
    logSleepInterval: 1

  statuses:
    enabled: true
    image: polyaxon/polyaxon-monitor-statuses
    imageTag: 0.0.2
    imagePullPolicy: IfNotPresent
    replicas: 1
    resources:
      limits:
        cpu: 50m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 128Mi
    persists: false
    logSleepInterval: 1

resourcesDaemon:
  enabled: true
  image: polyaxon/polyaxon-monitor-resources
  imageTag: 0.0.2
  imagePullPolicy: IfNotPresent
  resources:
    limits:
      cpu: 50m
      memory: 128Mi
    requests:
      cpu: 50m
      memory: 128Mi
  persists: false
  logSleepInterval: 1

sidecar:
  image: polyaxon/polyaxon-sidecar
  imageTag: 0.0.2

job:
  image: polyaxon/polyaxon-lib
  imageTag: 0.0.2


hooks:
  image: polyaxon/polyaxon-manage
  imageTag: 0.0.2
  imagePullPolicy: IfNotPresent

nodeSelectors:
  core:
  dependencies:
  experiments:

tolerations:
  core:
  dependencies:
  resourcesDaemon:

affinity:
  core:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"
  dependencies:
    podAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: type
                operator: In
                values:
                - "polyaxon-core"
            topologyKey: "kubernetes.io/hostname"

postgresql:
  imageTag: 9.6.1
  postgresUser: polyaxon
  postgresPassword: polyaxon
  postgresDatabase: polyaxon
  persistence:
    enabled: false
    size: "8Gi"
    subPath: ""

  # ---
  image: "postgres"
  persistence:
    accessMode: ReadWriteOnce
    subPath: "postgresql-db"
  metrics:
    enabled: false
    image: wrouesnel/postgres_exporter
    imageTag: v0.1.1
    imagePullPolicy: IfNotPresent
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
  service:
    type: ClusterIP
    port: 5432
    externalIPs: []
  networkPolicy:
    enabled: false
    allowExternal: true
  tolerations: []

redis:
  imageTag: 4.0.2
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi

  # ---
  image: redis
  imagePullPolicy: IfNotPresent
  serviceType: ClusterIP
  usePassword: false
  metrics:
    enabled: false
    image: oliver006/redis_exporter
    imageTag: v0.11
    imagePullPolicy: IfNotPresent
    resources: {}
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9121"
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
  podLabels: {}
  networkPolicy:
    enabled: false
    allowExternal: true

rabbitmq:
  imageTag: "3.6.12-management"
  image: "rabbitmq"
  imagePullPolicy: IfNotPresent
  rabbitmqUsername: polyaxon
  rabbitmqNodePort: 5672
  rabbitmqNodeType: stats
  rabbitmqNodeName: rabbit
  rabbitmqVhost: /
  rabbitmqManagerPort: 15672
  serviceType: ClusterIP
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 8Gi

  resources:
    requests:
      memory: 256Mi
      cpu: 100m

registry:
  replicaCount: 1
  image:
    repository: registry
    tag: 2.6.2
    pullPolicy: IfNotPresent
  service:
    name: registry
    type: NodePort
    port: 5000
    nodePort: 31813
  resources:
    requests:
      cpu: "300m"
      memory: "512Mi"
  persistence:
    enabled: false
    accessMode: ReadWriteOnce
    size: 10Gi
    subPath: ""

debug: 0
celery:
  always_eager: false
  celeryd_prefetch_multiplier: 4

types:
  core: "polyaxon-core"
  experiment: "polyaxon-experiment"

roles:
  api: "polyaxon-api"
  log: "polyaxon-logs"
  worker: "polyaxon-workers"
  dashboard: "polyaxon-dashboard"

k8s: {}

email:
  host: smtp
  port: 25
  use_tls: false

intervals:  # in seconds
  experiments_scheduler: 60
  clusters_update_system_info: 150
  clusters_update_system_nodes: 150

queues:
  apiExperiments: 'api.experiments'
  apiClusters: 'api.clusters'
  eventsNamespace: 'events.namespace'
  eventsResources: 'events.resources'
  eventsStatuses: 'events.statuses'
  logsSidecars: 'logs.sidecars'
  streamEventsNamespace: 'stream.events.namespace'
  streamEventsResources: 'stream.events.resources'
  streamEventsStatuses: 'stream.events.statuses'
  streamLogsSidecars: 'stream.logs.sidecars'

routingKeys:
  eventsStatuses: events.statuses
  eventsNamespace: events.namespace
  eventsResources: events.resources
  logsSidecars: logs.sidecars

exchanges:
  internal: 'internal'

versions:
  cli:
    min: 0.0.1
    latest: 0.0.1
  platform:
    min: 0.0.1
    latest: 0.0.1
  lib:
    min: 0.0.1
    latest: 0.0.1
