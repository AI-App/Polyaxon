// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.BuildServiceApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('BuildServiceApi', function() {
    describe('archiveBuild', function() {
      it('should call archiveBuild successfully', function(done) {
        //uncomment below and update the code to test archiveBuild
        //instance.archiveBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bookmarkBuild', function() {
      it('should call bookmarkBuild successfully', function(done) {
        //uncomment below and update the code to test bookmarkBuild
        //instance.bookmarkBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuild', function() {
      it('should call createBuild successfully', function(done) {
        //uncomment below and update the code to test createBuild
        //instance.createBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuildCodeRef', function() {
      it('should call createBuildCodeRef successfully', function(done) {
        //uncomment below and update the code to test createBuildCodeRef
        //instance.createBuildCodeRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBuildStatus', function() {
      it('should call createBuildStatus successfully', function(done) {
        //uncomment below and update the code to test createBuildStatus
        //instance.createBuildStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBuild', function() {
      it('should call deleteBuild successfully', function(done) {
        //uncomment below and update the code to test deleteBuild
        //instance.deleteBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBuilds', function() {
      it('should call deleteBuilds successfully', function(done) {
        //uncomment below and update the code to test deleteBuilds
        //instance.deleteBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBuild', function() {
      it('should call getBuild successfully', function(done) {
        //uncomment below and update the code to test getBuild
        //instance.getBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBuildCodeRef', function() {
      it('should call getBuildCodeRef successfully', function(done) {
        //uncomment below and update the code to test getBuildCodeRef
        //instance.getBuildCodeRef(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listArchivedBuilds', function() {
      it('should call listArchivedBuilds successfully', function(done) {
        //uncomment below and update the code to test listArchivedBuilds
        //instance.listArchivedBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBookmarkedBuilds', function() {
      it('should call listBookmarkedBuilds successfully', function(done) {
        //uncomment below and update the code to test listBookmarkedBuilds
        //instance.listBookmarkedBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuildStatuses', function() {
      it('should call listBuildStatuses successfully', function(done) {
        //uncomment below and update the code to test listBuildStatuses
        //instance.listBuildStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBuilds', function() {
      it('should call listBuilds successfully', function(done) {
        //uncomment below and update the code to test listBuilds
        //instance.listBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restartBuild', function() {
      it('should call restartBuild successfully', function(done) {
        //uncomment below and update the code to test restartBuild
        //instance.restartBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreBuild', function() {
      it('should call restoreBuild successfully', function(done) {
        //uncomment below and update the code to test restoreBuild
        //instance.restoreBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopBuild', function() {
      it('should call stopBuild successfully', function(done) {
        //uncomment below and update the code to test stopBuild
        //instance.stopBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopBuilds', function() {
      it('should call stopBuilds successfully', function(done) {
        //uncomment below and update the code to test stopBuilds
        //instance.stopBuilds(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unBookmarkBuild', function() {
      it('should call unBookmarkBuild successfully', function(done) {
        //uncomment below and update the code to test unBookmarkBuild
        //instance.unBookmarkBuild(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBuild2', function() {
      it('should call updateBuild2 successfully', function(done) {
        //uncomment below and update the code to test updateBuild2
        //instance.updateBuild2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
