// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1CodeReference', 'model/V1CodeReferenceBodyRequest', 'model/V1Job', 'model/V1JobBodyRequest', 'model/V1JobStatus', 'model/V1ListJobStatusesResponse', 'model/V1ListJobsResponse', 'model/V1OwnedEntityIdRequest', 'model/V1ProjectBodyRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1CodeReference'), require('../model/V1CodeReferenceBodyRequest'), require('../model/V1Job'), require('../model/V1JobBodyRequest'), require('../model/V1JobStatus'), require('../model/V1ListJobStatusesResponse'), require('../model/V1ListJobsResponse'), require('../model/V1OwnedEntityIdRequest'), require('../model/V1ProjectBodyRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.JobServiceApi = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.V1CodeReference, root.PolyaxonSdk.V1CodeReferenceBodyRequest, root.PolyaxonSdk.V1Job, root.PolyaxonSdk.V1JobBodyRequest, root.PolyaxonSdk.V1JobStatus, root.PolyaxonSdk.V1ListJobStatusesResponse, root.PolyaxonSdk.V1ListJobsResponse, root.PolyaxonSdk.V1OwnedEntityIdRequest, root.PolyaxonSdk.V1ProjectBodyRequest);
  }
}(this, function(ApiClient, V1CodeReference, V1CodeReferenceBodyRequest, V1Job, V1JobBodyRequest, V1JobStatus, V1ListJobStatusesResponse, V1ListJobsResponse, V1OwnedEntityIdRequest, V1ProjectBodyRequest) {
  'use strict';

  /**
   * JobService service.
   * @module api/JobServiceApi
   * @version 1.14.4
   */

  /**
   * Constructs a new JobServiceApi. 
   * @alias module:api/JobServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveJob operation.
     * @callback module:api/JobServiceApi~archiveJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~archiveJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.archiveJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling archiveJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling archiveJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookmarkJob operation.
     * @callback module:api/JobServiceApi~bookmarkJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnBookmark build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~bookmarkJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.bookmarkJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling bookmarkJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling bookmarkJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bookmarkJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/JobServiceApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1JobBodyRequest} body 
     * @param {module:api/JobServiceApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Job}
     */
    this.createJob = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createJob");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Job;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJobCodeRef operation.
     * @callback module:api/JobServiceApi~createJobCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get job code ref
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project where the experiement will be assigned
     * @param {String} entity_id Unique integer identifier of the entity
     * @param {module:model/V1CodeReferenceBodyRequest} body 
     * @param {module:api/JobServiceApi~createJobCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.createJobCodeRef = function(entity_owner, entity_project, entity_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling createJobCodeRef");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling createJobCodeRef");
      }

      // verify the required parameter 'entity_id' is set
      if (entity_id === undefined || entity_id === null) {
        throw new Error("Missing the required parameter 'entity_id' when calling createJobCodeRef");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJobCodeRef");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.id': entity_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/api/v1/{entity.owner}/{entity.project}/jobs/{entity.id}/coderef', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJobStatus operation.
     * @callback module:api/JobServiceApi~createJobStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1JobStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build code ref
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/JobServiceApi~createJobStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1JobStatus}
     */
    this.createJobStatus = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createJobStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createJobStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createJobStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJobStatus");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1JobStatus;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/statuses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/JobServiceApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJobs operation.
     * @callback module:api/JobServiceApi~deleteJobsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/JobServiceApi~deleteJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteJobs = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteJobs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteJobs");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteJobs");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/JobServiceApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Job}
     */
    this.getJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Job;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobCodeRef operation.
     * @callback module:api/JobServiceApi~getJobCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create build code ref
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~getJobCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.getJobCodeRef = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getJobCodeRef");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getJobCodeRef");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJobCodeRef");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/coderef', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchivedJobs operation.
     * @callback module:api/JobServiceApi~listArchivedJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived builds
     * @param {String} owner Owner of the namespace
     * @param {module:api/JobServiceApi~listArchivedJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListJobsResponse}
     */
    this.listArchivedJobs = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listArchivedJobs");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListJobsResponse;

      return this.apiClient.callApi(
        '/api/v1/archives/{owner}/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookmarkedJobs operation.
     * @callback module:api/JobServiceApi~listBookmarkedJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked builds
     * @param {String} owner Owner of the namespace
     * @param {module:api/JobServiceApi~listBookmarkedJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListJobsResponse}
     */
    this.listBookmarkedJobs = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBookmarkedJobs");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListJobsResponse;

      return this.apiClient.callApi(
        '/api/v1/bookmarks/{owner}/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobStatuses operation.
     * @callback module:api/JobServiceApi~listJobStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListJobStatusesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new build status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~listJobStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListJobStatusesResponse}
     */
    this.listJobStatuses = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listJobStatuses");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listJobStatuses");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listJobStatuses");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListJobStatusesResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobs operation.
     * @callback module:api/JobServiceApi~listJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/JobServiceApi~listJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListJobsResponse}
     */
    this.listJobs = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listJobs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listJobs");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListJobsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restartJob operation.
     * @callback module:api/JobServiceApi~restartJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/JobServiceApi~restartJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Job}
     */
    this.restartJob = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restartJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restartJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartJob");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling restartJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Job;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreJob operation.
     * @callback module:api/JobServiceApi~restoreJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~restoreJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.restoreJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restoreJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restoreJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeJob operation.
     * @callback module:api/JobServiceApi~resumeJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/JobServiceApi~resumeJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Job}
     */
    this.resumeJob = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling resumeJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling resumeJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resumeJob");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resumeJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Job;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopJob operation.
     * @callback module:api/JobServiceApi~stopJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/JobServiceApi~stopJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopJob = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopJob");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopJobs operation.
     * @callback module:api/JobServiceApi~stopJobsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/JobServiceApi~stopJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopJobs = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopJobs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopJobs");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopJobs");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unBookmarkJob operation.
     * @callback module:api/JobServiceApi~unBookmarkJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/JobServiceApi~unBookmarkJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.unBookmarkJob = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling unBookmarkJob");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling unBookmarkJob");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unBookmarkJob");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{id}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJob2 operation.
     * @callback module:api/JobServiceApi~updateJob2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} job_id Unique integer identifier
     * @param {module:model/V1JobBodyRequest} body 
     * @param {module:api/JobServiceApi~updateJob2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Job}
     */
    this.updateJob2 = function(owner, project, job_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateJob2");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateJob2");
      }

      // verify the required parameter 'job_id' is set
      if (job_id === undefined || job_id === null) {
        throw new Error("Missing the required parameter 'job_id' when calling updateJob2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJob2");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'job.id': job_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Job;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/jobs/{job.id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
