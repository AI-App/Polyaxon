// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1CodeRefBodyRequest', 'model/V1CodeReference', 'model/V1EntityStatusRequest', 'model/V1ListCodeRefResponse', 'model/V1ListRunsResponse', 'model/V1OwnedEntityUUIdRequest', 'model/V1ProjectBodyRequest', 'model/V1Run', 'model/V1RunBodyRequest', 'model/V1StatusResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1CodeRefBodyRequest'), require('../model/V1CodeReference'), require('../model/V1EntityStatusRequest'), require('../model/V1ListCodeRefResponse'), require('../model/V1ListRunsResponse'), require('../model/V1OwnedEntityUUIdRequest'), require('../model/V1ProjectBodyRequest'), require('../model/V1Run'), require('../model/V1RunBodyRequest'), require('../model/V1StatusResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.RunServiceApi = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.V1CodeRefBodyRequest, root.PolyaxonSdk.V1CodeReference, root.PolyaxonSdk.V1EntityStatusRequest, root.PolyaxonSdk.V1ListCodeRefResponse, root.PolyaxonSdk.V1ListRunsResponse, root.PolyaxonSdk.V1OwnedEntityUUIdRequest, root.PolyaxonSdk.V1ProjectBodyRequest, root.PolyaxonSdk.V1Run, root.PolyaxonSdk.V1RunBodyRequest, root.PolyaxonSdk.V1StatusResponse);
  }
}(this, function(ApiClient, V1CodeRefBodyRequest, V1CodeReference, V1EntityStatusRequest, V1ListCodeRefResponse, V1ListRunsResponse, V1OwnedEntityUUIdRequest, V1ProjectBodyRequest, V1Run, V1RunBodyRequest, V1StatusResponse) {
  'use strict';

  /**
   * RunService service.
   * @module api/RunServiceApi
   * @version 1.14.4
   */

  /**
   * Constructs a new RunServiceApi. 
   * @alias module:api/RunServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveRun operation.
     * @callback module:api/RunServiceApi~archiveRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~archiveRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.archiveRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling archiveRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling archiveRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling archiveRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookmarkRun operation.
     * @callback module:api/RunServiceApi~bookmarkRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~bookmarkRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.bookmarkRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling bookmarkRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling bookmarkRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling bookmarkRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRun operation.
     * @callback module:api/RunServiceApi~createRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1RunBodyRequest} body 
     * @param {module:api/RunServiceApi~createRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.createRun = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRunCodeRef operation.
     * @callback module:api/RunServiceApi~createRunCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run code ref
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project where the experiement will be assigned
     * @param {String} entity_uuid Unique integer identifier of the entity
     * @param {module:model/V1CodeRefBodyRequest} body 
     * @param {module:api/RunServiceApi~createRunCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.createRunCodeRef = function(entity_owner, entity_project, entity_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling createRunCodeRef");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling createRunCodeRef");
      }

      // verify the required parameter 'entity_uuid' is set
      if (entity_uuid === undefined || entity_uuid === null) {
        throw new Error("Missing the required parameter 'entity_uuid' when calling createRunCodeRef");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRunCodeRef");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.uuid': entity_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/coderef', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createRunStatus operation.
     * @callback module:api/RunServiceApi~createRunStatusCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new run status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1EntityStatusRequest} body 
     * @param {module:api/RunServiceApi~createRunStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.createRunStatus = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createRunStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createRunStatus");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling createRunStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRunStatus");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/statuses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRun operation.
     * @callback module:api/RunServiceApi~deleteRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~deleteRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRuns operation.
     * @callback module:api/RunServiceApi~deleteRunsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/RunServiceApi~deleteRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRun operation.
     * @callback module:api/RunServiceApi~getRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~getRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.getRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunCodeRefs operation.
     * @callback module:api/RunServiceApi~getRunCodeRefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListCodeRefResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run code ref
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~getRunCodeRefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListCodeRefResponse}
     */
    this.getRunCodeRefs = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getRunCodeRefs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getRunCodeRefs");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRunCodeRefs");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListCodeRefResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/coderef', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunStatuses operation.
     * @callback module:api/RunServiceApi~getRunStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1StatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~getRunStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1StatusResponse}
     */
    this.getRunStatuses = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getRunStatuses");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getRunStatuses");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRunStatuses");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1StatusResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateRun operation.
     * @callback module:api/RunServiceApi~invalidateRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityUUIdRequest} body 
     * @param {module:api/RunServiceApi~invalidateRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.invalidateRun = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling invalidateRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling invalidateRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling invalidateRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invalidateRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/invalidate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the invalidateRuns operation.
     * @callback module:api/RunServiceApi~invalidateRunsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/RunServiceApi~invalidateRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.invalidateRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling invalidateRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling invalidateRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invalidateRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/invalidate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchivedRuns operation.
     * @callback module:api/RunServiceApi~listArchivedRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived runs
     * @param {String} owner Owner of the namespace
     * @param {module:api/RunServiceApi~listArchivedRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.listArchivedRuns = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listArchivedRuns");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/archives/{owner}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookmarkedRuns operation.
     * @callback module:api/RunServiceApi~listBookmarkedRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked runs
     * @param {String} owner Owner of the namespace
     * @param {module:api/RunServiceApi~listBookmarkedRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.listBookmarkedRuns = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBookmarkedRuns");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/bookmarks/{owner}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listRuns operation.
     * @callback module:api/RunServiceApi~listRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/RunServiceApi~listRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.listRuns = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchRun operation.
     * @callback module:api/RunServiceApi~patchRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} run_uuid UUID
     * @param {module:model/V1RunBodyRequest} body 
     * @param {module:api/RunServiceApi~patchRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.patchRun = function(owner, project, run_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling patchRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling patchRun");
      }

      // verify the required parameter 'run_uuid' is set
      if (run_uuid === undefined || run_uuid === null) {
        throw new Error("Missing the required parameter 'run_uuid' when calling patchRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling patchRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'run.uuid': run_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{run.uuid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restartRun operation.
     * @callback module:api/RunServiceApi~restartRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityUUIdRequest} body 
     * @param {module:api/RunServiceApi~restartRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.restartRun = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restartRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restartRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling restartRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling restartRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreRun operation.
     * @callback module:api/RunServiceApi~restoreRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~restoreRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.restoreRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restoreRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restoreRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling restoreRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeRun operation.
     * @callback module:api/RunServiceApi~resumeRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityUUIdRequest} body 
     * @param {module:api/RunServiceApi~resumeRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.resumeRun = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling resumeRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling resumeRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling resumeRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resumeRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startRunTensorboard operation.
     * @callback module:api/RunServiceApi~startRunTensorboardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start run tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityUUIdRequest} body 
     * @param {module:api/RunServiceApi~startRunTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.startRunTensorboard = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling startRunTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling startRunTensorboard");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling startRunTensorboard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling startRunTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRun operation.
     * @callback module:api/RunServiceApi~stopRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityUUIdRequest} body 
     * @param {module:api/RunServiceApi~stopRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopRun = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling stopRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRunTensorboard operation.
     * @callback module:api/RunServiceApi~stopRunTensorboardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop run tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~stopRunTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopRunTensorboard = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopRunTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopRunTensorboard");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling stopRunTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/stop', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRuns operation.
     * @callback module:api/RunServiceApi~stopRunsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/RunServiceApi~stopRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unBookmarkRun operation.
     * @callback module:api/RunServiceApi~unBookmarkRunCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnBookmark run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {module:api/RunServiceApi~unBookmarkRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.unBookmarkRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling unBookmarkRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling unBookmarkRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling unBookmarkRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRun operation.
     * @callback module:api/RunServiceApi~updateRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} run_uuid UUID
     * @param {module:model/V1RunBodyRequest} body 
     * @param {module:api/RunServiceApi~updateRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.updateRun = function(owner, project, run_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateRun");
      }

      // verify the required parameter 'run_uuid' is set
      if (run_uuid === undefined || run_uuid === null) {
        throw new Error("Missing the required parameter 'run_uuid' when calling updateRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'run.uuid': run_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{run.uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
