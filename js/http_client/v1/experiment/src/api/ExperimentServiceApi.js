// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Experiment service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1CodeReference', 'model/V1CodeReferenceBodyRequest', 'model/V1Experiment', 'model/V1ExperimentBodyRequest', 'model/V1ExperimentStatus', 'model/V1ListExperimentStatusesResponse', 'model/V1ListExperimentsResponse', 'model/V1OwnedEntityIdRequest', 'model/V1ProjectBodyRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1CodeReference'), require('../model/V1CodeReferenceBodyRequest'), require('../model/V1Experiment'), require('../model/V1ExperimentBodyRequest'), require('../model/V1ExperimentStatus'), require('../model/V1ListExperimentStatusesResponse'), require('../model/V1ListExperimentsResponse'), require('../model/V1OwnedEntityIdRequest'), require('../model/V1ProjectBodyRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ExperimentService) {
      root.ExperimentService = {};
    }
    root.ExperimentService.ExperimentServiceApi = factory(root.ExperimentService.ApiClient, root.ExperimentService.V1CodeReference, root.ExperimentService.V1CodeReferenceBodyRequest, root.ExperimentService.V1Experiment, root.ExperimentService.V1ExperimentBodyRequest, root.ExperimentService.V1ExperimentStatus, root.ExperimentService.V1ListExperimentStatusesResponse, root.ExperimentService.V1ListExperimentsResponse, root.ExperimentService.V1OwnedEntityIdRequest, root.ExperimentService.V1ProjectBodyRequest);
  }
}(this, function(ApiClient, V1CodeReference, V1CodeReferenceBodyRequest, V1Experiment, V1ExperimentBodyRequest, V1ExperimentStatus, V1ListExperimentStatusesResponse, V1ListExperimentsResponse, V1OwnedEntityIdRequest, V1ProjectBodyRequest) {
  'use strict';

  /**
   * ExperimentService service.
   * @module api/ExperimentServiceApi
   * @version 1.0
   */

  /**
   * Constructs a new ExperimentServiceApi. 
   * @alias module:api/ExperimentServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveExperiment operation.
     * @callback module:api/ExperimentServiceApi~archiveExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~archiveExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.archiveExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling archiveExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling archiveExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookmarkExperiment operation.
     * @callback module:api/ExperimentServiceApi~bookmarkExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~bookmarkExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.bookmarkExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling bookmarkExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling bookmarkExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bookmarkExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExperiment operation.
     * @callback module:api/ExperimentServiceApi~createExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1ExperimentBodyRequest} body 
     * @param {module:api/ExperimentServiceApi~createExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Experiment}
     */
    this.createExperiment = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createExperiment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Experiment;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createExperimentStatus operation.
     * @callback module:api/ExperimentServiceApi~createExperimentStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ExperimentStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new experiment status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~createExperimentStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ExperimentStatus}
     */
    this.createExperimentStatus = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createExperimentStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createExperimentStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createExperimentStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createExperimentStatus");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ExperimentStatus;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/statuses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiment operation.
     * @callback module:api/ExperimentServiceApi~deleteExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~deleteExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteExperiments operation.
     * @callback module:api/ExperimentServiceApi~deleteExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete experiments
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~deleteExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteExperiments = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteExperiments");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteExperiments");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteExperiments");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperiment operation.
     * @callback module:api/ExperimentServiceApi~getExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~getExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Experiment}
     */
    this.getExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Experiment;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExperimentCodeRef operation.
     * @callback module:api/ExperimentServiceApi~getExperimentCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiment code ref
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~getExperimentCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.getExperimentCodeRef = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getExperimentCodeRef");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getExperimentCodeRef");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExperimentCodeRef");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/coderef', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the greateExperimentCodeRef operation.
     * @callback module:api/ExperimentServiceApi~greateExperimentCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get experiment code ref
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project where the experiement will be assigned
     * @param {String} entity_id Unique integer identifier of the entity
     * @param {module:model/V1CodeReferenceBodyRequest} body 
     * @param {module:api/ExperimentServiceApi~greateExperimentCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.greateExperimentCodeRef = function(entity_owner, entity_project, entity_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling greateExperimentCodeRef");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling greateExperimentCodeRef");
      }

      // verify the required parameter 'entity_id' is set
      if (entity_id === undefined || entity_id === null) {
        throw new Error("Missing the required parameter 'entity_id' when calling greateExperimentCodeRef");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling greateExperimentCodeRef");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.id': entity_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/v1/{entity.owner}/{entity.project}/experiments/{entity.id}/coderef', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchivedExperiments operation.
     * @callback module:api/ExperimentServiceApi~listArchivedExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived experiments
     * @param {String} owner Owner of the namespace
     * @param {module:api/ExperimentServiceApi~listArchivedExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListExperimentsResponse}
     */
    this.listArchivedExperiments = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listArchivedExperiments");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListExperimentsResponse;

      return this.apiClient.callApi(
        '/v1/archives/{owner}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookmarkedExperiments operation.
     * @callback module:api/ExperimentServiceApi~listBookmarkedExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked experiments
     * @param {String} owner Owner of the namespace
     * @param {module:api/ExperimentServiceApi~listBookmarkedExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListExperimentsResponse}
     */
    this.listBookmarkedExperiments = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBookmarkedExperiments");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListExperimentsResponse;

      return this.apiClient.callApi(
        '/v1/bookmarks/{owner}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperimentStatuses operation.
     * @callback module:api/ExperimentServiceApi~listExperimentStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListExperimentStatusesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List experiment statuses
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~listExperimentStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListExperimentStatusesResponse}
     */
    this.listExperimentStatuses = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listExperimentStatuses");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listExperimentStatuses");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listExperimentStatuses");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListExperimentStatusesResponse;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listExperiments operation.
     * @callback module:api/ExperimentServiceApi~listExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListExperimentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List experiments
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ExperimentServiceApi~listExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListExperimentsResponse}
     */
    this.listExperiments = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listExperiments");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listExperiments");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListExperimentsResponse;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restartExperiment operation.
     * @callback module:api/ExperimentServiceApi~restartExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~restartExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Experiment}
     */
    this.restartExperiment = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restartExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restartExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartExperiment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling restartExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Experiment;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreExperiment operation.
     * @callback module:api/ExperimentServiceApi~restoreExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~restoreExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.restoreExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restoreExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restoreExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeExperiment operation.
     * @callback module:api/ExperimentServiceApi~resumeExperimentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~resumeExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Experiment}
     */
    this.resumeExperiment = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling resumeExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling resumeExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resumeExperiment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resumeExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Experiment;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startExperimentTensorboard operation.
     * @callback module:api/ExperimentServiceApi~startExperimentTensorboardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start experiment tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~startExperimentTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.startExperimentTensorboard = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling startExperimentTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling startExperimentTensorboard");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startExperimentTensorboard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling startExperimentTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/tensorboard/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopExperiment operation.
     * @callback module:api/ExperimentServiceApi~stopExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/ExperimentServiceApi~stopExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopExperiment = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopExperiment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopExperimentTensorboard operation.
     * @callback module:api/ExperimentServiceApi~stopExperimentTensorboardCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop experiment tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~stopExperimentTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopExperimentTensorboard = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopExperimentTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopExperimentTensorboard");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopExperimentTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/tensorboard/stop', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopExperiments operation.
     * @callback module:api/ExperimentServiceApi~stopExperimentsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop experiments
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/ExperimentServiceApi~stopExperimentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopExperiments = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopExperiments");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopExperiments");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopExperiments");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unBookmarkExperiment operation.
     * @callback module:api/ExperimentServiceApi~unBookmarkExperimentCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnBookmark experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/ExperimentServiceApi~unBookmarkExperimentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.unBookmarkExperiment = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling unBookmarkExperiment");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling unBookmarkExperiment");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unBookmarkExperiment");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{id}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateExperiment2 operation.
     * @callback module:api/ExperimentServiceApi~updateExperiment2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Experiment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update experiment
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} experiment_id Unique integer identifier
     * @param {module:model/V1ExperimentBodyRequest} body 
     * @param {module:api/ExperimentServiceApi~updateExperiment2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Experiment}
     */
    this.updateExperiment2 = function(owner, project, experiment_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateExperiment2");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateExperiment2");
      }

      // verify the required parameter 'experiment_id' is set
      if (experiment_id === undefined || experiment_id === null) {
        throw new Error("Missing the required parameter 'experiment_id' when calling updateExperiment2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateExperiment2");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'experiment.id': experiment_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Experiment;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/experiments/{experiment.id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
