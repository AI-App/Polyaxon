// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Experiment service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExperimentService);
  }
}(this, function(expect, ExperimentService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExperimentService.V1Experiment();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V1Experiment', function() {
    it('should create an instance of V1Experiment', function() {
      // uncomment below and update the code to test V1Experiment
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be.a(ExperimentService.V1Experiment);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property unique_name (base name: "unique_name")', function() {
      // uncomment below and update the code to test the property unique_name
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property deleted (base name: "deleted")', function() {
      // uncomment below and update the code to test the property deleted
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property created_at (base name: "created_at")', function() {
      // uncomment below and update the code to test the property created_at
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property updated_at (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updated_at
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property started_at (base name: "started_at")', function() {
      // uncomment below and update the code to test the property started_at
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property finished_at (base name: "finished_at")', function() {
      // uncomment below and update the code to test the property finished_at
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property is_managed (base name: "is_managed")', function() {
      // uncomment below and update the code to test the property is_managed
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property spec (base name: "spec")', function() {
      // uncomment below and update the code to test the property spec
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property backend (base name: "backend")', function() {
      // uncomment below and update the code to test the property backend
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property framework (base name: "framework")', function() {
      // uncomment below and update the code to test the property framework
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property last_status (base name: "last_status")', function() {
      // uncomment below and update the code to test the property last_status
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property code_reference (base name: "code_reference")', function() {
      // uncomment below and update the code to test the property code_reference
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property resources (base name: "resources")', function() {
      // uncomment below and update the code to test the property resources
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property readme (base name: "readme")', function() {
      // uncomment below and update the code to test the property readme
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property bookmarked (base name: "bookmarked")', function() {
      // uncomment below and update the code to test the property bookmarked
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property params (base name: "params")', function() {
      // uncomment below and update the code to test the property params
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property run_env (base name: "run_env")', function() {
      // uncomment below and update the code to test the property run_env
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property build_job (base name: "build_job")', function() {
      // uncomment below and update the code to test the property build_job
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property data_refs (base name: "data_refs")', function() {
      // uncomment below and update the code to test the property data_refs
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property artifact_refs (base name: "artifact_refs")', function() {
      // uncomment below and update the code to test the property artifact_refs
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property original (base name: "original")', function() {
      // uncomment below and update the code to test the property original
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property cloning_strategy (base name: "cloning_strategy")', function() {
      // uncomment below and update the code to test the property cloning_strategy
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property experiment_group (base name: "experiment_group")', function() {
      // uncomment below and update the code to test the property experiment_group
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property num_jobs (base name: "num_jobs")', function() {
      // uncomment below and update the code to test the property num_jobs
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property has_tensorboard (base name: "has_tensorboard")', function() {
      // uncomment below and update the code to test the property has_tensorboard
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

    it('should have the property last_metric (base name: "last_metric")', function() {
      // uncomment below and update the code to test the property last_metric
      //var instance = new ExperimentService.V1Experiment();
      //expect(instance).to.be();
    });

  });

}));
