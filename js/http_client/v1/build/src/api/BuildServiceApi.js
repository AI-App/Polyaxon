// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Build service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/V1Build', 'model/V1BuildBodyRequest', 'model/V1BuildStatus', 'model/V1CodeReference', 'model/V1CodeReferenceBodyRequest', 'model/V1ListBuildStatusesResponse', 'model/V1ListBuildsResponse', 'model/V1OwnedEntityIdRequest', 'model/V1ProjectBodyRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/V1Build'), require('../model/V1BuildBodyRequest'), require('../model/V1BuildStatus'), require('../model/V1CodeReference'), require('../model/V1CodeReferenceBodyRequest'), require('../model/V1ListBuildStatusesResponse'), require('../model/V1ListBuildsResponse'), require('../model/V1OwnedEntityIdRequest'), require('../model/V1ProjectBodyRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.BuildService) {
      root.BuildService = {};
    }
    root.BuildService.BuildServiceApi = factory(root.BuildService.ApiClient, root.BuildService.V1Build, root.BuildService.V1BuildBodyRequest, root.BuildService.V1BuildStatus, root.BuildService.V1CodeReference, root.BuildService.V1CodeReferenceBodyRequest, root.BuildService.V1ListBuildStatusesResponse, root.BuildService.V1ListBuildsResponse, root.BuildService.V1OwnedEntityIdRequest, root.BuildService.V1ProjectBodyRequest);
  }
}(this, function(ApiClient, V1Build, V1BuildBodyRequest, V1BuildStatus, V1CodeReference, V1CodeReferenceBodyRequest, V1ListBuildStatusesResponse, V1ListBuildsResponse, V1OwnedEntityIdRequest, V1ProjectBodyRequest) {
  'use strict';

  /**
   * BuildService service.
   * @module api/BuildServiceApi
   * @version 1.0
   */

  /**
   * Constructs a new BuildServiceApi. 
   * @alias module:api/BuildServiceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archiveBuild operation.
     * @callback module:api/BuildServiceApi~archiveBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~archiveBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.archiveBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling archiveBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling archiveBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archiveBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the bookmarkBuild operation.
     * @callback module:api/BuildServiceApi~bookmarkBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~bookmarkBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.bookmarkBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling bookmarkBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling bookmarkBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling bookmarkBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuild operation.
     * @callback module:api/BuildServiceApi~createBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1BuildBodyRequest} body 
     * @param {module:api/BuildServiceApi~createBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Build}
     */
    this.createBuild = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Build;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createBuildStatus operation.
     * @callback module:api/BuildServiceApi~createBuildStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1BuildStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new build status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/BuildServiceApi~createBuildStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1BuildStatus}
     */
    this.createBuildStatus = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling createBuildStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createBuildStatus");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createBuildStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBuildStatus");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1BuildStatus;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/statuses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuild operation.
     * @callback module:api/BuildServiceApi~deleteBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~deleteBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBuilds operation.
     * @callback module:api/BuildServiceApi~deleteBuildsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/BuildServiceApi~deleteBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.deleteBuilds = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling deleteBuilds");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling deleteBuilds");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling deleteBuilds");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuild operation.
     * @callback module:api/BuildServiceApi~getBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~getBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Build}
     */
    this.getBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Build;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuildCodeRef operation.
     * @callback module:api/BuildServiceApi~getBuildCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get build code ref
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~getBuildCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.getBuildCodeRef = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getBuildCodeRef");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getBuildCodeRef");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBuildCodeRef");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/coderef', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the greateBuildCodeRef operation.
     * @callback module:api/BuildServiceApi~greateBuildCodeRefCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1CodeReference} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create build code ref
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project where the experiement will be assigned
     * @param {String} entity_id Unique integer identifier of the entity
     * @param {module:model/V1CodeReferenceBodyRequest} body 
     * @param {module:api/BuildServiceApi~greateBuildCodeRefCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1CodeReference}
     */
    this.greateBuildCodeRef = function(entity_owner, entity_project, entity_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling greateBuildCodeRef");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling greateBuildCodeRef");
      }

      // verify the required parameter 'entity_id' is set
      if (entity_id === undefined || entity_id === null) {
        throw new Error("Missing the required parameter 'entity_id' when calling greateBuildCodeRef");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling greateBuildCodeRef");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.id': entity_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1CodeReference;

      return this.apiClient.callApi(
        '/v1/{entity.owner}/{entity.project}/builds/{entity.id}/coderef', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listArchivedBuilds operation.
     * @callback module:api/BuildServiceApi~listArchivedBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListBuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived builds
     * @param {String} owner Owner of the namespace
     * @param {module:api/BuildServiceApi~listArchivedBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListBuildsResponse}
     */
    this.listArchivedBuilds = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listArchivedBuilds");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListBuildsResponse;

      return this.apiClient.callApi(
        '/v1/archives/{owner}/builds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBookmarkedBuilds operation.
     * @callback module:api/BuildServiceApi~listBookmarkedBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListBuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked builds
     * @param {String} owner Owner of the namespace
     * @param {module:api/BuildServiceApi~listBookmarkedBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListBuildsResponse}
     */
    this.listBookmarkedBuilds = function(owner, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBookmarkedBuilds");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListBuildsResponse;

      return this.apiClient.callApi(
        '/v1/bookmarks/{owner}/builds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuildStatuses operation.
     * @callback module:api/BuildServiceApi~listBuildStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListBuildStatusesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List build statuses
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~listBuildStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListBuildStatusesResponse}
     */
    this.listBuildStatuses = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBuildStatuses");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listBuildStatuses");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listBuildStatuses");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListBuildStatusesResponse;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the listBuilds operation.
     * @callback module:api/BuildServiceApi~listBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListBuildsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/BuildServiceApi~listBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListBuildsResponse}
     */
    this.listBuilds = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling listBuilds");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling listBuilds");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListBuildsResponse;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restartBuild operation.
     * @callback module:api/BuildServiceApi~restartBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/BuildServiceApi~restartBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Build}
     */
    this.restartBuild = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restartBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restartBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restartBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling restartBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Build;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreBuild operation.
     * @callback module:api/BuildServiceApi~restoreBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~restoreBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.restoreBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling restoreBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling restoreBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling restoreBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBuild operation.
     * @callback module:api/BuildServiceApi~stopBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:model/V1OwnedEntityIdRequest} body 
     * @param {module:api/BuildServiceApi~stopBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopBuild = function(owner, project, id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopBuild");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the stopBuilds operation.
     * @callback module:api/BuildServiceApi~stopBuildsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop builds
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1ProjectBodyRequest} body 
     * @param {module:api/BuildServiceApi~stopBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.stopBuilds = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling stopBuilds");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling stopBuilds");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling stopBuilds");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unBookmarkBuild operation.
     * @callback module:api/BuildServiceApi~unBookmarkBuildCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnBookmark build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} id Unique integer identifier of the entity
     * @param {module:api/BuildServiceApi~unBookmarkBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.unBookmarkBuild = function(owner, project, id, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling unBookmarkBuild");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling unBookmarkBuild");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unBookmarkBuild");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{id}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBuild2 operation.
     * @callback module:api/BuildServiceApi~updateBuild2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update build
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} build_id Unique integer identifier
     * @param {module:model/V1BuildBodyRequest} body 
     * @param {module:api/BuildServiceApi~updateBuild2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Build}
     */
    this.updateBuild2 = function(owner, project, build_id, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling updateBuild2");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling updateBuild2");
      }

      // verify the required parameter 'build_id' is set
      if (build_id === undefined || build_id === null) {
        throw new Error("Missing the required parameter 'build_id' when calling updateBuild2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBuild2");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'build.id': build_id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Build;

      return this.apiClient.callApi(
        '/v1/{owner}/{project}/builds/{build.id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
