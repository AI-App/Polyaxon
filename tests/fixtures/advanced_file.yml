---
version: 1

project:
  name: project1
  description: this is a test project

settings:
  logging:
    level: INFO
    path: /tmp/plx_logs/project1
  run_type: local
  environment:
    n_workers: 5
    n_ps: 10
    delay_workers_by_global_step: true
    run_config:
      tf_random_seed: 100
      save_summary_steps: 100
      save_checkpoints_secs: 60
      session:
        allow_soft_placement: true
        intra_op_parallelism_threads: 2
        inter_op_parallelism_threads: 2


declarations:
  cnn:
    kernels: [64, 32]
    size: [2, 2]
    strides: [1, 1]

model:
  model_type: classifier
  loss:
    MeanSquaredError:
  optimizer:
    Adam:
  graph:
    input_layers: images
    layers:
      - for:
          len: "{{ cnn.kernels|length }}"
          do:
            - Conv2D:
                filters: "{{ cnn.kernels[index] }}"
                kernel_size: "{{ cnn.size }}"
                strides: "{{ cnn.strides }}"
                activation: relu
                tags: tag1
                is_output: true
      - if:
          cond: 1 == 1
          do:
            MaxPooling2D:
              kernels: 12
              is_output: true

      - if:
          cond: 1 == "{{ cnn.kernels[1] }}"
          do:
            MaxPooling2D:
              kernels: 12
              is_output: true
          else_do:
            for:
              len: "{{ cnn.kernels|length }}"
              do:
                - Conv2D:
                    filters: "{{ cnn.kernels[index] }}"
                    kernel_size: "{{ cnn.size }}"
                    strides: "{{ cnn.strides }}"
                    activation: relu
                    tags: tag2
                    is_output: true

      - Flatten:
          inbound_nodes: ["{{ tags.tag1[1] }}"]
      - Dense:
          units: 10
          activation: softmax
        
train:
  train_steps: 100
  data_pipeline:
    TFRecordImagePipeline:
      batch_size: 64
      num_epochs: 1
      shuffle: true
      dynamic_pad: false
      data_files: ["../data/mnist/mnist_train.tfrecord"]
      meta_data_file: "../data/mnist/meta_data.json"

eval:
  data_pipeline:
    TFRecordImagePipeline:
      batch_size: 32
      num_epochs: 1
      shuffle: False
      data_files: ["../data/mnist/mnist_train.tfrecord"]
      meta_data_file: "../data/mnist/meta_data.json"
...
