// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/polyaxon_sdk.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("v1/polyaxon_sdk.proto", fileDescriptor_5f2d65d1ab5d9ce0) }

var fileDescriptor_5f2d65d1ab5d9ce0 = []byte{
	// 1498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0x5b, 0x73, 0xdb, 0x36,
	0x16, 0xc7, 0x57, 0x4a, 0xd6, 0x97, 0x63, 0xcb, 0x17, 0xd8, 0x49, 0x3c, 0xca, 0x4d, 0x61, 0xae,
	0xd6, 0xc4, 0xa4, 0x25, 0x3b, 0x97, 0xf5, 0xee, 0xec, 0xac, 0xed, 0x78, 0xbc, 0x99, 0x4d, 0x36,
	0x59, 0x39, 0xce, 0xcc, 0x76, 0xda, 0xa4, 0x14, 0x09, 0x4b, 0xb4, 0x24, 0x80, 0x21, 0x40, 0xd9,
	0xaa, 0xeb, 0x99, 0x4e, 0x9f, 0xfa, 0xd0, 0xbe, 0xb4, 0x6f, 0xfd, 0x06, 0x7d, 0xe8, 0x63, 0xfb,
	0x45, 0xfa, 0xd4, 0xf7, 0x7e, 0x90, 0x0e, 0x40, 0x80, 0x91, 0x1a, 0xd3, 0xa2, 0xe4, 0x99, 0x3e,
	0xd9, 0x38, 0x02, 0xff, 0xbf, 0x73, 0x0e, 0x0f, 0x80, 0x03, 0xc2, 0x85, 0x76, 0xc9, 0xf2, 0x69,
	0xb3, 0x63, 0x1f, 0x52, 0xf2, 0x96, 0xb9, 0x0d, 0xd3, 0x0f, 0x28, 0xa7, 0x28, 0xdb, 0x2e, 0xe5,
	0xaf, 0xd4, 0x28, 0xad, 0x35, 0xb1, 0x65, 0xfb, 0x9e, 0x65, 0x13, 0x42, 0xb9, 0xcd, 0x3d, 0x4a,
	0x58, 0x34, 0x23, 0x7f, 0x59, 0xfd, 0x2a, 0x47, 0xd5, 0x70, 0xcf, 0xc2, 0x2d, 0x9f, 0x77, 0xd4,
	0x8f, 0xf7, 0xe5, 0x1f, 0x67, 0xa9, 0x86, 0xc9, 0x12, 0x3b, 0xb0, 0x6b, 0x35, 0x1c, 0x58, 0xd4,
	0x97, 0x8f, 0x9f, 0x20, 0x95, 0x6b, 0x97, 0xac, 0xaa, 0xcd, 0xb0, 0x1a, 0xce, 0xb6, 0x4b, 0x96,
	0x43, 0x5d, 0xfc, 0x36, 0xc0, 0x7b, 0xca, 0x34, 0xd9, 0x2e, 0x59, 0x41, 0x48, 0xd4, 0x68, 0x46,
	0xf8, 0x1c, 0xd0, 0x7d, 0xec, 0xf0, 0x2e, 0x4b, 0x1b, 0x07, 0xcc, 0xa3, 0xa4, 0x4b, 0xd3, 0x0e,
	0x79, 0xbd, 0x6b, 0x18, 0x32, 0x1c, 0x44, 0xc3, 0xf2, 0xcf, 0x97, 0x00, 0x2a, 0x21, 0xd9, 0xc1,
	0x41, 0xdb, 0x73, 0x30, 0xfa, 0x14, 0xc6, 0x9e, 0x79, 0x8c, 0x57, 0x42, 0xc2, 0xd0, 0x45, 0xb3,
	0x5d, 0x32, 0x5f, 0x46, 0xea, 0x1b, 0xd4, 0xed, 0x54, 0xf0, 0xbb, 0x10, 0x33, 0x9e, 0x9f, 0x17,
	0x76, 0x3d, 0xab, 0x82, 0x99, 0x4f, 0x09, 0xc3, 0xc6, 0x9d, 0x2f, 0x7f, 0xf9, 0xed, 0xbb, 0x6c,
	0x01, 0x5d, 0x93, 0x59, 0x6a, 0x97, 0xac, 0x23, 0x7a, 0x40, 0x70, 0x70, 0x6c, 0x1d, 0x29, 0x07,
	0x8f, 0x85, 0xdf, 0x0c, 0xed, 0x01, 0x12, 0xcf, 0x6e, 0x50, 0xda, 0x68, 0xd9, 0x41, 0x03, 0xbb,
	0x92, 0x35, 0x27, 0x34, 0x77, 0x19, 0x0e, 0xfa, 0x83, 0x6e, 0x4b, 0xd0, 0x75, 0x74, 0x55, 0x83,
	0xaa, 0x4a, 0x8a, 0x59, 0x47, 0x22, 0x30, 0xc5, 0x71, 0x60, 0x46, 0x3c, 0xba, 0x1e, 0x38, 0x75,
	0xaf, 0x3d, 0x38, 0xe5, 0x96, 0xa4, 0x5c, 0x43, 0x57, 0x34, 0xc5, 0x8e, 0x84, 0x7a, 0x21, 0x3b,
	0x30, 0xbe, 0x19, 0x60, 0x9b, 0xe3, 0x4a, 0x48, 0x10, 0x12, 0x42, 0x95, 0x90, 0x74, 0x8b, 0x8f,
	0x2a, 0x9b, 0xb1, 0x28, 0xf5, 0x6e, 0x1a, 0x7d, 0xd2, 0xb3, 0x96, 0x29, 0xa2, 0x8f, 0x61, 0x64,
	0x1b, 0x0b, 0x6f, 0x50, 0x5e, 0x3c, 0xfd, 0xe2, 0x80, 0x60, 0x77, 0x8b, 0x70, 0x8f, 0x77, 0x76,
	0x77, 0x9f, 0xba, 0x1f, 0x28, 0x2f, 0x49, 0xe5, 0xbb, 0xe8, 0xf6, 0xe9, 0xca, 0xd6, 0x51, 0x18,
	0x7a, 0xee, 0x31, 0x7a, 0x03, 0xe3, 0xbb, 0xbe, 0x9b, 0xc6, 0xe5, 0x55, 0x29, 0x6c, 0xe6, 0x17,
	0xfb, 0x09, 0x8b, 0x7a, 0x94, 0xe2, 0xc2, 0xfb, 0x4f, 0x60, 0xec, 0xa5, 0xcd, 0x9d, 0x7a, 0x5a,
	0xf9, 0xf2, 0x60, 0xf2, 0x04, 0xc6, 0x9f, 0xe0, 0x26, 0x8e, 0xdc, 0x3f, 0x2d, 0x3f, 0x17, 0xcd,
	0x68, 0x59, 0x9a, 0x7a, 0x59, 0x9a, 0x5b, 0x62, 0x59, 0xea, 0x74, 0x15, 0x53, 0xa6, 0x8b, 0x00,
	0xc4, 0xbc, 0xe4, 0x25, 0x91, 0x04, 0x5b, 0x96, 0xb0, 0x62, 0x5f, 0x98, 0x2b, 0x11, 0x22, 0x3e,
	0x0e, 0xa3, 0x3b, 0x9c, 0xfa, 0xc3, 0x46, 0xf7, 0x40, 0x02, 0x2d, 0xa3, 0x98, 0x2a, 0x3a, 0x8b,
	0x71, 0xea, 0x0b, 0xea, 0x3e, 0x8c, 0x29, 0xea, 0xe0, 0x31, 0x9a, 0x12, 0x79, 0xcf, 0xb8, 0xd9,
	0x07, 0xa9, 0x59, 0x5f, 0x64, 0x20, 0xf7, 0x94, 0xb4, 0xed, 0xa6, 0xa7, 0xab, 0x70, 0x98, 0x40,
	0xff, 0x2e, 0xa9, 0x0f, 0x8c, 0xe5, 0x74, 0x81, 0x7a, 0x31, 0x50, 0xb8, 0xd0, 0x86, 0xa9, 0x1e,
	0x0f, 0x06, 0x0f, 0x5a, 0x15, 0xaf, 0xd1, 0xaf, 0x78, 0x7b, 0xb9, 0x18, 0x46, 0x37, 0xa9, 0xdf,
	0x49, 0xbd, 0xb4, 0x07, 0x7c, 0x9b, 0x0e, 0xf5, 0x3b, 0x02, 0xd3, 0x00, 0xa8, 0x60, 0xc6, 0xed,
	0x20, 0xfd, 0x26, 0xf2, 0x58, 0x92, 0xca, 0xc6, 0x52, 0x3a, 0x52, 0x10, 0xc9, 0x0b, 0x98, 0x07,
	0xe3, 0x15, 0xcc, 0xc2, 0x16, 0x4e, 0xcd, 0x7a, 0x24, 0x59, 0x25, 0xe3, 0x7e, 0x6a, 0x56, 0xd8,
	0x92, 0xe9, 0x3b, 0x00, 0x50, 0xdb, 0xf9, 0x59, 0x97, 0x47, 0xca, 0x30, 0xd5, 0x9e, 0x2f, 0xc0,
	0x22, 0xa1, 0x34, 0xf8, 0xb3, 0xc0, 0x41, 0x44, 0x43, 0x1d, 0x98, 0xd0, 0x07, 0xe5, 0xb0, 0xe4,
	0x87, 0x92, 0xbc, 0x6c, 0x98, 0xe9, 0xc8, 0xfa, 0x30, 0x45, 0xc7, 0x90, 0xdb, 0x25, 0x67, 0x85,
	0xab, 0xb2, 0x2a, 0xa6, 0x5c, 0xa5, 0x21, 0x89, 0xf1, 0xdf, 0x64, 0x60, 0x6e, 0x47, 0x95, 0xf0,
	0x2b, 0x4c, 0x18, 0x0d, 0xaa, 0xd4, 0x0e, 0xdc, 0xa1, 0xbc, 0xd8, 0x90, 0x5e, 0xfc, 0xc3, 0x78,
	0x94, 0xce, 0x0b, 0xfe, 0x1e, 0x67, 0xc5, 0x65, 0xfe, 0x55, 0x06, 0x90, 0xda, 0x22, 0xcf, 0xea,
	0xce, 0x3f, 0xa5, 0x3b, 0x8f, 0x8b, 0x0f, 0x87, 0x71, 0x87, 0xfa, 0xe8, 0x10, 0xa6, 0xa2, 0xfe,
	0x60, 0x87, 0xdb, 0x3c, 0x64, 0x98, 0x9d, 0xea, 0x85, 0x3c, 0x83, 0xa3, 0x99, 0x71, 0x73, 0xa3,
	0x6a, 0x02, 0x99, 0x69, 0x4f, 0x09, 0xc5, 0x39, 0x86, 0xe9, 0xb8, 0xdd, 0x89, 0x24, 0xd1, 0x25,
	0x21, 0x1f, 0x51, 0x35, 0xe4, 0xf4, 0xe8, 0xff, 0x26, 0xd9, 0x2b, 0xc6, 0x80, 0x6c, 0xf1, 0x0e,
	0x3e, 0xd7, 0x81, 0x6f, 0x52, 0x17, 0x57, 0xf0, 0xde, 0xe9, 0x81, 0x5f, 0xd2, 0x7d, 0x9d, 0x9a,
	0x1d, 0x47, 0xaf, 0xd6, 0x22, 0x5a, 0x4a, 0xbb, 0xab, 0xba, 0x38, 0xc0, 0x7b, 0xe8, 0xeb, 0x0c,
	0xcc, 0xc4, 0xd1, 0x2b, 0xcd, 0xe8, 0xdc, 0x50, 0x83, 0xee, 0x73, 0x63, 0xb6, 0xcb, 0x8e, 0x03,
	0x4c, 0x1c, 0x6c, 0x3c, 0x97, 0xd8, 0x6d, 0x63, 0x23, 0xc6, 0x62, 0xe9, 0xb3, 0xa9, 0xe9, 0x6a,
	0xf8, 0x07, 0x27, 0x94, 0xb5, 0xc7, 0x97, 0xb5, 0x4c, 0xb1, 0xfc, 0xeb, 0x24, 0x4c, 0xa9, 0x03,
	0x4b, 0x37, 0xef, 0x18, 0x26, 0x45, 0xbc, 0xca, 0xca, 0xd0, 0xbc, 0xce, 0x4e, 0x4f, 0xbf, 0xbb,
	0xa0, 0xf3, 0xa2, 0xe7, 0x25, 0x77, 0xd6, 0x3a, 0x31, 0xca, 0x25, 0x66, 0x35, 0x3d, 0xc6, 0xd1,
	0x7e, 0xd4, 0x59, 0xab, 0xc7, 0xff, 0x6b, 0xb7, 0xf0, 0xe0, 0xa8, 0xc4, 0xdb, 0x42, 0x8c, 0x22,
	0x52, 0x37, 0x80, 0x8b, 0xbd, 0xb7, 0x85, 0x38, 0xb8, 0x13, 0x7b, 0xf9, 0x64, 0xa0, 0xea, 0xbf,
	0xd1, 0x8d, 0xc4, 0x5b, 0x83, 0x26, 0x23, 0x0a, 0xf3, 0xdd, 0x37, 0x87, 0x61, 0x89, 0xf7, 0x24,
	0xd1, 0x40, 0x85, 0xa4, 0x1b, 0x44, 0x0c, 0x7c, 0x03, 0xb9, 0xa8, 0xb0, 0x94, 0x46, 0x42, 0x36,
	0x27, 0xba, 0x7a, 0x14, 0xa3, 0x28, 0xd5, 0x6f, 0x19, 0xd7, 0x13, 0x13, 0xe8, 0x48, 0xc9, 0xa8,
	0x25, 0x87, 0x6d, 0xac, 0x1d, 0x4c, 0x6c, 0x75, 0x4e, 0x92, 0x47, 0x46, 0xa2, 0x7c, 0xbc, 0x58,
	0x90, 0x03, 0xb9, 0xe8, 0x46, 0x31, 0x10, 0x41, 0xf5, 0xe1, 0xf9, 0x14, 0x04, 0x11, 0x43, 0x15,
	0x26, 0xe5, 0xb5, 0x62, 0x18, 0x46, 0x39, 0x25, 0xa3, 0x05, 0x33, 0x51, 0xaf, 0xbf, 0x75, 0xe8,
	0xe3, 0xc0, 0x6b, 0x61, 0xc2, 0x07, 0x6e, 0x0c, 0x55, 0x9d, 0x15, 0x6f, 0x9c, 0x8c, 0xec, 0xce,
	0x5b, 0x03, 0xa6, 0x54, 0x8d, 0xf5, 0x0b, 0xaa, 0x0f, 0xcc, 0xb8, 0x91, 0xbc, 0x93, 0xe9, 0x16,
	0x86, 0xc0, 0xac, 0x6a, 0x61, 0xce, 0x1e, 0xdc, 0x69, 0x3c, 0xdd, 0xb9, 0xb4, 0x60, 0x5a, 0x2f,
	0xda, 0x61, 0xa3, 0xd3, 0x25, 0x6e, 0x24, 0xd3, 0xe2, 0x76, 0xe1, 0x1d, 0xcc, 0xbe, 0xef, 0x56,
	0x86, 0x05, 0xde, 0x97, 0xc0, 0x3b, 0xc5, 0x5b, 0xc9, 0xc0, 0xae, 0x0e, 0xa5, 0x06, 0xd3, 0x5b,
	0xc4, 0xae, 0x36, 0xf5, 0xdb, 0xdb, 0x7c, 0x3a, 0x30, 0x50, 0x7d, 0x64, 0x30, 0xae, 0x24, 0x03,
	0x1d, 0x0f, 0xf9, 0x30, 0xf3, 0xc4, 0x63, 0x67, 0x23, 0x0d, 0x14, 0x5a, 0xf9, 0x35, 0x4c, 0xac,
	0x87, 0xbc, 0xae, 0xcf, 0x95, 0x6d, 0xf8, 0xeb, 0x33, 0x5a, 0xf3, 0x48, 0xb4, 0x2f, 0x6d, 0x06,
	0xd8, 0x65, 0xdd, 0xcc, 0x31, 0x61, 0x15, 0xf3, 0x8d, 0x6b, 0x92, 0xb2, 0x60, 0xcc, 0x69, 0x8a,
	0xd8, 0xe8, 0x98, 0xc5, 0x69, 0x03, 0x13, 0x71, 0x66, 0xfd, 0x0f, 0x26, 0xc4, 0xfe, 0xa9, 0x75,
	0x37, 0x60, 0xb4, 0x86, 0xb9, 0xb0, 0xa0, 0x04, 0xbf, 0x23, 0x6d, 0x31, 0xc3, 0xb8, 0x20, 0xb5,
	0xa7, 0x51, 0xae, 0x47, 0xbb, 0xfc, 0x53, 0x06, 0xa6, 0x5e, 0x47, 0xdf, 0xbb, 0xb4, 0xec, 0x73,
	0x98, 0xd8, 0xc6, 0x5c, 0x19, 0x59, 0xa2, 0xf4, 0xa4, 0x90, 0xd6, 0xb3, 0x8c, 0x05, 0x29, 0x8f,
	0xd0, 0x8c, 0x96, 0x6f, 0xeb, 0xe7, 0x5f, 0x41, 0x6e, 0x1b, 0xf3, 0x67, 0xb4, 0xf6, 0x6f, 0x9b,
	0xb8, 0xcd, 0x53, 0x7c, 0x9d, 0x92, 0x47, 0x41, 0x3c, 0xcf, 0xb8, 0x2c, 0x25, 0x2f, 0xa0, 0x38,
	0x1b, 0x4d, 0x5a, 0x7b, 0x5b, 0x8f, 0x7e, 0xdc, 0xf8, 0x31, 0xfb, 0xed, 0xfa, 0x0f, 0x59, 0x54,
	0x83, 0xc9, 0x97, 0xea, 0x9b, 0x63, 0x81, 0xb9, 0x0d, 0xe3, 0x45, 0xef, 0x18, 0x2d, 0xd6, 0x39,
	0xf7, 0xd9, 0x9a, 0x65, 0xd5, 0x3c, 0x5e, 0x0f, 0xab, 0xa6, 0x43, 0x5b, 0xf1, 0x47, 0xca, 0xf8,
	0x9f, 0x25, 0xe6, 0x36, 0x58, 0x7e, 0xde, 0xa1, 0x84, 0xdb, 0x0e, 0xff, 0x97, 0x36, 0x8b, 0xc9,
	0xe5, 0x91, 0x92, 0x59, 0x5a, 0x35, 0x57, 0x8b, 0xe7, 0x33, 0xd9, 0x73, 0xe7, 0xcb, 0x33, 0xb6,
	0xef, 0x37, 0x3d, 0x47, 0x7e, 0x73, 0xb4, 0xf6, 0x19, 0x25, 0x6b, 0x1f, 0x58, 0x2a, 0x6b, 0x70,
	0x6e, 0x75, 0x79, 0x05, 0xad, 0x40, 0xe9, 0xff, 0x34, 0x2c, 0xb8, 0x94, 0xdc, 0xe5, 0x85, 0xba,
	0xdd, 0xc6, 0x05, 0x1f, 0x07, 0x2d, 0x8f, 0x89, 0xa4, 0x14, 0x38, 0x2d, 0xd8, 0x8e, 0x83, 0x19,
	0x2b, 0xf0, 0x3a, 0x2e, 0x04, 0x98, 0xd1, 0x30, 0x70, 0xb0, 0x59, 0x59, 0x14, 0xcf, 0xae, 0x22,
	0x03, 0x16, 0x2a, 0xca, 0x56, 0x70, 0x29, 0x66, 0x05, 0x42, 0x79, 0x01, 0x1f, 0x7a, 0x8c, 0x9b,
	0x68, 0x04, 0xce, 0x7f, 0x9f, 0xcd, 0x8c, 0x7e, 0x74, 0x1d, 0xae, 0xc2, 0xc8, 0xba, 0xef, 0xfd,
	0x07, 0x77, 0xd0, 0xdc, 0x58, 0x36, 0x9f, 0x13, 0x15, 0x44, 0x03, 0xef, 0x33, 0xe9, 0x4a, 0x21,
	0x5b, 0x9d, 0x04, 0x88, 0x27, 0xfc, 0xa5, 0x3a, 0x22, 0x93, 0xbd, 0xf2, 0x7b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xaa, 0x13, 0x93, 0x51, 0xa6, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunServiceClient is the client API for RunService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunServiceClient interface {
	// List runs
	ListRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List bookmarked runs for user
	ListBookmarkedRuns(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// Create new run
	CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Get run
	GetRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error)
	// Update run
	UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Patch run
	PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Delete run
	DeleteRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run
	StopRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop runs
	StopRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run
	InvalidateRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error)
	// Restart run
	RestartRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error)
	// Resume run
	ResumeRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error)
	// Archive run
	ArchiveRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore run
	RestoreRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark run
	UnBookmarkRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// Create new run status
	CreateRunStatus(ctx context.Context, in *EntityStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get run code ref
	GetRunCodeRefs(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*ListCodeRefResponse, error)
	// Get run code ref
	CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
}

type runServiceClient struct {
	cc *grpc.ClientConn
}

func NewRunServiceClient(cc *grpc.ClientConn) RunServiceClient {
	return &runServiceClient{cc}
}

func (c *runServiceClient) ListRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunService/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ListBookmarkedRuns(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunService/ListBookmarkedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ListArchivedRuns(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunService/ListArchivedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) GetRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/UpdateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/PatchRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) DeleteRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/DeleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) DeleteRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/DeleteRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) StopRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/StopRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) StopRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/StopRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) InvalidateRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/InvalidateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) InvalidateRuns(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/InvalidateRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) CopyRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/CopyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) RestartRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/RestartRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ResumeRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunService/ResumeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) ArchiveRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/ArchiveRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) RestoreRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/RestoreRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) BookmarkRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/BookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) UnBookmarkRun(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/UnBookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) StartRunTensorboard(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/StartRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) StopRunTensorboard(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/StopRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) GetRunStatuses(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.RunService/GetRunStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) CreateRunStatus(ctx context.Context, in *EntityStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunService/CreateRunStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) GetRunCodeRefs(ctx context.Context, in *OwnedEntityUUIdRequest, opts ...grpc.CallOption) (*ListCodeRefResponse, error) {
	out := new(ListCodeRefResponse)
	err := c.cc.Invoke(ctx, "/v1.RunService/GetRunCodeRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runServiceClient) CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.RunService/CreateRunCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunServiceServer is the server API for RunService service.
type RunServiceServer interface {
	// List runs
	ListRuns(context.Context, *ProjectBodyRequest) (*ListRunsResponse, error)
	// List bookmarked runs for user
	ListBookmarkedRuns(context.Context, *UserBodyRequest) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(context.Context, *UserBodyRequest) (*ListRunsResponse, error)
	// Create new run
	CreateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Get run
	GetRun(context.Context, *OwnedEntityUUIdRequest) (*Run, error)
	// Update run
	UpdateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Patch run
	PatchRun(context.Context, *RunBodyRequest) (*Run, error)
	// Delete run
	DeleteRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Stop run
	StopRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Stop runs
	StopRuns(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Stop run
	InvalidateRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(context.Context, *OwnedEntityUUIdRequest) (*Run, error)
	// Restart run
	RestartRun(context.Context, *OwnedEntityUUIdRequest) (*Run, error)
	// Resume run
	ResumeRun(context.Context, *OwnedEntityUUIdRequest) (*Run, error)
	// Archive run
	ArchiveRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Restore run
	RestoreRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// UnBookmark run
	UnBookmarkRun(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(context.Context, *OwnedEntityUUIdRequest) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(context.Context, *OwnedEntityUUIdRequest) (*StatusResponse, error)
	// Create new run status
	CreateRunStatus(context.Context, *EntityStatusRequest) (*empty.Empty, error)
	// Get run code ref
	GetRunCodeRefs(context.Context, *OwnedEntityUUIdRequest) (*ListCodeRefResponse, error)
	// Get run code ref
	CreateRunCodeRef(context.Context, *CodeRefBodyRequest) (*CodeReference, error)
}

// UnimplementedRunServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRunServiceServer struct {
}

func (*UnimplementedRunServiceServer) ListRuns(ctx context.Context, req *ProjectBodyRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (*UnimplementedRunServiceServer) ListBookmarkedRuns(ctx context.Context, req *UserBodyRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedRuns not implemented")
}
func (*UnimplementedRunServiceServer) ListArchivedRuns(ctx context.Context, req *UserBodyRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedRuns not implemented")
}
func (*UnimplementedRunServiceServer) CreateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (*UnimplementedRunServiceServer) GetRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedRunServiceServer) UpdateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRun not implemented")
}
func (*UnimplementedRunServiceServer) PatchRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRun not implemented")
}
func (*UnimplementedRunServiceServer) DeleteRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (*UnimplementedRunServiceServer) DeleteRuns(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuns not implemented")
}
func (*UnimplementedRunServiceServer) StopRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRun not implemented")
}
func (*UnimplementedRunServiceServer) StopRuns(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRuns not implemented")
}
func (*UnimplementedRunServiceServer) InvalidateRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRun not implemented")
}
func (*UnimplementedRunServiceServer) InvalidateRuns(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRuns not implemented")
}
func (*UnimplementedRunServiceServer) CopyRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRun not implemented")
}
func (*UnimplementedRunServiceServer) RestartRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRun not implemented")
}
func (*UnimplementedRunServiceServer) ResumeRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRun not implemented")
}
func (*UnimplementedRunServiceServer) ArchiveRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRun not implemented")
}
func (*UnimplementedRunServiceServer) RestoreRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRun not implemented")
}
func (*UnimplementedRunServiceServer) BookmarkRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkRun not implemented")
}
func (*UnimplementedRunServiceServer) UnBookmarkRun(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkRun not implemented")
}
func (*UnimplementedRunServiceServer) StartRunTensorboard(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRunTensorboard not implemented")
}
func (*UnimplementedRunServiceServer) StopRunTensorboard(ctx context.Context, req *OwnedEntityUUIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRunTensorboard not implemented")
}
func (*UnimplementedRunServiceServer) GetRunStatuses(ctx context.Context, req *OwnedEntityUUIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunStatuses not implemented")
}
func (*UnimplementedRunServiceServer) CreateRunStatus(ctx context.Context, req *EntityStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunStatus not implemented")
}
func (*UnimplementedRunServiceServer) GetRunCodeRefs(ctx context.Context, req *OwnedEntityUUIdRequest) (*ListCodeRefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunCodeRefs not implemented")
}
func (*UnimplementedRunServiceServer) CreateRunCodeRef(ctx context.Context, req *CodeRefBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunCodeRef not implemented")
}

func RegisterRunServiceServer(s *grpc.Server, srv RunServiceServer) {
	s.RegisterService(&_RunService_serviceDesc, srv)
}

func _RunService_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ListRuns(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ListBookmarkedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ListBookmarkedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/ListBookmarkedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ListBookmarkedRuns(ctx, req.(*UserBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ListArchivedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ListArchivedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/ListArchivedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ListArchivedRuns(ctx, req.(*UserBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).CreateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).GetRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_UpdateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).UpdateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/UpdateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).UpdateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_PatchRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).PatchRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/PatchRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).PatchRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/DeleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).DeleteRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_DeleteRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).DeleteRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/DeleteRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).DeleteRuns(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_StopRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).StopRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/StopRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).StopRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_StopRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).StopRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/StopRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).StopRuns(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_InvalidateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).InvalidateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/InvalidateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).InvalidateRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_InvalidateRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).InvalidateRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/InvalidateRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).InvalidateRuns(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_CopyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).CopyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/CopyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).CopyRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_RestartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).RestartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/RestartRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).RestartRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ResumeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ResumeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/ResumeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ResumeRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_ArchiveRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).ArchiveRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/ArchiveRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).ArchiveRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_RestoreRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).RestoreRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/RestoreRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).RestoreRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_BookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).BookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/BookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).BookmarkRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_UnBookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).UnBookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/UnBookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).UnBookmarkRun(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_StartRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).StartRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/StartRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).StartRunTensorboard(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_StopRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).StopRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/StopRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).StopRunTensorboard(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_GetRunStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).GetRunStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/GetRunStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).GetRunStatuses(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_CreateRunStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).CreateRunStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/CreateRunStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).CreateRunStatus(ctx, req.(*EntityStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_GetRunCodeRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityUUIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).GetRunCodeRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/GetRunCodeRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).GetRunCodeRefs(ctx, req.(*OwnedEntityUUIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunService_CreateRunCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRefBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunServiceServer).CreateRunCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunService/CreateRunCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunServiceServer).CreateRunCodeRef(ctx, req.(*CodeRefBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RunService",
	HandlerType: (*RunServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRuns",
			Handler:    _RunService_ListRuns_Handler,
		},
		{
			MethodName: "ListBookmarkedRuns",
			Handler:    _RunService_ListBookmarkedRuns_Handler,
		},
		{
			MethodName: "ListArchivedRuns",
			Handler:    _RunService_ListArchivedRuns_Handler,
		},
		{
			MethodName: "CreateRun",
			Handler:    _RunService_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _RunService_GetRun_Handler,
		},
		{
			MethodName: "UpdateRun",
			Handler:    _RunService_UpdateRun_Handler,
		},
		{
			MethodName: "PatchRun",
			Handler:    _RunService_PatchRun_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _RunService_DeleteRun_Handler,
		},
		{
			MethodName: "DeleteRuns",
			Handler:    _RunService_DeleteRuns_Handler,
		},
		{
			MethodName: "StopRun",
			Handler:    _RunService_StopRun_Handler,
		},
		{
			MethodName: "StopRuns",
			Handler:    _RunService_StopRuns_Handler,
		},
		{
			MethodName: "InvalidateRun",
			Handler:    _RunService_InvalidateRun_Handler,
		},
		{
			MethodName: "InvalidateRuns",
			Handler:    _RunService_InvalidateRuns_Handler,
		},
		{
			MethodName: "CopyRun",
			Handler:    _RunService_CopyRun_Handler,
		},
		{
			MethodName: "RestartRun",
			Handler:    _RunService_RestartRun_Handler,
		},
		{
			MethodName: "ResumeRun",
			Handler:    _RunService_ResumeRun_Handler,
		},
		{
			MethodName: "ArchiveRun",
			Handler:    _RunService_ArchiveRun_Handler,
		},
		{
			MethodName: "RestoreRun",
			Handler:    _RunService_RestoreRun_Handler,
		},
		{
			MethodName: "BookmarkRun",
			Handler:    _RunService_BookmarkRun_Handler,
		},
		{
			MethodName: "UnBookmarkRun",
			Handler:    _RunService_UnBookmarkRun_Handler,
		},
		{
			MethodName: "StartRunTensorboard",
			Handler:    _RunService_StartRunTensorboard_Handler,
		},
		{
			MethodName: "StopRunTensorboard",
			Handler:    _RunService_StopRunTensorboard_Handler,
		},
		{
			MethodName: "GetRunStatuses",
			Handler:    _RunService_GetRunStatuses_Handler,
		},
		{
			MethodName: "CreateRunStatus",
			Handler:    _RunService_CreateRunStatus_Handler,
		},
		{
			MethodName: "GetRunCodeRefs",
			Handler:    _RunService_GetRunCodeRefs_Handler,
		},
		{
			MethodName: "CreateRunCodeRef",
			Handler:    _RunService_CreateRunCodeRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// List projects
	ListProjects(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List project namess
	ListProjectNames(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Get project
	GetProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Update project
	UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Patch project
	PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Delete project
	DeleteExperiment(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Archive project
	ArchiveProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore project
	RestoreExperiment(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark project
	UnBookmarkProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enable CI
	EnableProjectCI(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark project
	DisableProjectCI(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) ListProjects(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjectNames(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/ListProjectNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListBookmarkedProjects(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/ListBookmarkedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListArchivedProjects(ctx context.Context, in *UserBodyRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/ListArchivedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/PatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteExperiment(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ArchiveProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RestoreExperiment(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/RestoreExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) BookmarkProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/BookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UnBookmarkProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/UnBookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) EnableProjectCI(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/EnableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DisableProjectCI(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectService/DisableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
type ProjectServiceServer interface {
	// List projects
	ListProjects(context.Context, *OwnerBodyRequest) (*ListProjectsResponse, error)
	// List project namess
	ListProjectNames(context.Context, *OwnerBodyRequest) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(context.Context, *UserBodyRequest) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(context.Context, *UserBodyRequest) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(context.Context, *OwnerBodyRequest) (*Project, error)
	// Get project
	GetProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Update project
	UpdateProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Patch project
	PatchProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Delete project
	DeleteExperiment(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Archive project
	ArchiveProject(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restore project
	RestoreExperiment(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// UnBookmark project
	UnBookmarkProject(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Enable CI
	EnableProjectCI(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// UnBookmark project
	DisableProjectCI(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
}

// UnimplementedProjectServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (*UnimplementedProjectServiceServer) ListProjects(ctx context.Context, req *OwnerBodyRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedProjectServiceServer) ListProjectNames(ctx context.Context, req *OwnerBodyRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectNames not implemented")
}
func (*UnimplementedProjectServiceServer) ListBookmarkedProjects(ctx context.Context, req *UserBodyRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedProjects not implemented")
}
func (*UnimplementedProjectServiceServer) ListArchivedProjects(ctx context.Context, req *UserBodyRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedProjects not implemented")
}
func (*UnimplementedProjectServiceServer) CreateProject(ctx context.Context, req *OwnerBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectServiceServer) GetProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedProjectServiceServer) UpdateProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedProjectServiceServer) PatchProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProject not implemented")
}
func (*UnimplementedProjectServiceServer) DeleteExperiment(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedProjectServiceServer) ArchiveProject(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (*UnimplementedProjectServiceServer) RestoreExperiment(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreExperiment not implemented")
}
func (*UnimplementedProjectServiceServer) BookmarkProject(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkProject not implemented")
}
func (*UnimplementedProjectServiceServer) UnBookmarkProject(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkProject not implemented")
}
func (*UnimplementedProjectServiceServer) EnableProjectCI(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProjectCI not implemented")
}
func (*UnimplementedProjectServiceServer) DisableProjectCI(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProjectCI not implemented")
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjects(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/ListProjectNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjectNames(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListBookmarkedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListBookmarkedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/ListBookmarkedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListBookmarkedProjects(ctx, req.(*UserBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListArchivedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListArchivedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/ListArchivedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListArchivedProjects(ctx, req.(*UserBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).PatchProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteExperiment(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ArchiveProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RestoreExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RestoreExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/RestoreExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RestoreExperiment(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_BookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).BookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/BookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).BookmarkProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UnBookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UnBookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/UnBookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UnBookmarkProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_EnableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).EnableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/EnableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).EnableProjectCI(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DisableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DisableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectService/DisableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DisableProjectCI(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _ProjectService_ListProjects_Handler,
		},
		{
			MethodName: "ListProjectNames",
			Handler:    _ProjectService_ListProjectNames_Handler,
		},
		{
			MethodName: "ListBookmarkedProjects",
			Handler:    _ProjectService_ListBookmarkedProjects_Handler,
		},
		{
			MethodName: "ListArchivedProjects",
			Handler:    _ProjectService_ListArchivedProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _ProjectService_PatchProject_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _ProjectService_DeleteExperiment_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _ProjectService_ArchiveProject_Handler,
		},
		{
			MethodName: "RestoreExperiment",
			Handler:    _ProjectService_RestoreExperiment_Handler,
		},
		{
			MethodName: "BookmarkProject",
			Handler:    _ProjectService_BookmarkProject_Handler,
		},
		{
			MethodName: "UnBookmarkProject",
			Handler:    _ProjectService_UnBookmarkProject_Handler,
		},
		{
			MethodName: "EnableProjectCI",
			Handler:    _ProjectService_EnableProjectCI_Handler,
		},
		{
			MethodName: "DisableProjectCI",
			Handler:    _ProjectService_DisableProjectCI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthServiceClient interface {
	// Login
	Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/v1.AuthService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
type AuthServiceServer interface {
	// Login
	Login(context.Context, *CredsBodyRequest) (*Auth, error)
}

// UnimplementedAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
}

func (*UnimplementedAuthServiceServer) Login(ctx context.Context, req *CredsBodyRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*CredsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	// Get current user
	GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UserService/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	// Get current user
	GetUser(context.Context, *empty.Empty) (*User, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *empty.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// VersionServiceClient is the client API for VersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionServiceClient interface {
	// Get versions
	GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error)
	// Get log handler
	GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error) {
	out := new(Versions)
	err := c.cc.Invoke(ctx, "/v1.VersionService/GetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionServiceClient) GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error) {
	out := new(LogHandler)
	err := c.cc.Invoke(ctx, "/v1.VersionService/GetLogHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionServiceServer is the server API for VersionService service.
type VersionServiceServer interface {
	// Get versions
	GetVersions(context.Context, *empty.Empty) (*Versions, error)
	// Get log handler
	GetLogHandler(context.Context, *empty.Empty) (*LogHandler, error)
}

// UnimplementedVersionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVersionServiceServer struct {
}

func (*UnimplementedVersionServiceServer) GetVersions(ctx context.Context, req *empty.Empty) (*Versions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersions not implemented")
}
func (*UnimplementedVersionServiceServer) GetLogHandler(ctx context.Context, req *empty.Empty) (*LogHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogHandler not implemented")
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_GetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).GetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionService/GetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).GetVersions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionService_GetLogHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).GetLogHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionService/GetLogHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).GetLogHandler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersions",
			Handler:    _VersionService_GetVersions_Handler,
		},
		{
			MethodName: "GetLogHandler",
			Handler:    _VersionService_GetLogHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}
