// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/polyaxon_sdk.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("v1/polyaxon_sdk.proto", fileDescriptor_5f2d65d1ab5d9ce0) }

var fileDescriptor_5f2d65d1ab5d9ce0 = []byte{
	// 1765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x99, 0xdf, 0x73, 0xd3, 0xca,
	0x15, 0xc7, 0x2b, 0xc3, 0x84, 0xe4, 0xe4, 0xa7, 0x97, 0x10, 0xc0, 0x40, 0x71, 0x45, 0x21, 0x60,
	0x12, 0x29, 0xce, 0x0f, 0xa0, 0x06, 0x3a, 0x24, 0x34, 0x93, 0x69, 0xa0, 0x03, 0xe3, 0x94, 0x99,
	0x96, 0xce, 0x14, 0x64, 0x6b, 0x63, 0x2b, 0x89, 0xb5, 0x42, 0xbb, 0x36, 0x31, 0x10, 0x3a, 0xa5,
	0x9d, 0x69, 0xa7, 0x4f, 0x1d, 0xe8, 0x4c, 0x3b, 0x7d, 0xb8, 0x73, 0x5f, 0xef, 0xc3, 0xfd, 0x0b,
	0xee, 0x9f, 0x71, 0xef, 0xe3, 0x7d, 0xbc, 0x7f, 0xc8, 0x1d, 0xad, 0x56, 0xb2, 0x1c, 0xff, 0x5a,
	0xc9, 0x77, 0x78, 0x4a, 0xb4, 0xda, 0x3d, 0x9f, 0x73, 0x8e, 0xce, 0x9e, 0xfd, 0x4a, 0x86, 0x33,
	0x8d, 0xbc, 0xee, 0x90, 0x83, 0xa6, 0x71, 0x48, 0xec, 0x17, 0xd4, 0xdc, 0xd7, 0x1c, 0x97, 0x30,
	0x82, 0x52, 0x8d, 0x7c, 0xe6, 0x62, 0x85, 0x90, 0xca, 0x01, 0xd6, 0x0d, 0xc7, 0xd2, 0x0d, 0xdb,
	0x26, 0xcc, 0x60, 0x16, 0xb1, 0xa9, 0x3f, 0x23, 0x73, 0x41, 0xdc, 0xe5, 0x57, 0xa5, 0xfa, 0xae,
	0x8e, 0x6b, 0x0e, 0x6b, 0x8a, 0x9b, 0x0b, 0xfc, 0x4f, 0x79, 0xb1, 0x82, 0xed, 0x45, 0xfa, 0xda,
	0xa8, 0x54, 0xb0, 0xab, 0x13, 0x87, 0x2f, 0xef, 0x62, 0x6a, 0xb2, 0x91, 0xd7, 0x4b, 0x06, 0xc5,
	0xe2, 0x32, 0xdd, 0xc8, 0xeb, 0x65, 0x62, 0xe2, 0x17, 0x2e, 0xde, 0x15, 0x43, 0x53, 0xde, 0x8c,
	0xba, 0x75, 0x60, 0x8a, 0xeb, 0xd3, 0x8d, 0xbc, 0x8e, 0x0f, 0x1d, 0xec, 0x5a, 0x35, 0x6c, 0x33,
	0x31, 0x38, 0xd1, 0xc8, 0xeb, 0x7b, 0xa4, 0xe4, 0x5f, 0x2d, 0x7f, 0x8f, 0x60, 0x62, 0xc3, 0x5b,
	0xb2, 0x83, 0xdd, 0x86, 0x55, 0xc6, 0x68, 0x17, 0xe0, 0xb1, 0x45, 0x19, 0x1f, 0xa3, 0x68, 0x4e,
	0x6b, 0xe4, 0xb5, 0xa7, 0x2e, 0xd9, 0xc3, 0x65, 0xb6, 0x41, 0xcc, 0x66, 0x11, 0xbf, 0xaa, 0x63,
	0xca, 0x32, 0x7c, 0xbc, 0x35, 0xaf, 0x88, 0xa9, 0x43, 0x6c, 0x8a, 0xd5, 0xeb, 0x1f, 0xbe, 0xfd,
	0xe1, 0x53, 0x4a, 0x45, 0x59, 0x9e, 0x8e, 0x46, 0x5e, 0x7f, 0x4b, 0x5e, 0xdb, 0xd8, 0x3d, 0xd2,
	0xdf, 0x3a, 0xbe, 0x91, 0x23, 0xdf, 0x41, 0x8a, 0x6c, 0x98, 0xe5, 0xeb, 0x09, 0xd9, 0xaf, 0x19,
	0xee, 0x3e, 0x36, 0x05, 0x71, 0xd6, 0xb3, 0xfc, 0xc4, 0x5b, 0x94, 0x88, 0x57, 0x12, 0xf6, 0x68,
	0x48, 0x16, 0xbc, 0x7d, 0x40, 0xde, 0xfa, 0x75, 0xb7, 0x5c, 0xb5, 0x1a, 0x09, 0x69, 0xf3, 0x9c,
	0xf6, 0x0b, 0x74, 0x39, 0xa0, 0x19, 0xbe, 0xb5, 0x0e, 0xd8, 0x9f, 0x60, 0xfc, 0xa1, 0x8b, 0x0d,
	0x86, 0xb9, 0x01, 0x9f, 0xc2, 0xff, 0x8d, 0x52, 0xc6, 0xc2, 0x51, 0xf5, 0x26, 0x37, 0x7c, 0x55,
	0x1d, 0x98, 0xb6, 0x82, 0x92, 0x43, 0x7f, 0x86, 0xd1, 0x2d, 0xec, 0xbb, 0x86, 0xce, 0x05, 0xfe,
	0x9b, 0x9b, 0x36, 0xb3, 0x58, 0xf3, 0xb7, 0x66, 0x17, 0xeb, 0x8b, 0xdc, 0xfa, 0x3c, 0xba, 0x3a,
	0xc8, 0xba, 0xfe, 0xd6, 0x32, 0x8f, 0xd0, 0xff, 0x14, 0x18, 0x7f, 0xe6, 0x98, 0xf2, 0xde, 0x57,
	0xb9, 0xfd, 0x52, 0xe6, 0xe6, 0x60, 0xfb, 0x7e, 0x75, 0x5a, 0xe6, 0x51, 0x41, 0xc9, 0x3d, 0x5f,
	0x8a, 0xbb, 0x02, 0xd9, 0x30, 0xfe, 0x1b, 0x7c, 0x80, 0x03, 0xcf, 0x7a, 0x47, 0x3f, 0xa7, 0xf9,
	0xfb, 0x4e, 0x0b, 0xf6, 0x9d, 0xb6, 0xe9, 0xed, 0xbb, 0x20, 0x15, 0x39, 0xc9, 0x54, 0x30, 0x98,
	0x88, 0xf0, 0x68, 0x02, 0xe0, 0x32, 0x07, 0x2e, 0xe4, 0xe6, 0x07, 0x02, 0x4d, 0x0e, 0xf2, 0xa2,
	0x64, 0x30, 0xb6, 0xc3, 0x88, 0x93, 0x34, 0xc6, 0x35, 0x8e, 0xd4, 0xd5, 0x9c, 0x54, 0x8c, 0x3a,
	0x65, 0xc4, 0xf1, 0x73, 0x0b, 0x21, 0xb5, 0xdf, 0xc6, 0xef, 0x0e, 0x5d, 0xe2, 0xd0, 0x9c, 0x3a,
	0x38, 0xb1, 0x01, 0xaf, 0x06, 0x13, 0x45, 0x4c, 0x99, 0xe1, 0xc6, 0x29, 0xe5, 0x3b, 0x1c, 0xb3,
	0xac, 0x2e, 0xca, 0xc5, 0xe6, 0xfa, 0x00, 0x0f, 0xf7, 0x1a, 0x26, 0xc4, 0xde, 0x1f, 0x36, 0xaf,
	0x92, 0x6c, 0xd1, 0x1b, 0x3c, 0xb0, 0x17, 0x27, 0x71, 0x3f, 0x17, 0xd8, 0xf5, 0x69, 0xa8, 0x09,
	0x93, 0x41, 0x77, 0x4d, 0x4a, 0xbe, 0xc5, 0xc9, 0x4b, 0xaa, 0x26, 0x47, 0x0e, 0x9a, 0x2f, 0x3a,
	0x82, 0xe9, 0x67, 0xf6, 0xb0, 0x70, 0xf1, 0xac, 0x73, 0x4b, 0x72, 0xf0, 0xba, 0x1d, 0xe2, 0x0f,
	0x61, 0x26, 0xe8, 0x90, 0x3b, 0xcc, 0x60, 0x75, 0x8a, 0xfb, 0x6d, 0x5d, 0xe4, 0xdd, 0xf1, 0xe7,
	0x85, 0x9d, 0x5e, 0x04, 0x8e, 0x34, 0xd9, 0x3d, 0x24, 0x28, 0x7f, 0x57, 0x20, 0x1d, 0x1e, 0x1c,
	0x12, 0xec, 0x4b, 0x6d, 0x27, 0x4d, 0xb0, 0x60, 0x68, 0x37, 0x9a, 0x90, 0x8e, 0x9c, 0x3f, 0xbe,
	0xd9, 0x3e, 0x5e, 0x4c, 0x87, 0x1b, 0xcc, 0x9f, 0xaa, 0xfe, 0x8a, 0x73, 0x57, 0xd4, 0x98, 0x5c,
	0x6f, 0x9f, 0xd5, 0x61, 0x3a, 0xc8, 0xfd, 0x43, 0x62, 0xe2, 0x22, 0xde, 0xed, 0x03, 0x4e, 0x7b,
	0x77, 0xc4, 0x34, 0xec, 0x62, 0xbb, 0x8c, 0x83, 0x62, 0x47, 0x92, 0xc5, 0xee, 0x29, 0x20, 0x17,
	0xef, 0xa2, 0xff, 0x28, 0x80, 0x22, 0x21, 0x07, 0xe8, 0x8b, 0x1d, 0x80, 0x68, 0x33, 0xeb, 0x82,
	0xff, 0x1d, 0xc7, 0x6f, 0xa9, 0x1b, 0x21, 0x1e, 0x73, 0x9f, 0xb5, 0xc0, 0x0b, 0x71, 0xd9, 0xe1,
	0x8c, 0x18, 0x8f, 0xf8, 0x54, 0x50, 0x72, 0xcb, 0xdf, 0x21, 0x80, 0x6d, 0x52, 0x0a, 0xc4, 0xd5,
	0x4b, 0x18, 0xf5, 0x1e, 0xf6, 0x36, 0x29, 0xf5, 0xee, 0xb0, 0xb3, 0x41, 0x49, 0x78, 0xb3, 0xc2,
	0x4a, 0xb8, 0xc6, 0xfd, 0xca, 0xa2, 0x9f, 0xf7, 0x4e, 0xcb, 0x9e, 0x67, 0xb5, 0xea, 0xcb, 0x9c,
	0x96, 0xac, 0xe2, 0xac, 0xee, 0x32, 0x47, 0x92, 0xd4, 0x29, 0xa9, 0x38, 0x09, 0xc3, 0x4c, 0x54,
	0x50, 0xc5, 0xe6, 0x5c, 0xe5, 0x9c, 0xcb, 0xe8, 0x52, 0x4f, 0x31, 0xc5, 0x31, 0x3b, 0x30, 0xe6,
	0x3f, 0xd7, 0x6d, 0x52, 0x42, 0x7c, 0xab, 0x6e, 0x93, 0x52, 0xd4, 0xfa, 0x29, 0x31, 0xa6, 0xde,
	0xe0, 0x06, 0xaf, 0xa8, 0x03, 0x52, 0xe4, 0x15, 0xe9, 0x1f, 0x60, 0x64, 0x0b, 0x7b, 0xee, 0xf4,
	0xa9, 0xcd, 0xd0, 0xae, 0x10, 0x67, 0xe8, 0x4a, 0x7f, 0xbb, 0xbe, 0x62, 0xf8, 0x97, 0x02, 0x63,
	0xbe, 0x78, 0x1a, 0xe8, 0xef, 0x4b, 0x6e, 0xf7, 0x79, 0x66, 0x7e, 0x90, 0x5d, 0x4f, 0xad, 0x0b,
	0xc9, 0xb4, 0x10, 0x67, 0x36, 0xda, 0x83, 0x31, 0x5f, 0xbe, 0xf4, 0x8f, 0xb4, 0x57, 0x03, 0x16,
	0x81, 0xe7, 0xa4, 0x02, 0x77, 0x00, 0x42, 0x56, 0x12, 0xa1, 0x24, 0x04, 0x44, 0x3f, 0x65, 0xc6,
	0x61, 0x2d, 0x99, 0xe4, 0xc0, 0x29, 0x4f, 0xb0, 0x24, 0x8b, 0x6d, 0x85, 0xe3, 0x16, 0xd5, 0xeb,
	0x12, 0xb1, 0x85, 0x92, 0x65, 0x0f, 0x46, 0x05, 0x31, 0xbe, 0x40, 0xd2, 0x38, 0xf0, 0xba, 0x3a,
	0x28, 0x99, 0x01, 0xab, 0x02, 0x20, 0xe4, 0x91, 0x64, 0x99, 0x06, 0x67, 0xf5, 0x4d, 0x99, 0x88,
	0x22, 0xc2, 0x08, 0xc3, 0x58, 0x11, 0xd3, 0x7a, 0x0d, 0x4b, 0x72, 0x24, 0xe4, 0x65, 0x1b, 0xa7,
	0x5e, 0xe3, 0x4f, 0x8b, 0x02, 0x88, 0x56, 0x31, 0xdc, 0x03, 0x93, 0x0a, 0x2f, 0xd0, 0x5e, 0xd4,
	0x4f, 0x22, 0x71, 0x3f, 0x07, 0x34, 0xd0, 0x5d, 0x75, 0x18, 0x0f, 0xda, 0x6f, 0x32, 0xea, 0x2a,
	0xa7, 0x6a, 0xea, 0x82, 0x0c, 0x35, 0x14, 0x3d, 0x4d, 0x98, 0x6c, 0x69, 0xae, 0x64, 0x60, 0x51,
	0x42, 0x39, 0x4d, 0x06, 0x1c, 0xd1, 0x5b, 0x0c, 0xa6, 0xfc, 0x76, 0x9a, 0x50, 0x6d, 0x89, 0x80,
	0xd1, 0x82, 0xdc, 0x66, 0x14, 0x8c, 0xf7, 0x30, 0x2d, 0x0e, 0x15, 0x09, 0xec, 0x85, 0xc8, 0x19,
	0xd4, 0x21, 0xb3, 0x92, 0xf1, 0x29, 0x4c, 0x87, 0x27, 0xd3, 0x40, 0x89, 0x35, 0x29, 0xb6, 0x8f,
	0x10, 0x58, 0xb7, 0x39, 0x31, 0xaf, 0xc6, 0x22, 0x7a, 0xdb, 0xe8, 0x15, 0x4c, 0xfa, 0xa9, 0x4e,
	0x24, 0xae, 0x44, 0x3d, 0x23, 0xa9, 0x7a, 0x0e, 0xa4, 0xd5, 0xbf, 0x15, 0x98, 0x09, 0x03, 0x4d,
	0x2c, 0xac, 0x1e, 0x71, 0xf4, 0xa6, 0xfa, 0x40, 0x56, 0x58, 0xf9, 0x8e, 0x74, 0x97, 0x55, 0x5f,
	0x9e, 0x83, 0xf4, 0x66, 0xf8, 0x61, 0x2b, 0x50, 0x57, 0x75, 0xbf, 0x20, 0x5a, 0x37, 0x7a, 0x77,
	0xe9, 0xb0, 0x1c, 0x22, 0x93, 0xc3, 0x72, 0x90, 0xf8, 0x5e, 0x82, 0x23, 0x8c, 0x23, 0x38, 0xdf,
	0x2e, 0xb9, 0xa2, 0x0e, 0x74, 0x57, 0x44, 0xf1, 0xf0, 0x9d, 0x02, 0x2c, 0x8a, 0x7f, 0x03, 0x67,
	0xa3, 0x3a, 0x6c, 0x48, 0xf8, 0x02, 0x87, 0x5f, 0x43, 0xbf, 0xec, 0xa9, 0xca, 0xa2, 0x6c, 0x12,
	0x54, 0x46, 0xcb, 0x14, 0x3a, 0xef, 0x99, 0x6f, 0x5d, 0x47, 0xc9, 0x53, 0xed, 0xb7, 0x64, 0x3e,
	0x1a, 0x44, 0x68, 0xfe, 0x47, 0x03, 0xaf, 0xfc, 0x23, 0xb4, 0xde, 0xe5, 0x7f, 0x1c, 0x26, 0xbe,
	0xc4, 0xa0, 0x9c, 0x14, 0xcc, 0x17, 0x35, 0xdf, 0x28, 0x30, 0xe3, 0xab, 0xb9, 0x64, 0x01, 0xbe,
	0xe3, 0xcc, 0x46, 0x66, 0x4d, 0x92, 0x19, 0xf9, 0x58, 0x2b, 0x04, 0x5f, 0x21, 0xf9, 0x5a, 0xef,
	0x35, 0xd8, 0x97, 0x64, 0x52, 0xf9, 0x1a, 0xf4, 0x05, 0x2b, 0x4e, 0xde, 0xde, 0x43, 0xfa, 0x38,
	0x39, 0x89, 0x26, 0x14, 0x5d, 0x32, 0xb7, 0x20, 0x87, 0x6e, 0x49, 0xc3, 0xf7, 0x30, 0xe5, 0x09,
	0xb5, 0xa1, 0xe2, 0x2e, 0x70, 0xf8, 0xaa, 0xaa, 0xcb, 0xc7, 0x1d, 0x8a, 0xb7, 0x43, 0x98, 0x6e,
	0xe7, 0xc7, 0xd7, 0x8b, 0x12, 0x32, 0x2b, 0x8a, 0x0f, 0xc8, 0xef, 0x20, 0x2d, 0x64, 0x63, 0xa2,
	0x4d, 0x72, 0x9f, 0x53, 0x6f, 0xab, 0xcb, 0x31, 0x82, 0x8e, 0x68, 0xc9, 0x37, 0x30, 0xe3, 0x6b,
	0xc9, 0x44, 0xf0, 0x7b, 0x1c, 0x7e, 0x4b, 0xcd, 0xc7, 0x83, 0x0b, 0x81, 0xf9, 0x57, 0x05, 0xd2,
	0xa2, 0x09, 0xfe, 0x24, 0xcf, 0x3d, 0x4e, 0x0a, 0x02, 0xbd, 0xe9, 0xf9, 0x20, 0x04, 0xe7, 0x67,
	0xf7, 0x21, 0x90, 0x9f, 0x7f, 0x53, 0x00, 0x05, 0x67, 0xd1, 0x50, 0x4e, 0xdc, 0xe5, 0x4e, 0xac,
	0xa9, 0x2b, 0x31, 0x9c, 0x08, 0x25, 0xe1, 0x3f, 0x14, 0x98, 0x6d, 0xc9, 0xd1, 0xa1, 0xfc, 0x10,
	0x35, 0x99, 0x5b, 0x8b, 0xe1, 0x47, 0x44, 0x9c, 0xfe, 0x57, 0x81, 0xcc, 0x4e, 0xfb, 0x86, 0xf8,
	0x3d, 0xb6, 0x29, 0x71, 0x4b, 0xc4, 0x70, 0x93, 0x7c, 0x97, 0xdc, 0xe2, 0xfe, 0xac, 0xab, 0xf7,
	0x62, 0xf8, 0xc3, 0x5a, 0x44, 0x3d, 0xdc, 0x2d, 0x1f, 0x15, 0x38, 0xdf, 0xde, 0x26, 0x86, 0x73,
	0xec, 0x21, 0x77, 0xec, 0x7e, 0xee, 0x6e, 0x62, 0xc7, 0x88, 0x83, 0x3e, 0x28, 0x70, 0xa6, 0xed,
	0x88, 0x4d, 0xa8, 0xe9, 0x45, 0xf5, 0xa0, 0x95, 0x58, 0xed, 0x53, 0xa0, 0x3e, 0x29, 0x30, 0xd7,
	0xae, 0x50, 0x24, 0xbc, 0x50, 0x3b, 0x75, 0x4d, 0x87, 0xd2, 0x1f, 0xca, 0xab, 0x7f, 0x2a, 0x30,
	0x77, 0x5c, 0xee, 0x0c, 0x14, 0xfe, 0xb3, 0xed, 0x4d, 0x4e, 0xe8, 0xff, 0x5f, 0x73, 0x3f, 0xee,
	0xa8, 0x49, 0xfc, 0xf0, 0x4a, 0xe7, 0x2f, 0x30, 0xdb, 0xf6, 0x90, 0x12, 0xbd, 0x0d, 0x88, 0x2e,
	0x83, 0xe2, 0x74, 0x99, 0xe0, 0xa5, 0xe0, 0x0b, 0x05, 0xce, 0x1e, 0xcf, 0x45, 0xe2, 0x77, 0x83,
	0x22, 0x77, 0xe4, 0xb1, 0xba, 0x25, 0xfb, 0x6e, 0xd0, 0x2e, 0x7c, 0xba, 0xbd, 0x22, 0x6c, 0x7c,
	0x9d, 0xfa, 0xb8, 0xfe, 0x55, 0x0a, 0x55, 0x60, 0xe2, 0xa9, 0xf8, 0xdd, 0x3e, 0x4b, 0xcd, 0x7d,
	0xf5, 0x49, 0xfb, 0x35, 0xba, 0x51, 0x65, 0xcc, 0xa1, 0x05, 0x5d, 0xaf, 0x58, 0xac, 0x5a, 0x2f,
	0x69, 0x65, 0x52, 0x0b, 0x7f, 0xe8, 0x0f, 0xff, 0x59, 0xa4, 0xe6, 0x3e, 0xcd, 0xcc, 0x96, 0x89,
	0xcd, 0x8c, 0x32, 0x7b, 0x10, 0x0c, 0x7b, 0x93, 0x97, 0x47, 0xf2, 0x5a, 0x7e, 0x55, 0x5b, 0xcd,
	0x9d, 0x54, 0x52, 0x27, 0x4e, 0x2e, 0xcf, 0x18, 0x8e, 0x73, 0x60, 0x95, 0xf9, 0xef, 0xf6, 0xfa,
	0x1e, 0x25, 0x76, 0xa1, 0x63, 0xa4, 0x58, 0x80, 0x13, 0xab, 0x4b, 0x2b, 0x68, 0x05, 0xf2, 0x7f,
	0x24, 0xf5, 0xac, 0x49, 0xec, 0x79, 0x96, 0xad, 0x1a, 0x0d, 0x9c, 0x75, 0xb0, 0x5b, 0xb3, 0x28,
	0xb5, 0x88, 0x9d, 0x65, 0x24, 0x6b, 0x94, 0xcb, 0x98, 0xd2, 0x2c, 0xab, 0xe2, 0xac, 0x8b, 0x29,
	0xa9, 0xbb, 0x65, 0xac, 0x15, 0x6f, 0x78, 0x6b, 0x57, 0x91, 0x0a, 0xe7, 0x8a, 0x62, 0x2c, 0x6b,
	0x12, 0x4c, 0xb3, 0x36, 0x61, 0x59, 0x7c, 0x68, 0x51, 0xa6, 0xa1, 0x11, 0x38, 0xf9, 0xff, 0x94,
	0x72, 0xea, 0xf9, 0x65, 0xb8, 0x04, 0x23, 0xeb, 0x8e, 0xf5, 0x08, 0x37, 0xd1, 0xe9, 0xd1, 0x54,
	0x66, 0x72, 0xbd, 0xce, 0xaa, 0xc4, 0xb5, 0xde, 0x70, 0x57, 0xb2, 0xa9, 0xd2, 0x04, 0x40, 0x38,
	0xe1, 0x67, 0xa5, 0x11, 0xde, 0x4c, 0x56, 0x7e, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xdb, 0x60,
	0xd1, 0xea, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BuildServiceClient is the client API for BuildService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BuildServiceClient interface {
	// List builds
	ListBuilds(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// List bookmarked builds
	ListBookmarkedBuilds(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// List archived builds
	ListArchivedBuilds(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	// Create new build
	CreateBuild(ctx context.Context, in *BuildBodyRequest, opts ...grpc.CallOption) (*Build, error)
	// Get build
	GetBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Build, error)
	// Update build
	UpdateBuild(ctx context.Context, in *BuildBodyRequest, opts ...grpc.CallOption) (*Build, error)
	// Delete build
	DeleteBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete builds
	DeleteBuilds(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop build
	StopBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop builds
	StopBuilds(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart build
	RestartBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Build, error)
	// Archive build
	ArchiveBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore build
	RestoreBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark build
	BookmarkBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark build
	UnBookmarkBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get build status
	GetBuildStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// List build statuses
	ListBuildStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListBuildStatusesResponse, error)
	// Create new build status
	CreateBuildStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*BuildStatus, error)
	// Get build code ref
	GetBuildCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error)
	// Create build code ref
	CreateBuildCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
}

type buildServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuildServiceClient(cc *grpc.ClientConn) BuildServiceClient {
	return &buildServiceClient{cc}
}

func (c *buildServiceClient) ListBuilds(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildService/ListBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ListBookmarkedBuilds(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildService/ListBookmarkedBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ListArchivedBuilds(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildService/ListArchivedBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreateBuild(ctx context.Context, in *BuildBodyRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/v1.BuildService/CreateBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) GetBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/v1.BuildService/GetBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) UpdateBuild(ctx context.Context, in *BuildBodyRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/v1.BuildService/UpdateBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) DeleteBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/DeleteBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) DeleteBuilds(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/DeleteBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) StopBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/StopBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) StopBuilds(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/StopBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) RestartBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/v1.BuildService/RestartBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ArchiveBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/ArchiveBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) RestoreBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/RestoreBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) BookmarkBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/BookmarkBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) UnBookmarkBuild(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.BuildService/UnBookmarkBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) GetBuildStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildService/GetBuildStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) ListBuildStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListBuildStatusesResponse, error) {
	out := new(ListBuildStatusesResponse)
	err := c.cc.Invoke(ctx, "/v1.BuildService/ListBuildStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreateBuildStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*BuildStatus, error) {
	out := new(BuildStatus)
	err := c.cc.Invoke(ctx, "/v1.BuildService/CreateBuildStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) GetBuildCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.BuildService/GetBuildCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildServiceClient) CreateBuildCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.BuildService/CreateBuildCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildServiceServer is the server API for BuildService service.
type BuildServiceServer interface {
	// List builds
	ListBuilds(context.Context, *ProjectBodyRequest) (*ListBuildsResponse, error)
	// List bookmarked builds
	ListBookmarkedBuilds(context.Context, *OwnerBodyRequest) (*ListBuildsResponse, error)
	// List archived builds
	ListArchivedBuilds(context.Context, *OwnerBodyRequest) (*ListBuildsResponse, error)
	// Create new build
	CreateBuild(context.Context, *BuildBodyRequest) (*Build, error)
	// Get build
	GetBuild(context.Context, *OwnedEntityIdRequest) (*Build, error)
	// Update build
	UpdateBuild(context.Context, *BuildBodyRequest) (*Build, error)
	// Delete build
	DeleteBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Delete builds
	DeleteBuilds(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop build
	StopBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop builds
	StopBuilds(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restart build
	RestartBuild(context.Context, *OwnedEntityIdRequest) (*Build, error)
	// Archive build
	ArchiveBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Restore build
	RestoreBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Bookmark build
	BookmarkBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// UnBookmark build
	UnBookmarkBuild(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Get build status
	GetBuildStatuses(context.Context, *OwnedEntityIdRequest) (*StatusResponse, error)
	// List build statuses
	ListBuildStatuses(context.Context, *OwnedEntityIdRequest) (*ListBuildStatusesResponse, error)
	// Create new build status
	CreateBuildStatus(context.Context, *OwnedEntityIdRequest) (*BuildStatus, error)
	// Get build code ref
	GetBuildCodeRef(context.Context, *OwnedEntityIdRequest) (*CodeReference, error)
	// Create build code ref
	CreateBuildCodeRef(context.Context, *CodeReferenceBodyRequest) (*CodeReference, error)
}

// UnimplementedBuildServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBuildServiceServer struct {
}

func (*UnimplementedBuildServiceServer) ListBuilds(ctx context.Context, req *ProjectBodyRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuilds not implemented")
}
func (*UnimplementedBuildServiceServer) ListBookmarkedBuilds(ctx context.Context, req *OwnerBodyRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedBuilds not implemented")
}
func (*UnimplementedBuildServiceServer) ListArchivedBuilds(ctx context.Context, req *OwnerBodyRequest) (*ListBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedBuilds not implemented")
}
func (*UnimplementedBuildServiceServer) CreateBuild(ctx context.Context, req *BuildBodyRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuild not implemented")
}
func (*UnimplementedBuildServiceServer) GetBuild(ctx context.Context, req *OwnedEntityIdRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuild not implemented")
}
func (*UnimplementedBuildServiceServer) UpdateBuild(ctx context.Context, req *BuildBodyRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuild not implemented")
}
func (*UnimplementedBuildServiceServer) DeleteBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuild not implemented")
}
func (*UnimplementedBuildServiceServer) DeleteBuilds(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuilds not implemented")
}
func (*UnimplementedBuildServiceServer) StopBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBuild not implemented")
}
func (*UnimplementedBuildServiceServer) StopBuilds(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBuilds not implemented")
}
func (*UnimplementedBuildServiceServer) RestartBuild(ctx context.Context, req *OwnedEntityIdRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartBuild not implemented")
}
func (*UnimplementedBuildServiceServer) ArchiveBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveBuild not implemented")
}
func (*UnimplementedBuildServiceServer) RestoreBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBuild not implemented")
}
func (*UnimplementedBuildServiceServer) BookmarkBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkBuild not implemented")
}
func (*UnimplementedBuildServiceServer) UnBookmarkBuild(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkBuild not implemented")
}
func (*UnimplementedBuildServiceServer) GetBuildStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildStatuses not implemented")
}
func (*UnimplementedBuildServiceServer) ListBuildStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*ListBuildStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuildStatuses not implemented")
}
func (*UnimplementedBuildServiceServer) CreateBuildStatus(ctx context.Context, req *OwnedEntityIdRequest) (*BuildStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildStatus not implemented")
}
func (*UnimplementedBuildServiceServer) GetBuildCodeRef(ctx context.Context, req *OwnedEntityIdRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuildCodeRef not implemented")
}
func (*UnimplementedBuildServiceServer) CreateBuildCodeRef(ctx context.Context, req *CodeReferenceBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuildCodeRef not implemented")
}

func RegisterBuildServiceServer(s *grpc.Server, srv BuildServiceServer) {
	s.RegisterService(&_BuildService_serviceDesc, srv)
}

func _BuildService_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListBuilds(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ListBookmarkedBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListBookmarkedBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/ListBookmarkedBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListBookmarkedBuilds(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ListArchivedBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListArchivedBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/ListArchivedBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListArchivedBuilds(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/CreateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreateBuild(ctx, req.(*BuildBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/GetBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_UpdateBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).UpdateBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/UpdateBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).UpdateBuild(ctx, req.(*BuildBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_DeleteBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).DeleteBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/DeleteBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).DeleteBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_DeleteBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).DeleteBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/DeleteBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).DeleteBuilds(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_StopBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).StopBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/StopBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).StopBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_StopBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).StopBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/StopBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).StopBuilds(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_RestartBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).RestartBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/RestartBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).RestartBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ArchiveBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ArchiveBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/ArchiveBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ArchiveBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_RestoreBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).RestoreBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/RestoreBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).RestoreBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_BookmarkBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).BookmarkBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/BookmarkBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).BookmarkBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_UnBookmarkBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).UnBookmarkBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/UnBookmarkBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).UnBookmarkBuild(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_GetBuildStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetBuildStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/GetBuildStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetBuildStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_ListBuildStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).ListBuildStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/ListBuildStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).ListBuildStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreateBuildStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreateBuildStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/CreateBuildStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreateBuildStatus(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_GetBuildCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).GetBuildCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/GetBuildCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).GetBuildCodeRef(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildService_CreateBuildCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReferenceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildServiceServer).CreateBuildCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BuildService/CreateBuildCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildServiceServer).CreateBuildCodeRef(ctx, req.(*CodeReferenceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BuildService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BuildService",
	HandlerType: (*BuildServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuilds",
			Handler:    _BuildService_ListBuilds_Handler,
		},
		{
			MethodName: "ListBookmarkedBuilds",
			Handler:    _BuildService_ListBookmarkedBuilds_Handler,
		},
		{
			MethodName: "ListArchivedBuilds",
			Handler:    _BuildService_ListArchivedBuilds_Handler,
		},
		{
			MethodName: "CreateBuild",
			Handler:    _BuildService_CreateBuild_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _BuildService_GetBuild_Handler,
		},
		{
			MethodName: "UpdateBuild",
			Handler:    _BuildService_UpdateBuild_Handler,
		},
		{
			MethodName: "DeleteBuild",
			Handler:    _BuildService_DeleteBuild_Handler,
		},
		{
			MethodName: "DeleteBuilds",
			Handler:    _BuildService_DeleteBuilds_Handler,
		},
		{
			MethodName: "StopBuild",
			Handler:    _BuildService_StopBuild_Handler,
		},
		{
			MethodName: "StopBuilds",
			Handler:    _BuildService_StopBuilds_Handler,
		},
		{
			MethodName: "RestartBuild",
			Handler:    _BuildService_RestartBuild_Handler,
		},
		{
			MethodName: "ArchiveBuild",
			Handler:    _BuildService_ArchiveBuild_Handler,
		},
		{
			MethodName: "RestoreBuild",
			Handler:    _BuildService_RestoreBuild_Handler,
		},
		{
			MethodName: "BookmarkBuild",
			Handler:    _BuildService_BookmarkBuild_Handler,
		},
		{
			MethodName: "UnBookmarkBuild",
			Handler:    _BuildService_UnBookmarkBuild_Handler,
		},
		{
			MethodName: "GetBuildStatuses",
			Handler:    _BuildService_GetBuildStatuses_Handler,
		},
		{
			MethodName: "ListBuildStatuses",
			Handler:    _BuildService_ListBuildStatuses_Handler,
		},
		{
			MethodName: "CreateBuildStatus",
			Handler:    _BuildService_CreateBuildStatus_Handler,
		},
		{
			MethodName: "GetBuildCodeRef",
			Handler:    _BuildService_GetBuildCodeRef_Handler,
		},
		{
			MethodName: "CreateBuildCodeRef",
			Handler:    _BuildService_CreateBuildCodeRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobServiceClient interface {
	// List jobs
	ListJobs(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// List bookmarked jobs
	ListBookmarkedJobs(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// List archived jobs
	ListArchivedJobs(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error)
	// Create new job
	CreateJob(ctx context.Context, in *JobBodyRequest, opts ...grpc.CallOption) (*Job, error)
	// Get job
	GetJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error)
	// Update job
	UpdateJob(ctx context.Context, in *JobBodyRequest, opts ...grpc.CallOption) (*Job, error)
	// Delete job
	DeleteJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete jobs
	DeleteJobs(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop job
	StopJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop jobs
	StopJobs(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart job
	RestartJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error)
	// Resume job
	ResumeJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error)
	// Archive job
	ArchiveJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore job
	RestoreJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark job
	BookmarkJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark job
	UnBookmarkJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get job status
	GetJobStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// List job statuses
	ListJobStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListJobStatusesResponse, error)
	// Create new job status
	CreateJobStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*JobStatus, error)
	// Get job code ref
	GetJobCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error)
	// Get job code ref
	CreateJobCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
}

type jobServiceClient struct {
	cc *grpc.ClientConn
}

func NewJobServiceClient(cc *grpc.ClientConn) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) ListJobs(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/v1.JobService/ListJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListBookmarkedJobs(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/v1.JobService/ListBookmarkedJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListArchivedJobs(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListJobsResponse, error) {
	out := new(ListJobsResponse)
	err := c.cc.Invoke(ctx, "/v1.JobService/ListArchivedJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CreateJob(ctx context.Context, in *JobBodyRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/v1.JobService/CreateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/v1.JobService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) UpdateJob(ctx context.Context, in *JobBodyRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/v1.JobService/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/DeleteJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) DeleteJobs(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/DeleteJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StopJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/StopJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) StopJobs(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/StopJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RestartJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/v1.JobService/RestartJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ResumeJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/v1.JobService/ResumeJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ArchiveJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/ArchiveJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) RestoreJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/RestoreJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) BookmarkJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/BookmarkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) UnBookmarkJob(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.JobService/UnBookmarkJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.JobService/GetJobStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) ListJobStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListJobStatusesResponse, error) {
	out := new(ListJobStatusesResponse)
	err := c.cc.Invoke(ctx, "/v1.JobService/ListJobStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CreateJobStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*JobStatus, error) {
	out := new(JobStatus)
	err := c.cc.Invoke(ctx, "/v1.JobService/CreateJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) GetJobCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.JobService/GetJobCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) CreateJobCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.JobService/CreateJobCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServiceServer is the server API for JobService service.
type JobServiceServer interface {
	// List jobs
	ListJobs(context.Context, *ProjectBodyRequest) (*ListJobsResponse, error)
	// List bookmarked jobs
	ListBookmarkedJobs(context.Context, *OwnerBodyRequest) (*ListJobsResponse, error)
	// List archived jobs
	ListArchivedJobs(context.Context, *OwnerBodyRequest) (*ListJobsResponse, error)
	// Create new job
	CreateJob(context.Context, *JobBodyRequest) (*Job, error)
	// Get job
	GetJob(context.Context, *OwnedEntityIdRequest) (*Job, error)
	// Update job
	UpdateJob(context.Context, *JobBodyRequest) (*Job, error)
	// Delete job
	DeleteJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Delete jobs
	DeleteJobs(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop job
	StopJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop jobs
	StopJobs(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restart job
	RestartJob(context.Context, *OwnedEntityIdRequest) (*Job, error)
	// Resume job
	ResumeJob(context.Context, *OwnedEntityIdRequest) (*Job, error)
	// Archive job
	ArchiveJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Restore job
	RestoreJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Bookmark job
	BookmarkJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// UnBookmark job
	UnBookmarkJob(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Get job status
	GetJobStatuses(context.Context, *OwnedEntityIdRequest) (*StatusResponse, error)
	// List job statuses
	ListJobStatuses(context.Context, *OwnedEntityIdRequest) (*ListJobStatusesResponse, error)
	// Create new job status
	CreateJobStatus(context.Context, *OwnedEntityIdRequest) (*JobStatus, error)
	// Get job code ref
	GetJobCodeRef(context.Context, *OwnedEntityIdRequest) (*CodeReference, error)
	// Get job code ref
	CreateJobCodeRef(context.Context, *CodeReferenceBodyRequest) (*CodeReference, error)
}

// UnimplementedJobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (*UnimplementedJobServiceServer) ListJobs(ctx context.Context, req *ProjectBodyRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobs not implemented")
}
func (*UnimplementedJobServiceServer) ListBookmarkedJobs(ctx context.Context, req *OwnerBodyRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedJobs not implemented")
}
func (*UnimplementedJobServiceServer) ListArchivedJobs(ctx context.Context, req *OwnerBodyRequest) (*ListJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedJobs not implemented")
}
func (*UnimplementedJobServiceServer) CreateJob(ctx context.Context, req *JobBodyRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJob not implemented")
}
func (*UnimplementedJobServiceServer) GetJob(ctx context.Context, req *OwnedEntityIdRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (*UnimplementedJobServiceServer) UpdateJob(ctx context.Context, req *JobBodyRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedJobServiceServer) DeleteJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJob not implemented")
}
func (*UnimplementedJobServiceServer) DeleteJobs(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobs not implemented")
}
func (*UnimplementedJobServiceServer) StopJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJob not implemented")
}
func (*UnimplementedJobServiceServer) StopJobs(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopJobs not implemented")
}
func (*UnimplementedJobServiceServer) RestartJob(ctx context.Context, req *OwnedEntityIdRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartJob not implemented")
}
func (*UnimplementedJobServiceServer) ResumeJob(ctx context.Context, req *OwnedEntityIdRequest) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeJob not implemented")
}
func (*UnimplementedJobServiceServer) ArchiveJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveJob not implemented")
}
func (*UnimplementedJobServiceServer) RestoreJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreJob not implemented")
}
func (*UnimplementedJobServiceServer) BookmarkJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkJob not implemented")
}
func (*UnimplementedJobServiceServer) UnBookmarkJob(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkJob not implemented")
}
func (*UnimplementedJobServiceServer) GetJobStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatuses not implemented")
}
func (*UnimplementedJobServiceServer) ListJobStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*ListJobStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJobStatuses not implemented")
}
func (*UnimplementedJobServiceServer) CreateJobStatus(ctx context.Context, req *OwnedEntityIdRequest) (*JobStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobStatus not implemented")
}
func (*UnimplementedJobServiceServer) GetJobCodeRef(ctx context.Context, req *OwnedEntityIdRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobCodeRef not implemented")
}
func (*UnimplementedJobServiceServer) CreateJobCodeRef(ctx context.Context, req *CodeReferenceBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobCodeRef not implemented")
}

func RegisterJobServiceServer(s *grpc.Server, srv JobServiceServer) {
	s.RegisterService(&_JobService_serviceDesc, srv)
}

func _JobService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobs(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListBookmarkedJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListBookmarkedJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ListBookmarkedJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListBookmarkedJobs(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListArchivedJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListArchivedJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ListArchivedJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListArchivedJobs(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJob(ctx, req.(*JobBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).UpdateJob(ctx, req.(*JobBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/DeleteJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_DeleteJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).DeleteJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/DeleteJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).DeleteJobs(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StopJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StopJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/StopJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StopJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_StopJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).StopJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/StopJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).StopJobs(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RestartJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RestartJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/RestartJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RestartJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ResumeJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ResumeJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ResumeJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ResumeJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ArchiveJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ArchiveJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ArchiveJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ArchiveJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_RestoreJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).RestoreJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/RestoreJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).RestoreJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_BookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).BookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/BookmarkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).BookmarkJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_UnBookmarkJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).UnBookmarkJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/UnBookmarkJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).UnBookmarkJob(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/GetJobStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_ListJobStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ListJobStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/ListJobStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ListJobStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CreateJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/CreateJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJobStatus(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_GetJobCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).GetJobCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/GetJobCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).GetJobCodeRef(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_CreateJobCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReferenceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).CreateJobCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.JobService/CreateJobCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).CreateJobCodeRef(ctx, req.(*CodeReferenceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListJobs",
			Handler:    _JobService_ListJobs_Handler,
		},
		{
			MethodName: "ListBookmarkedJobs",
			Handler:    _JobService_ListBookmarkedJobs_Handler,
		},
		{
			MethodName: "ListArchivedJobs",
			Handler:    _JobService_ListArchivedJobs_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _JobService_CreateJob_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _JobService_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _JobService_UpdateJob_Handler,
		},
		{
			MethodName: "DeleteJob",
			Handler:    _JobService_DeleteJob_Handler,
		},
		{
			MethodName: "DeleteJobs",
			Handler:    _JobService_DeleteJobs_Handler,
		},
		{
			MethodName: "StopJob",
			Handler:    _JobService_StopJob_Handler,
		},
		{
			MethodName: "StopJobs",
			Handler:    _JobService_StopJobs_Handler,
		},
		{
			MethodName: "RestartJob",
			Handler:    _JobService_RestartJob_Handler,
		},
		{
			MethodName: "ResumeJob",
			Handler:    _JobService_ResumeJob_Handler,
		},
		{
			MethodName: "ArchiveJob",
			Handler:    _JobService_ArchiveJob_Handler,
		},
		{
			MethodName: "RestoreJob",
			Handler:    _JobService_RestoreJob_Handler,
		},
		{
			MethodName: "BookmarkJob",
			Handler:    _JobService_BookmarkJob_Handler,
		},
		{
			MethodName: "UnBookmarkJob",
			Handler:    _JobService_UnBookmarkJob_Handler,
		},
		{
			MethodName: "GetJobStatuses",
			Handler:    _JobService_GetJobStatuses_Handler,
		},
		{
			MethodName: "ListJobStatuses",
			Handler:    _JobService_ListJobStatuses_Handler,
		},
		{
			MethodName: "CreateJobStatus",
			Handler:    _JobService_CreateJobStatus_Handler,
		},
		{
			MethodName: "GetJobCodeRef",
			Handler:    _JobService_GetJobCodeRef_Handler,
		},
		{
			MethodName: "CreateJobCodeRef",
			Handler:    _JobService_CreateJobCodeRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	// List experiments
	ListExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// List bookmarked experiments
	ListBookmarkedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// List archived experiments
	ListArchivedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// Create new experiment
	CreateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Get experiment
	GetExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Update experiment
	UpdateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Delete experiment
	DeleteExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete experiments
	DeleteExperiments(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiment
	StopExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiments
	StopExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart experiment
	RestartExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Resume experiment
	ResumeExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Archive experiment
	ArchiveExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore experiment
	RestoreExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark experiment
	BookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark experiment
	UnBookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Start experiment tensorboard
	StartExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiment tensorboard
	StopExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get experiment status
	GetExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// List experiment statuses
	ListExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListExperimentStatusesResponse, error)
	// Create new experiment status
	CreateExperimentStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ExperimentStatus, error)
	// Get experiment code ref
	GetExperimentCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error)
	// Get experiment code ref
	CreateExperimentCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
}

type experimentServiceClient struct {
	cc *grpc.ClientConn
}

func NewExperimentServiceClient(cc *grpc.ClientConn) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) ListExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListBookmarkedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListBookmarkedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListArchivedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListArchivedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/UpdateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiments(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/DeleteExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) RestartExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/RestartExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ResumeExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ResumeExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ArchiveExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ArchiveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) RestoreExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/RestoreExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) BookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/BookmarkExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UnBookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/UnBookmarkExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StartExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StartExperimentTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperimentTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperimentStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListExperimentStatusesResponse, error) {
	out := new(ListExperimentStatusesResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListExperimentStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperimentStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ExperimentStatus, error) {
	out := new(ExperimentStatus)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/CreateExperimentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperimentCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperimentCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/CreateExperimentCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
type ExperimentServiceServer interface {
	// List experiments
	ListExperiments(context.Context, *ProjectBodyRequest) (*ListExperimentsResponse, error)
	// List bookmarked experiments
	ListBookmarkedExperiments(context.Context, *OwnerBodyRequest) (*ListExperimentsResponse, error)
	// List archived experiments
	ListArchivedExperiments(context.Context, *OwnerBodyRequest) (*ListExperimentsResponse, error)
	// Create new experiment
	CreateExperiment(context.Context, *ExperimentBodyRequest) (*Experiment, error)
	// Get experiment
	GetExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Update experiment
	UpdateExperiment(context.Context, *ExperimentBodyRequest) (*Experiment, error)
	// Delete experiment
	DeleteExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Delete experiments
	DeleteExperiments(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiment
	StopExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiments
	StopExperiments(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restart experiment
	RestartExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Resume experiment
	ResumeExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Archive experiment
	ArchiveExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Restore experiment
	RestoreExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Bookmark experiment
	BookmarkExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// UnBookmark experiment
	UnBookmarkExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Start experiment tensorboard
	StartExperimentTensorboard(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiment tensorboard
	StopExperimentTensorboard(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Get experiment status
	GetExperimentStatuses(context.Context, *OwnedEntityIdRequest) (*StatusResponse, error)
	// List experiment statuses
	ListExperimentStatuses(context.Context, *OwnedEntityIdRequest) (*ListExperimentStatusesResponse, error)
	// Create new experiment status
	CreateExperimentStatus(context.Context, *OwnedEntityIdRequest) (*ExperimentStatus, error)
	// Get experiment code ref
	GetExperimentCodeRef(context.Context, *OwnedEntityIdRequest) (*CodeReference, error)
	// Get experiment code ref
	CreateExperimentCodeRef(context.Context, *CodeReferenceBodyRequest) (*CodeReference, error)
}

// UnimplementedExperimentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentServiceServer struct {
}

func (*UnimplementedExperimentServiceServer) ListExperiments(ctx context.Context, req *ProjectBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) ListBookmarkedExperiments(ctx context.Context, req *OwnerBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) ListArchivedExperiments(ctx context.Context, req *OwnerBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperiment(ctx context.Context, req *ExperimentBodyRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperiment(ctx context.Context, req *ExperimentBodyRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiments(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperiments(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) RestartExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ResumeExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ArchiveExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) RestoreExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) BookmarkExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UnBookmarkExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StartExperimentTensorboard(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExperimentTensorboard not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperimentTensorboard(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperimentTensorboard not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentStatuses not implemented")
}
func (*UnimplementedExperimentServiceServer) ListExperimentStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*ListExperimentStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperimentStatuses not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperimentStatus(ctx context.Context, req *OwnedEntityIdRequest) (*ExperimentStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentStatus not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentCodeRef(ctx context.Context, req *OwnedEntityIdRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentCodeRef not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperimentCodeRef(ctx context.Context, req *CodeReferenceBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentCodeRef not implemented")
}

func RegisterExperimentServiceServer(s *grpc.Server, srv ExperimentServiceServer) {
	s.RegisterService(&_ExperimentService_serviceDesc, srv)
}

func _ExperimentService_ListExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListBookmarkedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListBookmarkedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListBookmarkedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListBookmarkedExperiments(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListArchivedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListArchivedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListArchivedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListArchivedExperiments(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*ExperimentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, req.(*ExperimentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/DeleteExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperiments(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_RestartExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).RestartExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/RestartExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).RestartExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ResumeExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ResumeExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ResumeExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ResumeExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ArchiveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ArchiveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_RestoreExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).RestoreExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/RestoreExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).RestoreExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_BookmarkExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).BookmarkExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/BookmarkExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).BookmarkExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UnBookmarkExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UnBookmarkExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/UnBookmarkExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UnBookmarkExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StartExperimentTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StartExperimentTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StartExperimentTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StartExperimentTensorboard(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperimentTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperimentTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperimentTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperimentTensorboard(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperimentStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListExperimentStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperimentStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListExperimentStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperimentStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperimentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperimentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/CreateExperimentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperimentStatus(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperimentCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentCodeRef(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperimentCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReferenceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperimentCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/CreateExperimentCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperimentCodeRef(ctx, req.(*CodeReferenceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExperiments",
			Handler:    _ExperimentService_ListExperiments_Handler,
		},
		{
			MethodName: "ListBookmarkedExperiments",
			Handler:    _ExperimentService_ListBookmarkedExperiments_Handler,
		},
		{
			MethodName: "ListArchivedExperiments",
			Handler:    _ExperimentService_ListArchivedExperiments_Handler,
		},
		{
			MethodName: "CreateExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _ExperimentService_GetExperiment_Handler,
		},
		{
			MethodName: "UpdateExperiment",
			Handler:    _ExperimentService_UpdateExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiments",
			Handler:    _ExperimentService_DeleteExperiments_Handler,
		},
		{
			MethodName: "StopExperiment",
			Handler:    _ExperimentService_StopExperiment_Handler,
		},
		{
			MethodName: "StopExperiments",
			Handler:    _ExperimentService_StopExperiments_Handler,
		},
		{
			MethodName: "RestartExperiment",
			Handler:    _ExperimentService_RestartExperiment_Handler,
		},
		{
			MethodName: "ResumeExperiment",
			Handler:    _ExperimentService_ResumeExperiment_Handler,
		},
		{
			MethodName: "ArchiveExperiment",
			Handler:    _ExperimentService_ArchiveExperiment_Handler,
		},
		{
			MethodName: "RestoreExperiment",
			Handler:    _ExperimentService_RestoreExperiment_Handler,
		},
		{
			MethodName: "BookmarkExperiment",
			Handler:    _ExperimentService_BookmarkExperiment_Handler,
		},
		{
			MethodName: "UnBookmarkExperiment",
			Handler:    _ExperimentService_UnBookmarkExperiment_Handler,
		},
		{
			MethodName: "StartExperimentTensorboard",
			Handler:    _ExperimentService_StartExperimentTensorboard_Handler,
		},
		{
			MethodName: "StopExperimentTensorboard",
			Handler:    _ExperimentService_StopExperimentTensorboard_Handler,
		},
		{
			MethodName: "GetExperimentStatuses",
			Handler:    _ExperimentService_GetExperimentStatuses_Handler,
		},
		{
			MethodName: "ListExperimentStatuses",
			Handler:    _ExperimentService_ListExperimentStatuses_Handler,
		},
		{
			MethodName: "CreateExperimentStatus",
			Handler:    _ExperimentService_CreateExperimentStatus_Handler,
		},
		{
			MethodName: "GetExperimentCodeRef",
			Handler:    _ExperimentService_GetExperimentCodeRef_Handler,
		},
		{
			MethodName: "CreateExperimentCodeRef",
			Handler:    _ExperimentService_CreateExperimentCodeRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}
