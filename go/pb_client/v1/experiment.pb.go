// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/experiment.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Experiment specification
type Experiment struct {
	// Unique integer identifier
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// UUID
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Unique name generated
	UniqueName string `protobuf:"bytes,3,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty"`
	// Optional name
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Optional description
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Optional Tags of this entity
	Tags []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	// Optional if the entity has been deleted
	Deleted bool `protobuf:"varint,7,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Required name of user started this entity
	User string `protobuf:"bytes,8,opt,name=user,proto3" json:"user,omitempty"`
	// Optional time when the entityt was created
	CreatedAt string `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional last time the entity was updated
	UpdatedAt string `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Optional last time the entity was started
	StartedAt string `protobuf:"bytes,11,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	// Optional last time the entity was started
	FinishedAt string `protobuf:"bytes,12,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	// Required project name
	Project string `protobuf:"bytes,13,opt,name=project,proto3" json:"project,omitempty"`
	// Optional flag to tell if this entity is managed by the platform
	IsManaged string `protobuf:"bytes,14,opt,name=is_managed,json=isManaged,proto3" json:"is_managed,omitempty"`
	// Optional content of the entity's spec
	Spec string `protobuf:"bytes,15,opt,name=spec,proto3" json:"spec,omitempty"`
	// Optional backend value of this entity
	Backend string `protobuf:"bytes,16,opt,name=backend,proto3" json:"backend,omitempty"`
	// Optional framework name of this entity
	Framework string `protobuf:"bytes,17,opt,name=framework,proto3" json:"framework,omitempty"`
	// Optional latest status of this entity
	LastStatus string `protobuf:"bytes,18,opt,name=last_status,json=lastStatus,proto3" json:"last_status,omitempty"`
	// Optional Code reference
	CodeReference int64 `protobuf:"varint,19,opt,name=code_reference,json=codeReference,proto3" json:"code_reference,omitempty"`
	// Optional hardware resources requested by this entity
	Resources *Dict `protobuf:"bytes,20,opt,name=resources,proto3" json:"resources,omitempty"`
	// Optional a readme text describing this entity
	Readme string `protobuf:"bytes,21,opt,name=readme,proto3" json:"readme,omitempty"`
	// Optional if this entity was bookmarked
	Bookmarked bool `protobuf:"varint,22,opt,name=bookmarked,proto3" json:"bookmarked,omitempty"`
	// Optional params of this entity
	Params *Dict `protobuf:"bytes,23,opt,name=params,proto3" json:"params,omitempty"`
	// Optional run enivronment tracked
	RunEnv *Dict `protobuf:"bytes,24,opt,name=run_env,json=runEnv,proto3" json:"run_env,omitempty"`
	// Optional build job name
	BuildJob string `protobuf:"bytes,25,opt,name=build_job,json=buildJob,proto3" json:"build_job,omitempty"`
	// Optional data references of this entity
	DataRefs *Dict `protobuf:"bytes,26,opt,name=data_refs,json=dataRefs,proto3" json:"data_refs,omitempty"`
	// Optional artificat references of this entity
	ArtifactRefs *Dict `protobuf:"bytes,27,opt,name=artifact_refs,json=artifactRefs,proto3" json:"artifact_refs,omitempty"`
	// Optional Id of the original experiment
	Original int64 `protobuf:"varint,28,opt,name=original,proto3" json:"original,omitempty"`
	// Optional if this experiment was restarted/copied/resumed
	CloningStrategy string `protobuf:"bytes,29,opt,name=cloning_strategy,json=cloningStrategy,proto3" json:"cloning_strategy,omitempty"`
	// Optional Experiment group name
	ExperimentGroup string `protobuf:"bytes,30,opt,name=experiment_group,json=experimentGroup,proto3" json:"experiment_group,omitempty"`
	// Optional number of jobs belonging to this entity
	NumJobs int32 `protobuf:"varint,31,opt,name=num_jobs,json=numJobs,proto3" json:"num_jobs,omitempty"`
	// Optional if this entity has a tensorboard
	HasTensorboard bool `protobuf:"varint,32,opt,name=has_tensorboard,json=hasTensorboard,proto3" json:"has_tensorboard,omitempty"`
	// Optional last metrics of this entity
	LastMetric           *Dict    `protobuf:"bytes,33,opt,name=last_metric,json=lastMetric,proto3" json:"last_metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Experiment) Reset()         { *m = Experiment{} }
func (m *Experiment) String() string { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()    {}
func (*Experiment) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52cdac465d62215, []int{0}
}

func (m *Experiment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Experiment.Unmarshal(m, b)
}
func (m *Experiment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Experiment.Marshal(b, m, deterministic)
}
func (m *Experiment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Experiment.Merge(m, src)
}
func (m *Experiment) XXX_Size() int {
	return xxx_messageInfo_Experiment.Size(m)
}
func (m *Experiment) XXX_DiscardUnknown() {
	xxx_messageInfo_Experiment.DiscardUnknown(m)
}

var xxx_messageInfo_Experiment proto.InternalMessageInfo

func (m *Experiment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Experiment) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Experiment) GetUniqueName() string {
	if m != nil {
		return m.UniqueName
	}
	return ""
}

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Experiment) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Experiment) GetDeleted() bool {
	if m != nil {
		return m.Deleted
	}
	return false
}

func (m *Experiment) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Experiment) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *Experiment) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *Experiment) GetStartedAt() string {
	if m != nil {
		return m.StartedAt
	}
	return ""
}

func (m *Experiment) GetFinishedAt() string {
	if m != nil {
		return m.FinishedAt
	}
	return ""
}

func (m *Experiment) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Experiment) GetIsManaged() string {
	if m != nil {
		return m.IsManaged
	}
	return ""
}

func (m *Experiment) GetSpec() string {
	if m != nil {
		return m.Spec
	}
	return ""
}

func (m *Experiment) GetBackend() string {
	if m != nil {
		return m.Backend
	}
	return ""
}

func (m *Experiment) GetFramework() string {
	if m != nil {
		return m.Framework
	}
	return ""
}

func (m *Experiment) GetLastStatus() string {
	if m != nil {
		return m.LastStatus
	}
	return ""
}

func (m *Experiment) GetCodeReference() int64 {
	if m != nil {
		return m.CodeReference
	}
	return 0
}

func (m *Experiment) GetResources() *Dict {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Experiment) GetReadme() string {
	if m != nil {
		return m.Readme
	}
	return ""
}

func (m *Experiment) GetBookmarked() bool {
	if m != nil {
		return m.Bookmarked
	}
	return false
}

func (m *Experiment) GetParams() *Dict {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Experiment) GetRunEnv() *Dict {
	if m != nil {
		return m.RunEnv
	}
	return nil
}

func (m *Experiment) GetBuildJob() string {
	if m != nil {
		return m.BuildJob
	}
	return ""
}

func (m *Experiment) GetDataRefs() *Dict {
	if m != nil {
		return m.DataRefs
	}
	return nil
}

func (m *Experiment) GetArtifactRefs() *Dict {
	if m != nil {
		return m.ArtifactRefs
	}
	return nil
}

func (m *Experiment) GetOriginal() int64 {
	if m != nil {
		return m.Original
	}
	return 0
}

func (m *Experiment) GetCloningStrategy() string {
	if m != nil {
		return m.CloningStrategy
	}
	return ""
}

func (m *Experiment) GetExperimentGroup() string {
	if m != nil {
		return m.ExperimentGroup
	}
	return ""
}

func (m *Experiment) GetNumJobs() int32 {
	if m != nil {
		return m.NumJobs
	}
	return 0
}

func (m *Experiment) GetHasTensorboard() bool {
	if m != nil {
		return m.HasTensorboard
	}
	return false
}

func (m *Experiment) GetLastMetric() *Dict {
	if m != nil {
		return m.LastMetric
	}
	return nil
}

// Experiment specification
type ExperimentStatus struct {
	// Unique integer identifier
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// UUID
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Optional time when the entityt was created
	CreatedAt string `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Optional last time the entity was updated
	UpdatedAt string `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Optional status recorded
	Status string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Optional status message
	Message              string   `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExperimentStatus) Reset()         { *m = ExperimentStatus{} }
func (m *ExperimentStatus) String() string { return proto.CompactTextString(m) }
func (*ExperimentStatus) ProtoMessage()    {}
func (*ExperimentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52cdac465d62215, []int{1}
}

func (m *ExperimentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExperimentStatus.Unmarshal(m, b)
}
func (m *ExperimentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExperimentStatus.Marshal(b, m, deterministic)
}
func (m *ExperimentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentStatus.Merge(m, src)
}
func (m *ExperimentStatus) XXX_Size() int {
	return xxx_messageInfo_ExperimentStatus.Size(m)
}
func (m *ExperimentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentStatus proto.InternalMessageInfo

func (m *ExperimentStatus) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ExperimentStatus) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ExperimentStatus) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *ExperimentStatus) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func (m *ExperimentStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ExperimentStatus) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// Request data to create/update experiment
type ExperimentBodyRequest struct {
	// Owner of the namespace
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// Project where the experiement will be assigned
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Experiment object
	Experiment           *Experiment `protobuf:"bytes,3,opt,name=experiment,proto3" json:"experiment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ExperimentBodyRequest) Reset()         { *m = ExperimentBodyRequest{} }
func (m *ExperimentBodyRequest) String() string { return proto.CompactTextString(m) }
func (*ExperimentBodyRequest) ProtoMessage()    {}
func (*ExperimentBodyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52cdac465d62215, []int{2}
}

func (m *ExperimentBodyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExperimentBodyRequest.Unmarshal(m, b)
}
func (m *ExperimentBodyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExperimentBodyRequest.Marshal(b, m, deterministic)
}
func (m *ExperimentBodyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExperimentBodyRequest.Merge(m, src)
}
func (m *ExperimentBodyRequest) XXX_Size() int {
	return xxx_messageInfo_ExperimentBodyRequest.Size(m)
}
func (m *ExperimentBodyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExperimentBodyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExperimentBodyRequest proto.InternalMessageInfo

func (m *ExperimentBodyRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ExperimentBodyRequest) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *ExperimentBodyRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

// Contains list experiments
type ListExperimentsResponse struct {
	// Count of the entities
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// List of all entities
	Results []*Experiment `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Previous page
	Previous string `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	// Next page
	Next                 string   `protobuf:"bytes,4,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExperimentsResponse) Reset()         { *m = ListExperimentsResponse{} }
func (m *ListExperimentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListExperimentsResponse) ProtoMessage()    {}
func (*ListExperimentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52cdac465d62215, []int{3}
}

func (m *ListExperimentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExperimentsResponse.Unmarshal(m, b)
}
func (m *ListExperimentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExperimentsResponse.Marshal(b, m, deterministic)
}
func (m *ListExperimentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExperimentsResponse.Merge(m, src)
}
func (m *ListExperimentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListExperimentsResponse.Size(m)
}
func (m *ListExperimentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExperimentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListExperimentsResponse proto.InternalMessageInfo

func (m *ListExperimentsResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListExperimentsResponse) GetResults() []*Experiment {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListExperimentsResponse) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *ListExperimentsResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

// Contains list experiments
type ListExperimentStatusesResponse struct {
	// Count of the entities
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// List of all entities
	Results []*ExperimentStatus `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// Previous page
	Previous string `protobuf:"bytes,3,opt,name=previous,proto3" json:"previous,omitempty"`
	// Next page
	Next                 string   `protobuf:"bytes,4,opt,name=next,proto3" json:"next,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListExperimentStatusesResponse) Reset()         { *m = ListExperimentStatusesResponse{} }
func (m *ListExperimentStatusesResponse) String() string { return proto.CompactTextString(m) }
func (*ListExperimentStatusesResponse) ProtoMessage()    {}
func (*ListExperimentStatusesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52cdac465d62215, []int{4}
}

func (m *ListExperimentStatusesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListExperimentStatusesResponse.Unmarshal(m, b)
}
func (m *ListExperimentStatusesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListExperimentStatusesResponse.Marshal(b, m, deterministic)
}
func (m *ListExperimentStatusesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListExperimentStatusesResponse.Merge(m, src)
}
func (m *ListExperimentStatusesResponse) XXX_Size() int {
	return xxx_messageInfo_ListExperimentStatusesResponse.Size(m)
}
func (m *ListExperimentStatusesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListExperimentStatusesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListExperimentStatusesResponse proto.InternalMessageInfo

func (m *ListExperimentStatusesResponse) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ListExperimentStatusesResponse) GetResults() []*ExperimentStatus {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListExperimentStatusesResponse) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *ListExperimentStatusesResponse) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func init() {
	proto.RegisterType((*Experiment)(nil), "v1.Experiment")
	proto.RegisterType((*ExperimentStatus)(nil), "v1.ExperimentStatus")
	proto.RegisterType((*ExperimentBodyRequest)(nil), "v1.ExperimentBodyRequest")
	proto.RegisterType((*ListExperimentsResponse)(nil), "v1.ListExperimentsResponse")
	proto.RegisterType((*ListExperimentStatusesResponse)(nil), "v1.ListExperimentStatusesResponse")
}

func init() { proto.RegisterFile("v1/experiment.proto", fileDescriptor_a52cdac465d62215) }

var fileDescriptor_a52cdac465d62215 = []byte{
	// 1591 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x4f, 0x23, 0xc9,
	0x11, 0xd7, 0x18, 0x30, 0x76, 0x73, 0x80, 0xe9, 0x63, 0xa1, 0x31, 0xdc, 0xde, 0xec, 0x44, 0xb7,
	0x31, 0xbe, 0xc3, 0x73, 0x66, 0xd1, 0xfd, 0x41, 0x8a, 0x12, 0x96, 0x43, 0x9b, 0x9c, 0x72, 0x97,
	0xd3, 0x90, 0x7d, 0xc9, 0x43, 0xac, 0xf6, 0x4c, 0x63, 0x66, 0xf1, 0x74, 0xcf, 0x76, 0xf7, 0x18,
	0x58, 0x42, 0x22, 0x25, 0x79, 0xc9, 0x43, 0x12, 0x29, 0x2b, 0xe5, 0x61, 0x3f, 0x40, 0xbe, 0x40,
	0x5e, 0xf3, 0x21, 0x22, 0x25, 0x1f, 0x21, 0x1f, 0x24, 0xea, 0xee, 0x19, 0x7b, 0x6c, 0xfe, 0x79,
	0xcd, 0xea, 0x9e, 0x3c, 0x55, 0xd5, 0x5d, 0xbf, 0x5f, 0x55, 0x57, 0xd7, 0xd4, 0x18, 0xbc, 0xdf,
	0x6b, 0xba, 0xe4, 0x2c, 0x26, 0x3c, 0x8c, 0x08, 0x95, 0x8d, 0x98, 0x33, 0xc9, 0x60, 0xa1, 0xd7,
	0xac, 0x6e, 0x74, 0x18, 0xeb, 0x74, 0x89, 0x8b, 0xe3, 0xd0, 0xc5, 0x94, 0x32, 0x89, 0x65, 0xc8,
	0xa8, 0x30, 0x2b, 0xaa, 0xeb, 0xa9, 0x55, 0x4b, 0xed, 0xe4, 0xc8, 0x25, 0x51, 0x2c, 0xcf, 0x53,
	0xe3, 0x27, 0xfa, 0xc7, 0xdf, 0xea, 0x10, 0xba, 0x25, 0x4e, 0x71, 0xa7, 0x43, 0xb8, 0xcb, 0x62,
	0xbd, 0xfd, 0x1a, 0x57, 0xf3, 0xbd, 0xa6, 0xdb, 0xc6, 0x82, 0xa4, 0xe2, 0x52, 0xaf, 0xe9, 0xfa,
	0x2c, 0x20, 0x2d, 0x4e, 0x8e, 0x8c, 0xca, 0xf9, 0x73, 0x09, 0x80, 0x83, 0x3e, 0x47, 0xb8, 0x00,
	0x0a, 0x61, 0x80, 0x2c, 0xdb, 0xaa, 0x4d, 0x79, 0x85, 0x30, 0x80, 0x10, 0x4c, 0x27, 0x49, 0x18,
	0xa0, 0x82, 0x6d, 0xd5, 0xca, 0x9e, 0x7e, 0x86, 0x1f, 0x82, 0xb9, 0x84, 0x86, 0x2f, 0x13, 0xd2,
	0xa2, 0x38, 0x22, 0x68, 0x4a, 0x9b, 0x80, 0x51, 0x7d, 0x8b, 0x23, 0xa2, 0x36, 0x69, 0xcb, 0xb4,
	0xd9, 0xa4, 0x9e, 0xa1, 0x0d, 0xe6, 0x02, 0x22, 0x7c, 0x1e, 0x6a, 0xae, 0x68, 0x46, 0x9b, 0xf2,
	0x2a, 0xb5, 0x4b, 0xe2, 0x8e, 0x40, 0x45, 0x7b, 0x4a, 0xed, 0x52, 0xcf, 0x10, 0x81, 0xd9, 0x80,
	0x74, 0x89, 0x24, 0x01, 0x9a, 0xb5, 0xad, 0x5a, 0xc9, 0xcb, 0x44, 0x4d, 0x4c, 0x10, 0x8e, 0x4a,
	0x29, 0x31, 0x41, 0x38, 0xfc, 0x00, 0x00, 0x9f, 0x13, 0x2c, 0x49, 0xd0, 0xc2, 0x12, 0x95, 0xb5,
	0xa5, 0x9c, 0x6a, 0xf6, 0xa4, 0x32, 0x27, 0x71, 0x90, 0x99, 0x81, 0x31, 0xa7, 0x1a, 0x63, 0x16,
	0x12, 0xf3, 0xd4, 0x3c, 0x67, 0xcc, 0xa9, 0x66, 0x4f, 0xaa, 0xa8, 0x8f, 0x42, 0x1a, 0x8a, 0x63,
	0x63, 0x7f, 0xcf, 0x44, 0x9d, 0xa9, 0xf6, 0xa4, 0xe2, 0x1a, 0x73, 0xf6, 0x82, 0xf8, 0x12, 0xcd,
	0x6b, 0x63, 0x26, 0x2a, 0xcf, 0xa1, 0x68, 0x45, 0x98, 0xe2, 0x0e, 0x09, 0xd0, 0x82, 0xf1, 0x1c,
	0x8a, 0x6f, 0x8c, 0x42, 0x85, 0x22, 0x62, 0xe2, 0xa3, 0x45, 0x13, 0x8a, 0x7a, 0x56, 0xce, 0xda,
	0xd8, 0x3f, 0x21, 0x34, 0x40, 0x15, 0xe3, 0x2c, 0x15, 0xe1, 0x06, 0x28, 0x1f, 0x71, 0x1c, 0x91,
	0x53, 0xc6, 0x4f, 0xd0, 0x92, 0xf1, 0xd5, 0x57, 0x28, 0x96, 0x5d, 0x2c, 0x64, 0x4b, 0x48, 0x2c,
	0x13, 0x81, 0xa0, 0x61, 0xa9, 0x54, 0x87, 0x5a, 0x03, 0x3f, 0x02, 0x0b, 0x59, 0x05, 0x10, 0x4e,
	0xa8, 0x4f, 0xd0, 0xfb, 0xfa, 0xb0, 0xe7, 0x95, 0xd6, 0xcb, 0x94, 0xf0, 0x31, 0x28, 0x73, 0x22,
	0x58, 0xc2, 0x7d, 0x22, 0xd0, 0xb2, 0x6d, 0xd5, 0xe6, 0xb6, 0x4b, 0x8d, 0x5e, 0xb3, 0xf1, 0x55,
	0xe8, 0x4b, 0x6f, 0x60, 0x82, 0x2b, 0xa0, 0xc8, 0x09, 0x0e, 0x22, 0x82, 0x1e, 0x68, 0xa8, 0x54,
	0x82, 0x0f, 0x01, 0x68, 0x33, 0x76, 0x12, 0x61, 0x7e, 0x42, 0x02, 0xb4, 0xa2, 0xcf, 0x2e, 0xa7,
	0x81, 0x36, 0x28, 0xc6, 0x98, 0xe3, 0x48, 0xa0, 0xd5, 0x11, 0xe7, 0xa9, 0x1e, 0x3e, 0x02, 0xb3,
	0x3c, 0xa1, 0x2d, 0x42, 0x7b, 0x08, 0x8d, 0x2e, 0xe1, 0x09, 0x3d, 0xa0, 0x3d, 0xb8, 0x0e, 0xca,
	0xed, 0x24, 0xec, 0x06, 0xad, 0x17, 0xac, 0x8d, 0xd6, 0x34, 0x7e, 0x49, 0x2b, 0xbe, 0x66, 0x6d,
	0xf8, 0x11, 0x28, 0x07, 0x58, 0x62, 0x15, 0xa8, 0x40, 0xd5, 0x11, 0x0f, 0x25, 0x65, 0xf2, 0xc8,
	0x91, 0x80, 0x5b, 0x60, 0x1e, 0x73, 0x19, 0x1e, 0x61, 0x5f, 0x9a, 0xa5, 0xeb, 0x23, 0x4b, 0xdf,
	0xcb, 0xcc, 0x7a, 0x79, 0x15, 0x94, 0x18, 0x0f, 0x3b, 0x21, 0xc5, 0x5d, 0xb4, 0xa1, 0x13, 0xd7,
	0x97, 0xe1, 0x26, 0xa8, 0xf8, 0x5d, 0x46, 0x43, 0xda, 0x69, 0x09, 0xc9, 0xb1, 0x24, 0x9d, 0x73,
	0xf4, 0x81, 0x66, 0xb5, 0x98, 0xea, 0x0f, 0x53, 0xb5, 0x5a, 0x3a, 0x68, 0x0c, 0xad, 0x0e, 0x67,
	0x49, 0x8c, 0x1e, 0x9a, 0xa5, 0x03, 0xfd, 0x33, 0xa5, 0x86, 0x6b, 0xa0, 0x44, 0x93, 0x48, 0x85,
	0x28, 0xd0, 0x87, 0xb6, 0x55, 0x9b, 0xf1, 0x66, 0x69, 0x12, 0x7d, 0xcd, 0xda, 0x02, 0xfe, 0x10,
	0x2c, 0x1e, 0x63, 0xd1, 0x92, 0x84, 0x0a, 0xc6, 0xdb, 0x0c, 0xf3, 0x00, 0xd9, 0x3a, 0xd3, 0x0b,
	0xc7, 0x58, 0xfc, 0x72, 0xa0, 0x85, 0x9b, 0x69, 0x55, 0x44, 0x44, 0xf2, 0xd0, 0x47, 0x8f, 0x46,
	0x42, 0xd4, 0xf5, 0xf1, 0x8d, 0xb6, 0x39, 0xff, 0xb0, 0x40, 0x65, 0xd0, 0x0f, 0xd2, 0xa2, 0x19,
	0xa7, 0x2b, 0x0c, 0x5f, 0xbe, 0xa9, 0xdb, 0x2f, 0xdf, 0xf4, 0xe8, 0xe5, 0x5b, 0x01, 0xc5, 0xb4,
	0x64, 0x4d, 0x67, 0x48, 0x25, 0x75, 0x0f, 0x22, 0x22, 0x04, 0xee, 0x10, 0x54, 0x34, 0xf7, 0x20,
	0x15, 0x9d, 0x53, 0xf0, 0x60, 0xc0, 0xf3, 0x29, 0x0b, 0xce, 0x3d, 0xf2, 0x32, 0x21, 0x42, 0xc2,
	0x65, 0x30, 0xc3, 0x4e, 0x29, 0xe1, 0x9a, 0x6f, 0xd9, 0x33, 0x42, 0xfe, 0x76, 0x16, 0x86, 0x6f,
	0x67, 0x03, 0x80, 0x41, 0xce, 0x35, 0xf1, 0xb9, 0xed, 0x05, 0x95, 0x9b, 0x81, 0x7b, 0x2f, 0xb7,
	0xc2, 0xf9, 0x93, 0x05, 0x56, 0x7f, 0x1e, 0x0a, 0x39, 0x30, 0x0b, 0x8f, 0x88, 0x98, 0x51, 0x41,
	0x14, 0xb6, 0xcf, 0x12, 0x2a, 0x35, 0xf6, 0x8c, 0x67, 0x04, 0x58, 0x03, 0xb3, 0x9c, 0x88, 0xa4,
	0x2b, 0x05, 0x2a, 0xd8, 0x53, 0xd7, 0xb8, 0xcf, 0xcc, 0xaa, 0xbc, 0x62, 0x4e, 0x7a, 0x21, 0x4b,
	0x44, 0x9a, 0xc2, 0xbe, 0xac, 0xbb, 0x2a, 0x39, 0x93, 0xfd, 0xae, 0x4a, 0xce, 0xa4, 0xf3, 0x77,
	0x0b, 0x3c, 0x1c, 0xe6, 0x62, 0x4e, 0x8c, 0xdc, 0x45, 0xa9, 0x31, 0x4a, 0x69, 0x79, 0x98, 0x92,
	0x71, 0x33, 0x31, 0xb1, 0xed, 0x7f, 0xad, 0x82, 0xa5, 0x9c, 0x37, 0xc2, 0x7b, 0xa1, 0x4f, 0xe0,
	0x4b, 0xb0, 0x38, 0x92, 0x39, 0xb8, 0xa2, 0x70, 0xbf, 0x33, 0x47, 0x91, 0x3b, 0xc5, 0xea, 0xba,
	0xd2, 0xdf, 0x90, 0x66, 0x67, 0xf3, 0xf7, 0xff, 0xf9, 0xdf, 0xeb, 0xc2, 0x0f, 0xe0, 0x23, 0xb7,
	0xd7, 0x74, 0x2f, 0xf4, 0x01, 0x5f, 0xba, 0x17, 0xe9, 0x81, 0x5e, 0xe6, 0xde, 0xb9, 0x02, 0x9e,
	0x83, 0x35, 0xe5, 0xe5, 0x69, 0xbf, 0xf5, 0xe4, 0xc1, 0x75, 0xd0, 0xbf, 0x50, 0xdb, 0x27, 0x83,
	0xce, 0x1a, 0x9a, 0xe8, 0x93, 0xc8, 0x43, 0xf7, 0x4c, 0x9d, 0xec, 0x71, 0xff, 0x38, 0xec, 0xdd,
	0x1b, 0xb8, 0xa6, 0x81, 0x1d, 0x68, 0x2b, 0x60, 0x6c, 0x7c, 0x5e, 0x8f, 0x7b, 0x02, 0x2a, 0xfb,
	0xfa, 0xde, 0xe5, 0xde, 0xeb, 0x6b, 0xc3, 0xc7, 0x9b, 0x47, 0x1d, 0x29, 0x46, 0xe7, 0x13, 0x0d,
	0xf4, 0xd8, 0xb9, 0x3b, 0xb9, 0xbb, 0x56, 0x1d, 0x86, 0x60, 0xfe, 0x19, 0xc9, 0x11, 0x86, 0x28,
	0x0b, 0x2d, 0x38, 0xa0, 0x32, 0x94, 0xe7, 0x3f, 0x0b, 0x6e, 0x02, 0x6a, 0x68, 0xa0, 0x1a, 0x7c,
	0x7c, 0x27, 0x90, 0x7b, 0x11, 0x06, 0x97, 0xf0, 0x9f, 0x16, 0xa8, 0x3c, 0xd7, 0x1d, 0x63, 0xb2,
	0xc0, 0xa4, 0xc6, 0xa3, 0xd5, 0xe6, 0x18, 0x78, 0xb9, 0xb1, 0x2d, 0x0c, 0x2e, 0x77, 0xad, 0xfa,
	0xaf, 0x3e, 0x9b, 0x6c, 0x1f, 0x94, 0xa0, 0xf2, 0x95, 0x9e, 0x59, 0xc6, 0xca, 0xd1, 0x4a, 0xc3,
	0x0c, 0x7f, 0x8d, 0x6c, 0xf8, 0x6b, 0x1c, 0xa8, 0xe1, 0x2f, 0xcb, 0x55, 0x7d, 0xdc, 0x5c, 0xbd,
	0x02, 0x4b, 0xa3, 0xa8, 0x62, 0x02, 0xd8, 0x27, 0x1a, 0x76, 0xab, 0x5e, 0xbb, 0x1b, 0xd6, 0x0c,
	0x66, 0x2a, 0xe2, 0x57, 0x60, 0xe1, 0x50, 0xb2, 0xf8, 0x5e, 0xf1, 0x7e, 0xa6, 0x81, 0x3f, 0x75,
	0x3e, 0x1e, 0x2f, 0x5e, 0x57, 0x48, 0x16, 0x9b, 0x6c, 0x2f, 0x0e, 0x63, 0xdf, 0xdc, 0x61, 0x6e,
	0x82, 0x6e, 0x6a, 0xe8, 0x8f, 0x9d, 0x31, 0x52, 0x9d, 0xa1, 0x9e, 0x81, 0x25, 0x8f, 0xe8, 0x51,
	0x71, 0xa2, 0x8b, 0xf0, 0xa5, 0x46, 0x7c, 0xe2, 0x34, 0xc6, 0x0c, 0x96, 0x1b, 0x2c, 0x85, 0xdc,
	0x03, 0x15, 0x8f, 0x88, 0x24, 0x22, 0x13, 0x01, 0x7f, 0xa1, 0x81, 0xb7, 0x9d, 0xad, 0xf1, 0x81,
	0x93, 0x48, 0x9f, 0xf1, 0x25, 0x58, 0x4a, 0xfb, 0xda, 0x3b, 0x39, 0xe6, 0x71, 0x23, 0x4f, 0xfb,
	0x9e, 0x82, 0x57, 0x09, 0x67, 0xfc, 0xfb, 0x85, 0xe7, 0x06, 0x13, 0xfe, 0x0e, 0xc0, 0xec, 0x85,
	0x72, 0x2f, 0xfc, 0xcf, 0x35, 0x7e, 0xd3, 0x71, 0xc7, 0xc4, 0xcf, 0xde, 0x37, 0xf0, 0x0f, 0x16,
	0x58, 0x7e, 0x4e, 0xdf, 0x09, 0x87, 0xb4, 0xf8, 0xea, 0xcd, 0x31, 0x39, 0x24, 0xb4, 0xcf, 0xe2,
	0xb5, 0x05, 0xaa, 0x87, 0xc3, 0x55, 0x9f, 0x9f, 0x3a, 0xdf, 0x9e, 0xcb, 0xbe, 0xe6, 0xf2, 0x23,
	0xe7, 0x8b, 0x31, 0xb9, 0xe4, 0x26, 0x5f, 0xb7, 0x7f, 0x25, 0xfe, 0x62, 0x81, 0xb5, 0xe1, 0x1e,
	0x70, 0x3f, 0x52, 0x3f, 0xd6, 0xa4, 0xbe, 0xac, 0x7f, 0x3e, 0x11, 0x29, 0x16, 0xc3, 0xdf, 0x82,
	0x07, 0x43, 0xaf, 0xc8, 0x6c, 0x44, 0xbb, 0x85, 0x0b, 0x54, 0x96, 0x74, 0x06, 0xcb, 0x06, 0x80,
	0xb4, 0x58, 0xa0, 0x3b, 0x76, 0x4b, 0x4c, 0x61, 0xfe, 0x6a, 0x81, 0x95, 0xeb, 0x87, 0xc4, 0x5b,
	0x18, 0x38, 0x57, 0x67, 0x91, 0xd1, 0xd1, 0x72, 0x72, 0x46, 0x7f, 0xb4, 0xc0, 0xca, 0xe8, 0x88,
	0x92, 0x7e, 0x6a, 0xdc, 0xcc, 0xe8, 0xda, 0x09, 0xd5, 0xd9, 0xd5, 0x1c, 0x76, 0x9c, 0xb7, 0xe5,
	0xa0, 0x2a, 0xe5, 0x02, 0x2c, 0x0f, 0x1d, 0xcc, 0xbe, 0xf9, 0x04, 0xbe, 0x85, 0xc3, 0x92, 0xb2,
	0xec, 0xe7, 0xbf, 0x94, 0xb3, 0x1e, 0x02, 0xc7, 0xed, 0x21, 0xea, 0x3b, 0x9b, 0x93, 0x23, 0xf8,
	0xc6, 0x02, 0xab, 0xcf, 0x46, 0x72, 0x90, 0x11, 0xd8, 0xb8, 0x02, 0x93, 0x7f, 0x71, 0x5d, 0x43,
	0xe2, 0x5b, 0x4d, 0xe2, 0xa7, 0xce, 0xbe, 0x26, 0x41, 0x34, 0xeb, 0x46, 0xc6, 0x25, 0x15, 0x6f,
	0x18, 0x58, 0x8c, 0x31, 0xc7, 0x6c, 0xd7, 0xaa, 0x3f, 0xfd, 0xaf, 0xf5, 0xb7, 0xbd, 0x7f, 0x5b,
	0xf0, 0x37, 0x00, 0x0e, 0xc8, 0xd9, 0xc2, 0x4c, 0xf1, 0xce, 0xaf, 0xc1, 0xfa, 0x77, 0xac, 0x7b,
	0x8e, 0xcf, 0x18, 0xb5, 0xc9, 0x15, 0x33, 0xdc, 0x3c, 0x96, 0x32, 0x16, 0xbb, 0xae, 0xdb, 0x09,
	0xe5, 0x71, 0xd2, 0x6e, 0xf8, 0x2c, 0x72, 0xe3, 0x74, 0x7d, 0xff, 0x61, 0x4b, 0x04, 0x27, 0xa2,
	0xba, 0xec, 0x33, 0x2a, 0xb1, 0x2f, 0x7f, 0x92, 0xa9, 0xd5, 0xe2, 0xed, 0x62, 0xb3, 0xd1, 0xdc,
	0x69, 0xec, 0xd4, 0x2d, 0x6b, 0xbb, 0x82, 0xe3, 0xb8, 0x1b, 0xfa, 0xfa, 0x3f, 0x2d, 0xf7, 0x85,
	0x60, 0x74, 0xf7, 0x8a, 0xc6, 0xdb, 0x04, 0x53, 0x3b, 0x9f, 0xee, 0x40, 0x07, 0x20, 0x2f, 0xfd,
	0x5b, 0xc2, 0x0e, 0x18, 0x11, 0x36, 0x65, 0xd2, 0x26, 0x67, 0xa1, 0x90, 0x0d, 0x58, 0x04, 0xd3,
	0x6f, 0x0a, 0xd6, 0x6c, 0xbb, 0xa8, 0xaf, 0xf6, 0x93, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc6,
	0xe6, 0xd8, 0xbd, 0x99, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExperimentServiceClient is the client API for ExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExperimentServiceClient interface {
	// List experiments
	ListExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// List bookmarked experiments
	ListBookmarkedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// List archived experiments
	ListArchivedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error)
	// Create new experiment
	CreateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Get experiment
	GetExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Update experiment
	UpdateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Delete experiment
	DeleteExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete experiments
	DeleteExperiments(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiment
	StopExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiments
	StopExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart experiment
	RestartExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Resume experiment
	ResumeExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error)
	// Archive experiment
	ArchiveExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore experiment
	RestoreExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark experiment
	BookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// UnBookmark experiment
	UnBookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Start experiment tensorboard
	StartExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop experiment tensorboard
	StopExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get experiment status
	GetExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// List experiment statuses
	ListExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListExperimentStatusesResponse, error)
	// Create new experiment status
	CreateExperimentStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ExperimentStatus, error)
	// Get experiment code ref
	GetExperimentCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error)
	// Get experiment code ref
	GreateExperimentCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
}

type experimentServiceClient struct {
	cc *grpc.ClientConn
}

func NewExperimentServiceClient(cc *grpc.ClientConn) ExperimentServiceClient {
	return &experimentServiceClient{cc}
}

func (c *experimentServiceClient) ListExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListBookmarkedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListBookmarkedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListArchivedExperiments(ctx context.Context, in *OwnerBodyRequest, opts ...grpc.CallOption) (*ListExperimentsResponse, error) {
	out := new(ListExperimentsResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListArchivedExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/CreateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UpdateExperiment(ctx context.Context, in *ExperimentBodyRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/UpdateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/DeleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) DeleteExperiments(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/DeleteExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperiments(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) RestartExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/RestartExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ResumeExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*Experiment, error) {
	out := new(Experiment)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ResumeExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ArchiveExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ArchiveExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) RestoreExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/RestoreExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) BookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/BookmarkExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) UnBookmarkExperiment(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/UnBookmarkExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StartExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StartExperimentTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) StopExperimentTensorboard(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/StopExperimentTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperimentStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) ListExperimentStatuses(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ListExperimentStatusesResponse, error) {
	out := new(ListExperimentStatusesResponse)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/ListExperimentStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) CreateExperimentStatus(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*ExperimentStatus, error) {
	out := new(ExperimentStatus)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/CreateExperimentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GetExperimentCodeRef(ctx context.Context, in *OwnedEntityIdRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GetExperimentCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentServiceClient) GreateExperimentCodeRef(ctx context.Context, in *CodeReferenceBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.ExperimentService/GreateExperimentCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperimentServiceServer is the server API for ExperimentService service.
type ExperimentServiceServer interface {
	// List experiments
	ListExperiments(context.Context, *ProjectBodyRequest) (*ListExperimentsResponse, error)
	// List bookmarked experiments
	ListBookmarkedExperiments(context.Context, *OwnerBodyRequest) (*ListExperimentsResponse, error)
	// List archived experiments
	ListArchivedExperiments(context.Context, *OwnerBodyRequest) (*ListExperimentsResponse, error)
	// Create new experiment
	CreateExperiment(context.Context, *ExperimentBodyRequest) (*Experiment, error)
	// Get experiment
	GetExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Update experiment
	UpdateExperiment(context.Context, *ExperimentBodyRequest) (*Experiment, error)
	// Delete experiment
	DeleteExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Delete experiments
	DeleteExperiments(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiment
	StopExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiments
	StopExperiments(context.Context, *ProjectBodyRequest) (*empty.Empty, error)
	// Restart experiment
	RestartExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Resume experiment
	ResumeExperiment(context.Context, *OwnedEntityIdRequest) (*Experiment, error)
	// Archive experiment
	ArchiveExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Restore experiment
	RestoreExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Bookmark experiment
	BookmarkExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// UnBookmark experiment
	UnBookmarkExperiment(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Start experiment tensorboard
	StartExperimentTensorboard(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Stop experiment tensorboard
	StopExperimentTensorboard(context.Context, *OwnedEntityIdRequest) (*empty.Empty, error)
	// Get experiment status
	GetExperimentStatuses(context.Context, *OwnedEntityIdRequest) (*StatusResponse, error)
	// List experiment statuses
	ListExperimentStatuses(context.Context, *OwnedEntityIdRequest) (*ListExperimentStatusesResponse, error)
	// Create new experiment status
	CreateExperimentStatus(context.Context, *OwnedEntityIdRequest) (*ExperimentStatus, error)
	// Get experiment code ref
	GetExperimentCodeRef(context.Context, *OwnedEntityIdRequest) (*CodeReference, error)
	// Get experiment code ref
	GreateExperimentCodeRef(context.Context, *CodeReferenceBodyRequest) (*CodeReference, error)
}

// UnimplementedExperimentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedExperimentServiceServer struct {
}

func (*UnimplementedExperimentServiceServer) ListExperiments(ctx context.Context, req *ProjectBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) ListBookmarkedExperiments(ctx context.Context, req *OwnerBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) ListArchivedExperiments(ctx context.Context, req *OwnerBodyRequest) (*ListExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperiment(ctx context.Context, req *ExperimentBodyRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UpdateExperiment(ctx context.Context, req *ExperimentBodyRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) DeleteExperiments(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperiments(ctx context.Context, req *ProjectBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperiments not implemented")
}
func (*UnimplementedExperimentServiceServer) RestartExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ResumeExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*Experiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) ArchiveExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) RestoreExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) BookmarkExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) UnBookmarkExperiment(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnBookmarkExperiment not implemented")
}
func (*UnimplementedExperimentServiceServer) StartExperimentTensorboard(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartExperimentTensorboard not implemented")
}
func (*UnimplementedExperimentServiceServer) StopExperimentTensorboard(ctx context.Context, req *OwnedEntityIdRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopExperimentTensorboard not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentStatuses not implemented")
}
func (*UnimplementedExperimentServiceServer) ListExperimentStatuses(ctx context.Context, req *OwnedEntityIdRequest) (*ListExperimentStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExperimentStatuses not implemented")
}
func (*UnimplementedExperimentServiceServer) CreateExperimentStatus(ctx context.Context, req *OwnedEntityIdRequest) (*ExperimentStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentStatus not implemented")
}
func (*UnimplementedExperimentServiceServer) GetExperimentCodeRef(ctx context.Context, req *OwnedEntityIdRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentCodeRef not implemented")
}
func (*UnimplementedExperimentServiceServer) GreateExperimentCodeRef(ctx context.Context, req *CodeReferenceBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GreateExperimentCodeRef not implemented")
}

func RegisterExperimentServiceServer(s *grpc.Server, srv ExperimentServiceServer) {
	s.RegisterService(&_ExperimentService_serviceDesc, srv)
}

func _ExperimentService_ListExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperiments(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListBookmarkedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListBookmarkedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListBookmarkedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListBookmarkedExperiments(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListArchivedExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListArchivedExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListArchivedExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListArchivedExperiments(ctx, req.(*OwnerBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperiment(ctx, req.(*ExperimentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UpdateExperiment(ctx, req.(*ExperimentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_DeleteExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/DeleteExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).DeleteExperiments(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperiments(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_RestartExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).RestartExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/RestartExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).RestartExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ResumeExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ResumeExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ResumeExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ResumeExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ArchiveExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ArchiveExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ArchiveExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_RestoreExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).RestoreExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/RestoreExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).RestoreExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_BookmarkExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).BookmarkExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/BookmarkExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).BookmarkExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_UnBookmarkExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).UnBookmarkExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/UnBookmarkExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).UnBookmarkExperiment(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StartExperimentTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StartExperimentTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StartExperimentTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StartExperimentTensorboard(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_StopExperimentTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).StopExperimentTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/StopExperimentTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).StopExperimentTensorboard(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperimentStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_ListExperimentStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).ListExperimentStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/ListExperimentStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).ListExperimentStatuses(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_CreateExperimentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).CreateExperimentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/CreateExperimentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).CreateExperimentStatus(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GetExperimentCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedEntityIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GetExperimentCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GetExperimentCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GetExperimentCodeRef(ctx, req.(*OwnedEntityIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperimentService_GreateExperimentCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeReferenceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperimentServiceServer).GreateExperimentCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ExperimentService/GreateExperimentCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperimentServiceServer).GreateExperimentCodeRef(ctx, req.(*CodeReferenceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExperimentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ExperimentService",
	HandlerType: (*ExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListExperiments",
			Handler:    _ExperimentService_ListExperiments_Handler,
		},
		{
			MethodName: "ListBookmarkedExperiments",
			Handler:    _ExperimentService_ListBookmarkedExperiments_Handler,
		},
		{
			MethodName: "ListArchivedExperiments",
			Handler:    _ExperimentService_ListArchivedExperiments_Handler,
		},
		{
			MethodName: "CreateExperiment",
			Handler:    _ExperimentService_CreateExperiment_Handler,
		},
		{
			MethodName: "GetExperiment",
			Handler:    _ExperimentService_GetExperiment_Handler,
		},
		{
			MethodName: "UpdateExperiment",
			Handler:    _ExperimentService_UpdateExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiment",
			Handler:    _ExperimentService_DeleteExperiment_Handler,
		},
		{
			MethodName: "DeleteExperiments",
			Handler:    _ExperimentService_DeleteExperiments_Handler,
		},
		{
			MethodName: "StopExperiment",
			Handler:    _ExperimentService_StopExperiment_Handler,
		},
		{
			MethodName: "StopExperiments",
			Handler:    _ExperimentService_StopExperiments_Handler,
		},
		{
			MethodName: "RestartExperiment",
			Handler:    _ExperimentService_RestartExperiment_Handler,
		},
		{
			MethodName: "ResumeExperiment",
			Handler:    _ExperimentService_ResumeExperiment_Handler,
		},
		{
			MethodName: "ArchiveExperiment",
			Handler:    _ExperimentService_ArchiveExperiment_Handler,
		},
		{
			MethodName: "RestoreExperiment",
			Handler:    _ExperimentService_RestoreExperiment_Handler,
		},
		{
			MethodName: "BookmarkExperiment",
			Handler:    _ExperimentService_BookmarkExperiment_Handler,
		},
		{
			MethodName: "UnBookmarkExperiment",
			Handler:    _ExperimentService_UnBookmarkExperiment_Handler,
		},
		{
			MethodName: "StartExperimentTensorboard",
			Handler:    _ExperimentService_StartExperimentTensorboard_Handler,
		},
		{
			MethodName: "StopExperimentTensorboard",
			Handler:    _ExperimentService_StopExperimentTensorboard_Handler,
		},
		{
			MethodName: "GetExperimentStatuses",
			Handler:    _ExperimentService_GetExperimentStatuses_Handler,
		},
		{
			MethodName: "ListExperimentStatuses",
			Handler:    _ExperimentService_ListExperimentStatuses_Handler,
		},
		{
			MethodName: "CreateExperimentStatus",
			Handler:    _ExperimentService_CreateExperimentStatus_Handler,
		},
		{
			MethodName: "GetExperimentCodeRef",
			Handler:    _ExperimentService_GetExperimentCodeRef_Handler,
		},
		{
			MethodName: "GreateExperimentCodeRef",
			Handler:    _ExperimentService_GreateExperimentCodeRef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/experiment.proto",
}
