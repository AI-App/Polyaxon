// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package job_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new job service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArchiveJob archives job
*/
func (a *Client) ArchiveJob(params *ArchiveJobParams) (*ArchiveJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ArchiveJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ArchiveJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookmarkJob bookmarks job
*/
func (a *Client) BookmarkJob(params *BookmarkJobParams) (*BookmarkJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookmarkJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BookmarkJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BookmarkJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookmarkJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookmarkJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateJob creates new job
*/
func (a *Client) CreateJob(params *CreateJobParams) (*CreateJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateJobStatus creates new job status
*/
func (a *Client) CreateJobStatus(params *CreateJobStatusParams) (*CreateJobStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateJobStatus",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateJobStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateJobStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateJobStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteJob deletes job
*/
func (a *Client) DeleteJob(params *DeleteJobParams) (*DeleteJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteJob",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteJobs deletes jobs
*/
func (a *Client) DeleteJobs(params *DeleteJobsParams) (*DeleteJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteJobs",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/jobs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJob gets job
*/
func (a *Client) GetJob(params *GetJobParams) (*GetJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetJob",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetJobCodeRef gets job code ref
*/
func (a *Client) GetJobCodeRef(params *GetJobCodeRefParams) (*GetJobCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetJobCodeRef",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetJobCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetJobCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetJobCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GreateJobCodeRef gets job code ref
*/
func (a *Client) GreateJobCodeRef(params *GreateJobCodeRefParams) (*GreateJobCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGreateJobCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GreateJobCodeRef",
		Method:             "POST",
		PathPattern:        "/v1/{entity.owner}/{entity.project}/jobs/{entity.id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GreateJobCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GreateJobCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GreateJobCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListArchivedJobs lists archived jobs
*/
func (a *Client) ListArchivedJobs(params *ListArchivedJobsParams) (*ListArchivedJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArchivedJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListArchivedJobs",
		Method:             "GET",
		PathPattern:        "/v1/archives/{owner}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListArchivedJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArchivedJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListArchivedJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBookmarkedJobs lists bookmarked jobs
*/
func (a *Client) ListBookmarkedJobs(params *ListBookmarkedJobsParams) (*ListBookmarkedJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBookmarkedJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBookmarkedJobs",
		Method:             "GET",
		PathPattern:        "/v1/bookmarks/{owner}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBookmarkedJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBookmarkedJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBookmarkedJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobStatuses lists job statuses
*/
func (a *Client) ListJobStatuses(params *ListJobStatusesParams) (*ListJobStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListJobStatuses",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobStatusesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListJobStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListJobs lists jobs
*/
func (a *Client) ListJobs(params *ListJobsParams) (*ListJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListJobs",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestartJob restarts job
*/
func (a *Client) RestartJob(params *RestartJobParams) (*RestartJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestartJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestartJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreJob restores job
*/
func (a *Client) RestoreJob(params *RestoreJobParams) (*RestoreJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestoreJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestoreJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeJob resumes job
*/
func (a *Client) ResumeJob(params *ResumeJobParams) (*ResumeJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResumeJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopJob stops job
*/
func (a *Client) StopJob(params *StopJobParams) (*StopJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopJob",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopJobs stops jobs
*/
func (a *Client) StopJobs(params *StopJobsParams) (*StopJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopJobs",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/jobs/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnBookmarkJob uns bookmark job
*/
func (a *Client) UnBookmarkJob(params *UnBookmarkJobParams) (*UnBookmarkJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnBookmarkJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnBookmarkJob",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/jobs/{id}/unbookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnBookmarkJobReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnBookmarkJobOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnBookmarkJob: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateJob2 updates job
*/
func (a *Client) UpdateJob2(params *UpdateJob2Params) (*UpdateJob2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJob2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateJob2",
		Method:             "PUT",
		PathPattern:        "/v1/{owner}/{project}/jobs/{job.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateJob2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateJob2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateJob2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
