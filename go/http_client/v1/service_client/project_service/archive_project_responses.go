// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// ArchiveProjectReader is a Reader for the ArchiveProject structure.
type ArchiveProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArchiveProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewArchiveProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewArchiveProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewArchiveProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewArchiveProjectOK creates a ArchiveProjectOK with default headers values
func NewArchiveProjectOK() *ArchiveProjectOK {
	return &ArchiveProjectOK{}
}

/*ArchiveProjectOK handles this case with default header values.

A successful response.
*/
type ArchiveProjectOK struct {
	Payload interface{}
}

func (o *ArchiveProjectOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] archiveProjectOK  %+v", 200, o.Payload)
}

func (o *ArchiveProjectOK) GetPayload() interface{} {
	return o.Payload
}

func (o *ArchiveProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveProjectForbidden creates a ArchiveProjectForbidden with default headers values
func NewArchiveProjectForbidden() *ArchiveProjectForbidden {
	return &ArchiveProjectForbidden{}
}

/*ArchiveProjectForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ArchiveProjectForbidden struct {
	Payload interface{}
}

func (o *ArchiveProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] archiveProjectForbidden  %+v", 403, o.Payload)
}

func (o *ArchiveProjectForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ArchiveProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArchiveProjectNotFound creates a ArchiveProjectNotFound with default headers values
func NewArchiveProjectNotFound() *ArchiveProjectNotFound {
	return &ArchiveProjectNotFound{}
}

/*ArchiveProjectNotFound handles this case with default header values.

Resource does not exist.
*/
type ArchiveProjectNotFound struct {
	Payload string
}

func (o *ArchiveProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] archiveProjectNotFound  %+v", 404, o.Payload)
}

func (o *ArchiveProjectNotFound) GetPayload() string {
	return o.Payload
}

func (o *ArchiveProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
