// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package build_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	service_model "github.com/polyaxon/polyaxon-sdks/go/http_client/v1/service_model"
)

// NewPatchBuildParams creates a new PatchBuildParams object
// with the default values initialized.
func NewPatchBuildParams() *PatchBuildParams {
	var ()
	return &PatchBuildParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPatchBuildParamsWithTimeout creates a new PatchBuildParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPatchBuildParamsWithTimeout(timeout time.Duration) *PatchBuildParams {
	var ()
	return &PatchBuildParams{

		timeout: timeout,
	}
}

// NewPatchBuildParamsWithContext creates a new PatchBuildParams object
// with the default values initialized, and the ability to set a context for a request
func NewPatchBuildParamsWithContext(ctx context.Context) *PatchBuildParams {
	var ()
	return &PatchBuildParams{

		Context: ctx,
	}
}

// NewPatchBuildParamsWithHTTPClient creates a new PatchBuildParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPatchBuildParamsWithHTTPClient(client *http.Client) *PatchBuildParams {
	var ()
	return &PatchBuildParams{
		HTTPClient: client,
	}
}

/*PatchBuildParams contains all the parameters to send to the API endpoint
for the patch build operation typically these are written to a http.Request
*/
type PatchBuildParams struct {

	/*Body*/
	Body *service_model.V1BuildBodyRequest
	/*BuildID
	  Unique integer identifier

	*/
	BuildID string
	/*Owner
	  Owner of the namespace

	*/
	Owner string
	/*Project
	  Project where the experiement will be assigned

	*/
	Project string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the patch build params
func (o *PatchBuildParams) WithTimeout(timeout time.Duration) *PatchBuildParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch build params
func (o *PatchBuildParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch build params
func (o *PatchBuildParams) WithContext(ctx context.Context) *PatchBuildParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch build params
func (o *PatchBuildParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch build params
func (o *PatchBuildParams) WithHTTPClient(client *http.Client) *PatchBuildParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch build params
func (o *PatchBuildParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch build params
func (o *PatchBuildParams) WithBody(body *service_model.V1BuildBodyRequest) *PatchBuildParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch build params
func (o *PatchBuildParams) SetBody(body *service_model.V1BuildBodyRequest) {
	o.Body = body
}

// WithBuildID adds the buildID to the patch build params
func (o *PatchBuildParams) WithBuildID(buildID string) *PatchBuildParams {
	o.SetBuildID(buildID)
	return o
}

// SetBuildID adds the buildId to the patch build params
func (o *PatchBuildParams) SetBuildID(buildID string) {
	o.BuildID = buildID
}

// WithOwner adds the owner to the patch build params
func (o *PatchBuildParams) WithOwner(owner string) *PatchBuildParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the patch build params
func (o *PatchBuildParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithProject adds the project to the patch build params
func (o *PatchBuildParams) WithProject(project string) *PatchBuildParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the patch build params
func (o *PatchBuildParams) SetProject(project string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *PatchBuildParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param build.id
	if err := r.SetPathParam("build.id", o.BuildID); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param project
	if err := r.SetPathParam("project", o.Project); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
