// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package build_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new build service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for build service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArchiveBuild archives build
*/
func (a *Client) ArchiveBuild(params *ArchiveBuildParams) (*ArchiveBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ArchiveBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ArchiveBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookmarkBuild bookmarks build
*/
func (a *Client) BookmarkBuild(params *BookmarkBuildParams) (*BookmarkBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookmarkBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BookmarkBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BookmarkBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookmarkBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookmarkBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBuild creates new build
*/
func (a *Client) CreateBuild(params *CreateBuildParams) (*CreateBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBuildCodeRef creates build code ref
*/
func (a *Client) CreateBuildCodeRef(params *CreateBuildCodeRefParams) (*CreateBuildCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBuildCodeRef",
		Method:             "POST",
		PathPattern:        "/api/v1/{entity.owner}/{entity.project}/builds/{entity.id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBuildCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBuildCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateBuildStatus creates new build status
*/
func (a *Client) CreateBuildStatus(params *CreateBuildStatusParams) (*CreateBuildStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBuildStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateBuildStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateBuildStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateBuildStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateBuildStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBuild deletes build
*/
func (a *Client) DeleteBuild(params *DeleteBuildParams) (*DeleteBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBuild",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteBuilds deletes builds
*/
func (a *Client) DeleteBuilds(params *DeleteBuildsParams) (*DeleteBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBuilds",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/builds/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBuild gets build
*/
func (a *Client) GetBuild(params *GetBuildParams) (*GetBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBuild",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetBuildCodeRef gets build code ref
*/
func (a *Client) GetBuildCodeRef(params *GetBuildCodeRefParams) (*GetBuildCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBuildCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBuildCodeRef",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBuildCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBuildCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetBuildCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListArchivedBuilds lists archived builds
*/
func (a *Client) ListArchivedBuilds(params *ListArchivedBuildsParams) (*ListArchivedBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArchivedBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListArchivedBuilds",
		Method:             "GET",
		PathPattern:        "/api/v1/archives/{owner}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListArchivedBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArchivedBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListArchivedBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBookmarkedBuilds lists bookmarked builds
*/
func (a *Client) ListBookmarkedBuilds(params *ListBookmarkedBuildsParams) (*ListBookmarkedBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBookmarkedBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBookmarkedBuilds",
		Method:             "GET",
		PathPattern:        "/api/v1/bookmarks/{owner}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBookmarkedBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBookmarkedBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBookmarkedBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBuildStatuses lists build statuses
*/
func (a *Client) ListBuildStatuses(params *ListBuildStatusesParams) (*ListBuildStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBuildStatuses",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBuildStatusesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBuildStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBuildStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBuilds lists builds
*/
func (a *Client) ListBuilds(params *ListBuildsParams) (*ListBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBuilds",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/builds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestartBuild restarts build
*/
func (a *Client) RestartBuild(params *RestartBuildParams) (*RestartBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestartBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestartBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreBuild restores build
*/
func (a *Client) RestoreBuild(params *RestoreBuildParams) (*RestoreBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestoreBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestoreBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopBuild stops build
*/
func (a *Client) StopBuild(params *StopBuildParams) (*StopBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopBuild",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopBuilds stops builds
*/
func (a *Client) StopBuilds(params *StopBuildsParams) (*StopBuildsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopBuildsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopBuilds",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/builds/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopBuildsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopBuildsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopBuilds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnBookmarkBuild uns bookmark build
*/
func (a *Client) UnBookmarkBuild(params *UnBookmarkBuildParams) (*UnBookmarkBuildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnBookmarkBuildParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnBookmarkBuild",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{id}/unbookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnBookmarkBuildReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnBookmarkBuildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnBookmarkBuild: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateBuild2 updates build
*/
func (a *Client) UpdateBuild2(params *UpdateBuild2Params) (*UpdateBuild2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBuild2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateBuild2",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/builds/{build.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBuild2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateBuild2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateBuild2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
