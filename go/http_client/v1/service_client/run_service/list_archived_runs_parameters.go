// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package run_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListArchivedRunsParams creates a new ListArchivedRunsParams object
// with the default values initialized.
func NewListArchivedRunsParams() *ListArchivedRunsParams {
	var ()
	return &ListArchivedRunsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListArchivedRunsParamsWithTimeout creates a new ListArchivedRunsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListArchivedRunsParamsWithTimeout(timeout time.Duration) *ListArchivedRunsParams {
	var ()
	return &ListArchivedRunsParams{

		timeout: timeout,
	}
}

// NewListArchivedRunsParamsWithContext creates a new ListArchivedRunsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListArchivedRunsParamsWithContext(ctx context.Context) *ListArchivedRunsParams {
	var ()
	return &ListArchivedRunsParams{

		Context: ctx,
	}
}

// NewListArchivedRunsParamsWithHTTPClient creates a new ListArchivedRunsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListArchivedRunsParamsWithHTTPClient(client *http.Client) *ListArchivedRunsParams {
	var ()
	return &ListArchivedRunsParams{
		HTTPClient: client,
	}
}

/*ListArchivedRunsParams contains all the parameters to send to the API endpoint
for the list archived runs operation typically these are written to a http.Request
*/
type ListArchivedRunsParams struct {

	/*User
	  Owner of the namespace

	*/
	User string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list archived runs params
func (o *ListArchivedRunsParams) WithTimeout(timeout time.Duration) *ListArchivedRunsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list archived runs params
func (o *ListArchivedRunsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list archived runs params
func (o *ListArchivedRunsParams) WithContext(ctx context.Context) *ListArchivedRunsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list archived runs params
func (o *ListArchivedRunsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list archived runs params
func (o *ListArchivedRunsParams) WithHTTPClient(client *http.Client) *ListArchivedRunsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list archived runs params
func (o *ListArchivedRunsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the list archived runs params
func (o *ListArchivedRunsParams) WithUser(user string) *ListArchivedRunsParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the list archived runs params
func (o *ListArchivedRunsParams) SetUser(user string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *ListArchivedRunsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param user
	if err := r.SetPathParam("user", o.User); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
