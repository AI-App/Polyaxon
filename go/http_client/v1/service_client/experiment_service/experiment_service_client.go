// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package experiment_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new experiment service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for experiment service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ArchiveExperiment restores build
*/
func (a *Client) ArchiveExperiment(params *ArchiveExperimentParams) (*ArchiveExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ArchiveExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ArchiveExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ArchiveExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
BookmarkExperiment uns bookmark build
*/
func (a *Client) BookmarkExperiment(params *BookmarkExperimentParams) (*BookmarkExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBookmarkExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "BookmarkExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BookmarkExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*BookmarkExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for BookmarkExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateExperiment creates new build
*/
func (a *Client) CreateExperiment(params *CreateExperimentParams) (*CreateExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateExperimentCodeRef gets experiment code ref
*/
func (a *Client) CreateExperimentCodeRef(params *CreateExperimentCodeRefParams) (*CreateExperimentCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExperimentCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateExperimentCodeRef",
		Method:             "POST",
		PathPattern:        "/v1/{entity.owner}/{entity.project}/experiments/{entity.id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExperimentCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExperimentCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateExperimentCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateExperimentStatus gets job code ref
*/
func (a *Client) CreateExperimentStatus(params *CreateExperimentStatusParams) (*CreateExperimentStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExperimentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateExperimentStatus",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExperimentStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExperimentStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateExperimentStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExperiment deletes build
*/
func (a *Client) DeleteExperiment(params *DeleteExperimentParams) (*DeleteExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteExperiment",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExperiments deletes builds
*/
func (a *Client) DeleteExperiments(params *DeleteExperimentsParams) (*DeleteExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteExperiments",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/experiments/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteExperimentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteExperiments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperiment gets build
*/
func (a *Client) GetExperiment(params *GetExperimentParams) (*GetExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExperiment",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExperimentCodeRef gets experiment code ref
*/
func (a *Client) GetExperimentCodeRef(params *GetExperimentCodeRefParams) (*GetExperimentCodeRefOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExperimentCodeRefParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetExperimentCodeRef",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/coderef",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExperimentCodeRefReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExperimentCodeRefOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetExperimentCodeRef: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListArchivedExperiments lists archived builds
*/
func (a *Client) ListArchivedExperiments(params *ListArchivedExperimentsParams) (*ListArchivedExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListArchivedExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListArchivedExperiments",
		Method:             "GET",
		PathPattern:        "/v1/archives/{owner}/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListArchivedExperimentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListArchivedExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListArchivedExperiments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListBookmarkedExperiments lists bookmarked builds
*/
func (a *Client) ListBookmarkedExperiments(params *ListBookmarkedExperimentsParams) (*ListBookmarkedExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBookmarkedExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBookmarkedExperiments",
		Method:             "GET",
		PathPattern:        "/v1/bookmarks/{owner}/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBookmarkedExperimentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListBookmarkedExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListBookmarkedExperiments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExperimentStatuses creates build code ref
*/
func (a *Client) ListExperimentStatuses(params *ListExperimentStatusesParams) (*ListExperimentStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExperimentStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListExperimentStatuses",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListExperimentStatusesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExperimentStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListExperimentStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListExperiments lists builds
*/
func (a *Client) ListExperiments(params *ListExperimentsParams) (*ListExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListExperiments",
		Method:             "GET",
		PathPattern:        "/v1/{owner}/{project}/experiments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListExperimentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListExperiments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestartExperiment restarts build
*/
func (a *Client) RestartExperiment(params *RestartExperimentParams) (*RestartExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestartExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestartExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestartExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RestoreExperiment bookmarks build
*/
func (a *Client) RestoreExperiment(params *RestoreExperimentParams) (*RestoreExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestoreExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RestoreExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RestoreExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestoreExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RestoreExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ResumeExperiment archives build
*/
func (a *Client) ResumeExperiment(params *ResumeExperimentParams) (*ResumeExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResumeExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ResumeExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ResumeExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResumeExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ResumeExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StartExperimentTensorboard lists build statuses
*/
func (a *Client) StartExperimentTensorboard(params *StartExperimentTensorboardParams) (*StartExperimentTensorboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartExperimentTensorboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StartExperimentTensorboard",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/tensorboard/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StartExperimentTensorboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartExperimentTensorboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StartExperimentTensorboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopExperiment stops build
*/
func (a *Client) StopExperiment(params *StopExperimentParams) (*StopExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopExperiment",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopExperimentTensorboard creates new build status
*/
func (a *Client) StopExperimentTensorboard(params *StopExperimentTensorboardParams) (*StopExperimentTensorboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopExperimentTensorboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopExperimentTensorboard",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/tensorboard/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopExperimentTensorboardReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopExperimentTensorboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopExperimentTensorboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
StopExperiments stops builds
*/
func (a *Client) StopExperiments(params *StopExperimentsParams) (*StopExperimentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopExperimentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StopExperiments",
		Method:             "POST",
		PathPattern:        "/v1/{owner}/{project}/experiments/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &StopExperimentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopExperimentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for StopExperiments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnBookmarkExperiment gets build status
*/
func (a *Client) UnBookmarkExperiment(params *UnBookmarkExperimentParams) (*UnBookmarkExperimentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnBookmarkExperimentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UnBookmarkExperiment",
		Method:             "DELETE",
		PathPattern:        "/v1/{owner}/{project}/experiments/{id}/unbookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnBookmarkExperimentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnBookmarkExperimentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UnBookmarkExperiment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExperiment2 updates build
*/
func (a *Client) UpdateExperiment2(params *UpdateExperiment2Params) (*UpdateExperiment2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExperiment2Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateExperiment2",
		Method:             "PUT",
		PathPattern:        "/v1/{owner}/{project}/experiments/{experiment.id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateExperiment2Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExperiment2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateExperiment2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
