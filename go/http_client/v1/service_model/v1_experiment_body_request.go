// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1ExperimentBodyRequest Request data to create/update experiment
// swagger:model v1ExperimentBodyRequest
type V1ExperimentBodyRequest struct {

	// Experiment object
	Experiment *V1Experiment `json:"experiment,omitempty"`

	// Owner of the namespace
	Owner string `json:"owner,omitempty"`

	// Project where the experiement will be assigned
	Project string `json:"project,omitempty"`
}

// Validate validates this v1 experiment body request
func (m *V1ExperimentBodyRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExperiment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1ExperimentBodyRequest) validateExperiment(formats strfmt.Registry) error {

	if swag.IsZero(m.Experiment) { // not required
		return nil
	}

	if m.Experiment != nil {
		if err := m.Experiment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("experiment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1ExperimentBodyRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1ExperimentBodyRequest) UnmarshalBinary(b []byte) error {
	var res V1ExperimentBodyRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
