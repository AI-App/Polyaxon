// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1Job Job specification
// swagger:model v1Job
type V1Job struct {

	// Optional artificat references of this entity
	ArtifactRefs *V1Dict `json:"artifact_refs,omitempty"`

	// Optional backend value of this entity
	Backend string `json:"backend,omitempty"`

	// Optional if this entity was bookmarked
	Bookmarked bool `json:"bookmarked,omitempty"`

	// Optional build job name
	BuildJob string `json:"build_job,omitempty"`

	// Optional if this job was restarted/copied/resumed
	CloningStrategy string `json:"cloning_strategy,omitempty"`

	// Optional Code reference
	CodeReference string `json:"code_reference,omitempty"`

	// Optional time when the entityt was created
	CreatedAt string `json:"created_at,omitempty"`

	// Optional data references of this entity
	DataRefs *V1Dict `json:"data_refs,omitempty"`

	// Optional if the entity has been deleted
	Deleted bool `json:"deleted,omitempty"`

	// Optional description
	Description string `json:"description,omitempty"`

	// Optional last time the entity was started
	FinishedAt string `json:"finished_at,omitempty"`

	// Optional framework name of this entity
	Framework string `json:"framework,omitempty"`

	// Unique integer identifier
	ID string `json:"id,omitempty"`

	// Optional flag to tell if this entity is managed by the platform
	IsManaged string `json:"is_managed,omitempty"`

	// Optional latest status of this entity
	LastStatus string `json:"last_status,omitempty"`

	// Optional name
	Name string `json:"name,omitempty"`

	// Optional Id of the original job
	Original string `json:"original,omitempty"`

	// Optional params of this entity
	Params *V1Dict `json:"params,omitempty"`

	// Required project name
	Project string `json:"project,omitempty"`

	// Optional a readme text describing this entity
	Readme string `json:"readme,omitempty"`

	// Optional hardware resources requested by this entity
	Resources *V1Dict `json:"resources,omitempty"`

	// Optional run enivronment tracked
	RunEnv *V1Dict `json:"run_env,omitempty"`

	// Optional content of the entity's spec
	Spec string `json:"spec,omitempty"`

	// Optional last time the entity was started
	StartedAt string `json:"started_at,omitempty"`

	// Optional Tags of this entity
	Tags []string `json:"tags"`

	// Unique name generated
	UniqueName string `json:"unique_name,omitempty"`

	// Optional last time the entity was updated
	UpdatedAt string `json:"updated_at,omitempty"`

	// Required name of user started this entity
	User string `json:"user,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this v1 job
func (m *V1Job) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunEnv(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Job) validateArtifactRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.ArtifactRefs) { // not required
		return nil
	}

	if m.ArtifactRefs != nil {
		if err := m.ArtifactRefs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact_refs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Job) validateDataRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.DataRefs) { // not required
		return nil
	}

	if m.DataRefs != nil {
		if err := m.DataRefs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("data_refs")
			}
			return err
		}
	}

	return nil
}

func (m *V1Job) validateParams(formats strfmt.Registry) error {

	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

func (m *V1Job) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *V1Job) validateRunEnv(formats strfmt.Registry) error {

	if swag.IsZero(m.RunEnv) { // not required
		return nil
	}

	if m.RunEnv != nil {
		if err := m.RunEnv.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("run_env")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Job) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Job) UnmarshalBinary(b []byte) error {
	var res V1Job
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
