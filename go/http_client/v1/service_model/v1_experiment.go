// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// V1Experiment Experiment specification
// swagger:model v1Experiment
type V1Experiment struct {

	// Optional artificat references of this entity
	ArtifactRefs map[string]string `json:"artifact_refs,omitempty"`

	// Optional backend value of this entity
	Backend string `json:"backend,omitempty"`

	// Optional if this entity was bookmarked
	Bookmarked bool `json:"bookmarked,omitempty"`

	// Optional build job name
	BuildJob string `json:"build_job,omitempty"`

	// Optional if this experiment was restarted/copied/resumed
	CloningStrategy string `json:"cloning_strategy,omitempty"`

	// Optional Code reference
	CodeReference string `json:"code_reference,omitempty"`

	// Optional time when the entityt was created
	CreatedAt string `json:"created_at,omitempty"`

	// Optional data references of this entity
	DataRefs map[string]string `json:"data_refs,omitempty"`

	// Optional if the entity has been deleted
	Deleted bool `json:"deleted,omitempty"`

	// Optional description
	Description string `json:"description,omitempty"`

	// Optional Experiment group name
	ExperimentGroup string `json:"experiment_group,omitempty"`

	// Optional last time the entity was started
	FinishedAt string `json:"finished_at,omitempty"`

	// Optional framework name of this entity
	Framework string `json:"framework,omitempty"`

	// Optional if this entity has a tensorboard
	HasTensorboard bool `json:"has_tensorboard,omitempty"`

	// Unique integer identifier
	ID string `json:"id,omitempty"`

	// Optional flag to tell if this entity is managed by the platform
	IsManaged string `json:"is_managed,omitempty"`

	// Optional last metrics of this entity
	LastMetric map[string]float64 `json:"last_metric,omitempty"`

	// Optional latest status of this entity
	LastStatus string `json:"last_status,omitempty"`

	// Optional name
	Name string `json:"name,omitempty"`

	// Optional number of jobs belonging to this entity
	NumJobs int32 `json:"num_jobs,omitempty"`

	// Optional Id of the original experiment
	Original string `json:"original,omitempty"`

	// Optional params of this entity
	Params map[string]string `json:"params,omitempty"`

	// Required project name
	Project string `json:"project,omitempty"`

	// Optional a readme text describing this entity
	Readme string `json:"readme,omitempty"`

	// Optional hardware resources requested by this entity
	Resources map[string]string `json:"resources,omitempty"`

	// Optional run enivronment tracked
	RunEnv map[string]string `json:"run_env,omitempty"`

	// Optional content of the entity's spec
	Spec string `json:"spec,omitempty"`

	// Optional last time the entity was started
	StartedAt string `json:"started_at,omitempty"`

	// Optional Tags of this entity
	Tags []string `json:"tags"`

	// Unique name generated
	UniqueName string `json:"unique_name,omitempty"`

	// Optional last time the entity was updated
	UpdatedAt string `json:"updated_at,omitempty"`

	// Required name of user started this entity
	User string `json:"user,omitempty"`

	// UUID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this v1 experiment
func (m *V1Experiment) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V1Experiment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Experiment) UnmarshalBinary(b []byte) error {
	var res V1Experiment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
