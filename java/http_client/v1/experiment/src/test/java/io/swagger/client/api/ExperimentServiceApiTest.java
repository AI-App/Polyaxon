// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Experiment service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.V1CodeReference;
import io.swagger.client.model.V1CodeReferenceBodyRequest;
import io.swagger.client.model.V1Experiment;
import io.swagger.client.model.V1ExperimentBodyRequest;
import io.swagger.client.model.V1ExperimentStatus;
import io.swagger.client.model.V1ListExperimentStatusesResponse;
import io.swagger.client.model.V1ListExperimentsResponse;
import io.swagger.client.model.V1OwnedEntityIdRequest;
import io.swagger.client.model.V1ProjectBodyRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExperimentServiceApi
 */
@Ignore
public class ExperimentServiceApiTest {

    private final ExperimentServiceApi api = new ExperimentServiceApi();

    
    /**
     * Archive experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archiveExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.archiveExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Bookmark experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookmarkExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.bookmarkExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Create new experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        V1ExperimentBodyRequest body = null;
        V1Experiment response = api.createExperiment(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Create new experiment status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createExperimentStatusTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1OwnedEntityIdRequest body = null;
        V1ExperimentStatus response = api.createExperimentStatus(owner, project, id, body);

        // TODO: test validations
    }
    
    /**
     * Delete experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.deleteExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Delete experiments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteExperimentsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1OwnedEntityIdRequest body = null;
        Object response = api.deleteExperiments(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Get experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1Experiment response = api.getExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Get experiment code ref
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExperimentCodeRefTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1CodeReference response = api.getExperimentCodeRef(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Get experiment code ref
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void greateExperimentCodeRefTest() throws ApiException {
        String entityOwner = null;
        String entityProject = null;
        String entityId = null;
        V1CodeReferenceBodyRequest body = null;
        V1CodeReference response = api.greateExperimentCodeRef(entityOwner, entityProject, entityId, body);

        // TODO: test validations
    }
    
    /**
     * List archived experiments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listArchivedExperimentsTest() throws ApiException {
        String owner = null;
        V1ListExperimentsResponse response = api.listArchivedExperiments(owner);

        // TODO: test validations
    }
    
    /**
     * List bookmarked experiments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listBookmarkedExperimentsTest() throws ApiException {
        String owner = null;
        V1ListExperimentsResponse response = api.listBookmarkedExperiments(owner);

        // TODO: test validations
    }
    
    /**
     * List experiment statuses
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExperimentStatusesTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1ListExperimentStatusesResponse response = api.listExperimentStatuses(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * List experiments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listExperimentsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1ListExperimentsResponse response = api.listExperiments(owner, project);

        // TODO: test validations
    }
    
    /**
     * Restart experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1OwnedEntityIdRequest body = null;
        V1Experiment response = api.restartExperiment(owner, project, id, body);

        // TODO: test validations
    }
    
    /**
     * Restore experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restoreExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.restoreExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Resume experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1OwnedEntityIdRequest body = null;
        V1Experiment response = api.resumeExperiment(owner, project, id, body);

        // TODO: test validations
    }
    
    /**
     * Start experiment tensorboard
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void startExperimentTensorboardTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1OwnedEntityIdRequest body = null;
        Object response = api.startExperimentTensorboard(owner, project, id, body);

        // TODO: test validations
    }
    
    /**
     * Stop experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        V1OwnedEntityIdRequest body = null;
        Object response = api.stopExperiment(owner, project, id, body);

        // TODO: test validations
    }
    
    /**
     * Stop experiment tensorboard
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopExperimentTensorboardTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.stopExperimentTensorboard(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Stop experiments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void stopExperimentsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1ProjectBodyRequest body = null;
        Object response = api.stopExperiments(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * UnBookmark experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unBookmarkExperimentTest() throws ApiException {
        String owner = null;
        String project = null;
        String id = null;
        Object response = api.unBookmarkExperiment(owner, project, id);

        // TODO: test validations
    }
    
    /**
     * Update experiment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateExperiment2Test() throws ApiException {
        String owner = null;
        String project = null;
        String experimentId = null;
        V1ExperimentBodyRequest body = null;
        V1Experiment response = api.updateExperiment2(owner, project, experimentId, body);

        // TODO: test validations
    }
    
}
