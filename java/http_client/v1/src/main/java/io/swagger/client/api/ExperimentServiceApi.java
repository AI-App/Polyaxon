// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.V1CodeReference;
import io.swagger.client.model.V1CodeReferenceBodyRequest;
import io.swagger.client.model.V1Experiment;
import io.swagger.client.model.V1ExperimentBodyRequest;
import io.swagger.client.model.V1ExperimentStatus;
import io.swagger.client.model.V1ListExperimentStatusesResponse;
import io.swagger.client.model.V1ListExperimentsResponse;
import io.swagger.client.model.V1OwnedEntityIdRequest;
import io.swagger.client.model.V1ProjectBodyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExperimentServiceApi {
    private ApiClient apiClient;

    public ExperimentServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExperimentServiceApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archiveExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archiveExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/archive"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archiveExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling archiveExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling archiveExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling archiveExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = archiveExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restore build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object archiveExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = archiveExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Restore build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> archiveExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = archiveExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restore build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archiveExperimentAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archiveExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for bookmarkExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call bookmarkExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/bookmark"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call bookmarkExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling bookmarkExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling bookmarkExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bookmarkExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = bookmarkExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * UnBookmark build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object bookmarkExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = bookmarkExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * UnBookmark build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> bookmarkExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = bookmarkExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * UnBookmark build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call bookmarkExperimentAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = bookmarkExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExperimentCall(String owner, String project, V1ExperimentBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExperimentValidateBeforeCall(String owner, String project, V1ExperimentBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling createExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling createExperiment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = createExperimentCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @return V1Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Experiment createExperiment(String owner, String project, V1ExperimentBodyRequest body) throws ApiException {
        ApiResponse<V1Experiment> resp = createExperimentWithHttpInfo(owner, project, body);
        return resp.getData();
    }

    /**
     * Create new build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Experiment> createExperimentWithHttpInfo(String owner, String project, V1ExperimentBodyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentValidateBeforeCall(owner, project, body, null, null);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentAsync(String owner, String project, V1ExperimentBodyRequest body, final ApiCallback<V1Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createExperimentCodeRef
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project where the experiement will be assigned (required)
     * @param entityId Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExperimentCodeRefCall(String entityOwner, String entityProject, String entityId, V1CodeReferenceBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{entity.owner}/{entity.project}/experiments/{entity.id}/coderef"
            .replaceAll("\\{" + "entity.owner" + "\\}", apiClient.escapeString(entityOwner.toString()))
            .replaceAll("\\{" + "entity.project" + "\\}", apiClient.escapeString(entityProject.toString()))
            .replaceAll("\\{" + "entity.id" + "\\}", apiClient.escapeString(entityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExperimentCodeRefValidateBeforeCall(String entityOwner, String entityProject, String entityId, V1CodeReferenceBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityOwner' is set
        if (entityOwner == null) {
            throw new ApiException("Missing the required parameter 'entityOwner' when calling createExperimentCodeRef(Async)");
        }
        
        // verify the required parameter 'entityProject' is set
        if (entityProject == null) {
            throw new ApiException("Missing the required parameter 'entityProject' when calling createExperimentCodeRef(Async)");
        }
        
        // verify the required parameter 'entityId' is set
        if (entityId == null) {
            throw new ApiException("Missing the required parameter 'entityId' when calling createExperimentCodeRef(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createExperimentCodeRef(Async)");
        }
        

        com.squareup.okhttp.Call call = createExperimentCodeRefCall(entityOwner, entityProject, entityId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get experiment code ref
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project where the experiement will be assigned (required)
     * @param entityId Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return V1CodeReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CodeReference createExperimentCodeRef(String entityOwner, String entityProject, String entityId, V1CodeReferenceBodyRequest body) throws ApiException {
        ApiResponse<V1CodeReference> resp = createExperimentCodeRefWithHttpInfo(entityOwner, entityProject, entityId, body);
        return resp.getData();
    }

    /**
     * Get experiment code ref
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project where the experiement will be assigned (required)
     * @param entityId Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1CodeReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CodeReference> createExperimentCodeRefWithHttpInfo(String entityOwner, String entityProject, String entityId, V1CodeReferenceBodyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentCodeRefValidateBeforeCall(entityOwner, entityProject, entityId, body, null, null);
        Type localVarReturnType = new TypeToken<V1CodeReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get experiment code ref (asynchronously)
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project where the experiement will be assigned (required)
     * @param entityId Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentCodeRefAsync(String entityOwner, String entityProject, String entityId, V1CodeReferenceBodyRequest body, final ApiCallback<V1CodeReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentCodeRefValidateBeforeCall(entityOwner, entityProject, entityId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CodeReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createExperimentStatus
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createExperimentStatusCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/statuses"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createExperimentStatusValidateBeforeCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling createExperimentStatus(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling createExperimentStatus(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createExperimentStatus(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createExperimentStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = createExperimentStatusCall(owner, project, id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get job code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return V1ExperimentStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ExperimentStatus createExperimentStatus(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<V1ExperimentStatus> resp = createExperimentStatusWithHttpInfo(owner, project, id, body);
        return resp.getData();
    }

    /**
     * Get job code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1ExperimentStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ExperimentStatus> createExperimentStatusWithHttpInfo(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = createExperimentStatusValidateBeforeCall(owner, project, id, body, null, null);
        Type localVarReturnType = new TypeToken<V1ExperimentStatus>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get job code ref (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createExperimentStatusAsync(String owner, String project, String id, V1OwnedEntityIdRequest body, final ApiCallback<V1ExperimentStatus> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createExperimentStatusValidateBeforeCall(owner, project, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ExperimentStatus>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling deleteExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = deleteExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Delete build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteExperiments
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentsCall(String owner, String project, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/delete"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteExperimentsValidateBeforeCall(String owner, String project, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling deleteExperiments(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling deleteExperiments(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteExperimentsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object deleteExperiments(String owner, String project, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<Object> resp = deleteExperimentsWithHttpInfo(owner, project, body);
        return resp.getData();
    }

    /**
     * Delete builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> deleteExperimentsWithHttpInfo(String owner, String project, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = deleteExperimentsValidateBeforeCall(owner, project, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete builds (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteExperimentsAsync(String owner, String project, V1OwnedEntityIdRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteExperimentsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return V1Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Experiment getExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<V1Experiment> resp = getExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Get build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;V1Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Experiment> getExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentAsync(String owner, String project, String id, final ApiCallback<V1Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getExperimentCodeRef
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getExperimentCodeRefCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/coderef"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getExperimentCodeRefValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getExperimentCodeRef(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getExperimentCodeRef(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getExperimentCodeRef(Async)");
        }
        

        com.squareup.okhttp.Call call = getExperimentCodeRefCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get experiment code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return V1CodeReference
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1CodeReference getExperimentCodeRef(String owner, String project, String id) throws ApiException {
        ApiResponse<V1CodeReference> resp = getExperimentCodeRefWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Get experiment code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;V1CodeReference&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1CodeReference> getExperimentCodeRefWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = getExperimentCodeRefValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<V1CodeReference>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get experiment code ref (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getExperimentCodeRefAsync(String owner, String project, String id, final ApiCallback<V1CodeReference> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getExperimentCodeRefValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1CodeReference>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listArchivedExperiments
     * @param owner Owner of the namespace (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listArchivedExperimentsCall(String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/archives/{owner}/experiments"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listArchivedExperimentsValidateBeforeCall(String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listArchivedExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = listArchivedExperimentsCall(owner, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List archived builds
     * 
     * @param owner Owner of the namespace (required)
     * @return V1ListExperimentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListExperimentsResponse listArchivedExperiments(String owner) throws ApiException {
        ApiResponse<V1ListExperimentsResponse> resp = listArchivedExperimentsWithHttpInfo(owner);
        return resp.getData();
    }

    /**
     * List archived builds
     * 
     * @param owner Owner of the namespace (required)
     * @return ApiResponse&lt;V1ListExperimentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListExperimentsResponse> listArchivedExperimentsWithHttpInfo(String owner) throws ApiException {
        com.squareup.okhttp.Call call = listArchivedExperimentsValidateBeforeCall(owner, null, null);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List archived builds (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listArchivedExperimentsAsync(String owner, final ApiCallback<V1ListExperimentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listArchivedExperimentsValidateBeforeCall(owner, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listBookmarkedExperiments
     * @param owner Owner of the namespace (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listBookmarkedExperimentsCall(String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/bookmarks/{owner}/experiments"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listBookmarkedExperimentsValidateBeforeCall(String owner, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listBookmarkedExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = listBookmarkedExperimentsCall(owner, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List bookmarked builds
     * 
     * @param owner Owner of the namespace (required)
     * @return V1ListExperimentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListExperimentsResponse listBookmarkedExperiments(String owner) throws ApiException {
        ApiResponse<V1ListExperimentsResponse> resp = listBookmarkedExperimentsWithHttpInfo(owner);
        return resp.getData();
    }

    /**
     * List bookmarked builds
     * 
     * @param owner Owner of the namespace (required)
     * @return ApiResponse&lt;V1ListExperimentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListExperimentsResponse> listBookmarkedExperimentsWithHttpInfo(String owner) throws ApiException {
        com.squareup.okhttp.Call call = listBookmarkedExperimentsValidateBeforeCall(owner, null, null);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List bookmarked builds (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listBookmarkedExperimentsAsync(String owner, final ApiCallback<V1ListExperimentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listBookmarkedExperimentsValidateBeforeCall(owner, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listExperimentStatuses
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listExperimentStatusesCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/statuses"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listExperimentStatusesValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listExperimentStatuses(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling listExperimentStatuses(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listExperimentStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = listExperimentStatusesCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create build code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return V1ListExperimentStatusesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListExperimentStatusesResponse listExperimentStatuses(String owner, String project, String id) throws ApiException {
        ApiResponse<V1ListExperimentStatusesResponse> resp = listExperimentStatusesWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Create build code ref
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;V1ListExperimentStatusesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListExperimentStatusesResponse> listExperimentStatusesWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = listExperimentStatusesValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<V1ListExperimentStatusesResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create build code ref (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listExperimentStatusesAsync(String owner, String project, String id, final ApiCallback<V1ListExperimentStatusesResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listExperimentStatusesValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListExperimentStatusesResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listExperiments
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listExperimentsCall(String owner, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listExperimentsValidateBeforeCall(String owner, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling listExperiments(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling listExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = listExperimentsCall(owner, project, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @return V1ListExperimentsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListExperimentsResponse listExperiments(String owner, String project) throws ApiException {
        ApiResponse<V1ListExperimentsResponse> resp = listExperimentsWithHttpInfo(owner, project);
        return resp.getData();
    }

    /**
     * List builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @return ApiResponse&lt;V1ListExperimentsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListExperimentsResponse> listExperimentsWithHttpInfo(String owner, String project) throws ApiException {
        com.squareup.okhttp.Call call = listExperimentsValidateBeforeCall(owner, project, null, null);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List builds (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listExperimentsAsync(String owner, String project, final ApiCallback<V1ListExperimentsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listExperimentsValidateBeforeCall(owner, project, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListExperimentsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartExperimentCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/restart"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartExperimentValidateBeforeCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling restartExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling restartExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling restartExperiment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling restartExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = restartExperimentCall(owner, project, id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restart build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return V1Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Experiment restartExperiment(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<V1Experiment> resp = restartExperimentWithHttpInfo(owner, project, id, body);
        return resp.getData();
    }

    /**
     * Restart build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Experiment> restartExperimentWithHttpInfo(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = restartExperimentValidateBeforeCall(owner, project, id, body, null, null);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartExperimentAsync(String owner, String project, String id, V1OwnedEntityIdRequest body, final ApiCallback<V1Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartExperimentValidateBeforeCall(owner, project, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restoreExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restoreExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/restore"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restoreExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling restoreExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling restoreExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling restoreExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = restoreExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bookmark build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object restoreExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = restoreExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Bookmark build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> restoreExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = restoreExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Bookmark build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restoreExperimentAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restoreExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resumeExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resumeExperimentCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/resume"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resumeExperimentValidateBeforeCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling resumeExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling resumeExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resumeExperiment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling resumeExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = resumeExperimentCall(owner, project, id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return V1Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Experiment resumeExperiment(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<V1Experiment> resp = resumeExperimentWithHttpInfo(owner, project, id, body);
        return resp.getData();
    }

    /**
     * Archive build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Experiment> resumeExperimentWithHttpInfo(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = resumeExperimentValidateBeforeCall(owner, project, id, body, null, null);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resumeExperimentAsync(String owner, String project, String id, V1OwnedEntityIdRequest body, final ApiCallback<V1Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resumeExperimentValidateBeforeCall(owner, project, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startExperimentTensorboard
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startExperimentTensorboardCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/tensorboard/start"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startExperimentTensorboardValidateBeforeCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling startExperimentTensorboard(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling startExperimentTensorboard(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startExperimentTensorboard(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling startExperimentTensorboard(Async)");
        }
        

        com.squareup.okhttp.Call call = startExperimentTensorboardCall(owner, project, id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List build statuses
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object startExperimentTensorboard(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<Object> resp = startExperimentTensorboardWithHttpInfo(owner, project, id, body);
        return resp.getData();
    }

    /**
     * List build statuses
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> startExperimentTensorboardWithHttpInfo(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = startExperimentTensorboardValidateBeforeCall(owner, project, id, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List build statuses (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startExperimentTensorboardAsync(String owner, String project, String id, V1OwnedEntityIdRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startExperimentTensorboardValidateBeforeCall(owner, project, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopExperimentCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopExperimentValidateBeforeCall(String owner, String project, String id, V1OwnedEntityIdRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling stopExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling stopExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopExperiment(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling stopExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = stopExperimentCall(owner, project, id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object stopExperiment(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        ApiResponse<Object> resp = stopExperimentWithHttpInfo(owner, project, id, body);
        return resp.getData();
    }

    /**
     * Stop build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> stopExperimentWithHttpInfo(String owner, String project, String id, V1OwnedEntityIdRequest body) throws ApiException {
        com.squareup.okhttp.Call call = stopExperimentValidateBeforeCall(owner, project, id, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopExperimentAsync(String owner, String project, String id, V1OwnedEntityIdRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopExperimentValidateBeforeCall(owner, project, id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopExperimentTensorboard
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopExperimentTensorboardCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/tensorboard/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopExperimentTensorboardValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling stopExperimentTensorboard(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling stopExperimentTensorboard(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopExperimentTensorboard(Async)");
        }
        

        com.squareup.okhttp.Call call = stopExperimentTensorboardCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new build status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object stopExperimentTensorboard(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = stopExperimentTensorboardWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Create new build status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> stopExperimentTensorboardWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = stopExperimentTensorboardValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new build status (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopExperimentTensorboardAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopExperimentTensorboardValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopExperiments
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopExperimentsCall(String owner, String project, V1ProjectBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopExperimentsValidateBeforeCall(String owner, String project, V1ProjectBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling stopExperiments(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling stopExperiments(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling stopExperiments(Async)");
        }
        

        com.squareup.okhttp.Call call = stopExperimentsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object stopExperiments(String owner, String project, V1ProjectBodyRequest body) throws ApiException {
        ApiResponse<Object> resp = stopExperimentsWithHttpInfo(owner, project, body);
        return resp.getData();
    }

    /**
     * Stop builds
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> stopExperimentsWithHttpInfo(String owner, String project, V1ProjectBodyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = stopExperimentsValidateBeforeCall(owner, project, body, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop builds (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopExperimentsAsync(String owner, String project, V1ProjectBodyRequest body, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopExperimentsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unBookmarkExperiment
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unBookmarkExperimentCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{id}/unbookmark"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unBookmarkExperimentValidateBeforeCall(String owner, String project, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling unBookmarkExperiment(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling unBookmarkExperiment(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unBookmarkExperiment(Async)");
        }
        

        com.squareup.okhttp.Call call = unBookmarkExperimentCall(owner, project, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get build status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Object unBookmarkExperiment(String owner, String project, String id) throws ApiException {
        ApiResponse<Object> resp = unBookmarkExperimentWithHttpInfo(owner, project, id);
        return resp.getData();
    }

    /**
     * Get build status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Object> unBookmarkExperimentWithHttpInfo(String owner, String project, String id) throws ApiException {
        com.squareup.okhttp.Call call = unBookmarkExperimentValidateBeforeCall(owner, project, id, null, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get build status (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param id Unique integer identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unBookmarkExperimentAsync(String owner, String project, String id, final ApiCallback<Object> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unBookmarkExperimentValidateBeforeCall(owner, project, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateExperiment2
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param experimentId Unique integer identifier (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateExperiment2Call(String owner, String project, String experimentId, V1ExperimentBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/{owner}/{project}/experiments/{experiment.id}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "experiment.id" + "\\}", apiClient.escapeString(experimentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateExperiment2ValidateBeforeCall(String owner, String project, String experimentId, V1ExperimentBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling updateExperiment2(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling updateExperiment2(Async)");
        }
        
        // verify the required parameter 'experimentId' is set
        if (experimentId == null) {
            throw new ApiException("Missing the required parameter 'experimentId' when calling updateExperiment2(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateExperiment2(Async)");
        }
        

        com.squareup.okhttp.Call call = updateExperiment2Call(owner, project, experimentId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param experimentId Unique integer identifier (required)
     * @param body  (required)
     * @return V1Experiment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Experiment updateExperiment2(String owner, String project, String experimentId, V1ExperimentBodyRequest body) throws ApiException {
        ApiResponse<V1Experiment> resp = updateExperiment2WithHttpInfo(owner, project, experimentId, body);
        return resp.getData();
    }

    /**
     * Update build
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param experimentId Unique integer identifier (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1Experiment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Experiment> updateExperiment2WithHttpInfo(String owner, String project, String experimentId, V1ExperimentBodyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = updateExperiment2ValidateBeforeCall(owner, project, experimentId, body, null, null);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update build (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param experimentId Unique integer identifier (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateExperiment2Async(String owner, String project, String experimentId, V1ExperimentBodyRequest body, final ApiCallback<V1Experiment> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateExperiment2ValidateBeforeCall(owner, project, experimentId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Experiment>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
