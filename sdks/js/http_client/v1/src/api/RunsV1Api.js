// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.71
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RuntimeError', 'model/V1ArtifactTree', 'model/V1Auth', 'model/V1EntityNotificationBody', 'model/V1EntityStatusBodyRequest', 'model/V1EventsResponse', 'model/V1ListRunArtifactsResponse', 'model/V1ListRunsResponse', 'model/V1Logs', 'model/V1OperationBody', 'model/V1ProjectEntityResourceRequest', 'model/V1Run', 'model/V1RunArtifact', 'model/V1RunArtifacts', 'model/V1RunSettings', 'model/V1Status', 'model/V1Uuids'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RuntimeError'), require('../model/V1ArtifactTree'), require('../model/V1Auth'), require('../model/V1EntityNotificationBody'), require('../model/V1EntityStatusBodyRequest'), require('../model/V1EventsResponse'), require('../model/V1ListRunArtifactsResponse'), require('../model/V1ListRunsResponse'), require('../model/V1Logs'), require('../model/V1OperationBody'), require('../model/V1ProjectEntityResourceRequest'), require('../model/V1Run'), require('../model/V1RunArtifact'), require('../model/V1RunArtifacts'), require('../model/V1RunSettings'), require('../model/V1Status'), require('../model/V1Uuids'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.RunsV1Api = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.RuntimeError, root.PolyaxonSdk.V1ArtifactTree, root.PolyaxonSdk.V1Auth, root.PolyaxonSdk.V1EntityNotificationBody, root.PolyaxonSdk.V1EntityStatusBodyRequest, root.PolyaxonSdk.V1EventsResponse, root.PolyaxonSdk.V1ListRunArtifactsResponse, root.PolyaxonSdk.V1ListRunsResponse, root.PolyaxonSdk.V1Logs, root.PolyaxonSdk.V1OperationBody, root.PolyaxonSdk.V1ProjectEntityResourceRequest, root.PolyaxonSdk.V1Run, root.PolyaxonSdk.V1RunArtifact, root.PolyaxonSdk.V1RunArtifacts, root.PolyaxonSdk.V1RunSettings, root.PolyaxonSdk.V1Status, root.PolyaxonSdk.V1Uuids);
  }
}(this, function(ApiClient, RuntimeError, V1ArtifactTree, V1Auth, V1EntityNotificationBody, V1EntityStatusBodyRequest, V1EventsResponse, V1ListRunArtifactsResponse, V1ListRunsResponse, V1Logs, V1OperationBody, V1ProjectEntityResourceRequest, V1Run, V1RunArtifact, V1RunArtifacts, V1RunSettings, V1Status, V1Uuids) {
  'use strict';

  /**
   * RunsV1 service.
   * @module api/RunsV1Api
   * @version 1.0.71
   */

  /**
   * Constructs a new RunsV1Api. 
   * @alias module:api/RunsV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getRunArtifact operation.
     * @callback module:api/RunsV1Api~getRunArtifactCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifact
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Artifact filepath.
     * @param {Boolean} opts.stream Whether to stream the file.
     * @param {module:api/RunsV1Api~getRunArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getRunArtifact = function(namespace, owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getRunArtifact");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getRunArtifact");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getRunArtifact");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRunArtifact");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
        'stream': opts['stream'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRunArtifacts operation.
     * @callback module:api/RunsV1Api~getRunArtifactsCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifacts
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the experiement will be assigned
     * @param {String} uuid Unique integer identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Artifact filepath.
     * @param {module:api/RunsV1Api~getRunArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getRunArtifacts = function(namespace, owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling getRunArtifacts");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling getRunArtifacts");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling getRunArtifacts");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getRunArtifacts");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ArchiveRun operation.
     * @callback module:api/RunsV1Api~runsV1ArchiveRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1ArchiveRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1ArchiveRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1ArchiveRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1ArchiveRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1ArchiveRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1BookmarkRun operation.
     * @callback module:api/RunsV1Api~runsV1BookmarkRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1BookmarkRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1BookmarkRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1BookmarkRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1BookmarkRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1BookmarkRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1BookmarkRuns operation.
     * @callback module:api/RunsV1Api~runsV1BookmarkRunsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1Uuids} body Uuids of the entities
     * @param {module:api/RunsV1Api~runsV1BookmarkRunsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1BookmarkRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1BookmarkRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1BookmarkRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1BookmarkRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1CollectRunLogs operation.
     * @callback module:api/RunsV1Api~runsV1CollectRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Collect run logs
     * @param {String} namespace 
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1CollectRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1CollectRunLogs = function(namespace, owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1CollectRunLogs");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1CollectRunLogs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1CollectRunLogs");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1CollectRunLogs");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/_internal/{owner}/{project}/runs/{uuid}/logs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1CopyRun operation.
     * @callback module:api/RunsV1Api~runsV1CopyRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart run with copy
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project
     * @param {String} entity_uuid Uuid identifier of the entity
     * @param {module:model/V1Run} body Run object
     * @param {module:api/RunsV1Api~runsV1CopyRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1CopyRun = function(entity_owner, entity_project, entity_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling runsV1CopyRun");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling runsV1CopyRun");
      }

      // verify the required parameter 'entity_uuid' is set
      if (entity_uuid === undefined || entity_uuid === null) {
        throw new Error("Missing the required parameter 'entity_uuid' when calling runsV1CopyRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1CopyRun");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.uuid': entity_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/copy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1CreateRun operation.
     * @callback module:api/RunsV1Api~runsV1CreateRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {module:model/V1OperationBody} body operation object
     * @param {module:api/RunsV1Api~runsV1CreateRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1CreateRun = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1CreateRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1CreateRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1CreateRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1CreateRunArtifactsLineage operation.
     * @callback module:api/RunsV1Api~runsV1CreateRunArtifactsLineageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create bulk run run artifacts lineage
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/V1RunArtifacts} body Run Artifacts
     * @param {module:api/RunsV1Api~runsV1CreateRunArtifactsLineageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1CreateRunArtifactsLineage = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1CreateRunArtifactsLineage");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1CreateRunArtifactsLineage");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1CreateRunArtifactsLineage");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1CreateRunArtifactsLineage");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1CreateRunStatus operation.
     * @callback module:api/RunsV1Api~runsV1CreateRunStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new run status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/V1EntityStatusBodyRequest} body 
     * @param {module:api/RunsV1Api~runsV1CreateRunStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.runsV1CreateRunStatus = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1CreateRunStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1CreateRunStatus");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1CreateRunStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1CreateRunStatus");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/statuses', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1DeleteRun operation.
     * @callback module:api/RunsV1Api~runsV1DeleteRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1DeleteRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1DeleteRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1DeleteRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1DeleteRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1DeleteRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1DeleteRunArtifactLineage operation.
     * @callback module:api/RunsV1Api~runsV1DeleteRunArtifactLineageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete run artifact lineage
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {String} name Artifact name
     * @param {Object} opts Optional parameters
     * @param {String} opts.namespace namespace.
     * @param {module:api/RunsV1Api~runsV1DeleteRunArtifactLineageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1DeleteRunArtifactLineage = function(owner, project, uuid, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1DeleteRunArtifactLineage");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1DeleteRunArtifactLineage");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1DeleteRunArtifactLineage");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling runsV1DeleteRunArtifactLineage");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid,
        'name': name
      };
      var queryParams = {
        'namespace': opts['namespace'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1DeleteRuns operation.
     * @callback module:api/RunsV1Api~runsV1DeleteRunsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1Uuids} body Uuids of the entities
     * @param {module:api/RunsV1Api~runsV1DeleteRunsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1DeleteRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1DeleteRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1DeleteRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1DeleteRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/delete', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetMultiRunEvents operation.
     * @callback module:api/RunsV1Api~runsV1GetMultiRunEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get multi runs events
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {module:model/String} kind The artifact kind
     * @param {Object} opts Optional parameters
     * @param {String} opts.names Names query param.
     * @param {String} opts.runs Runs query param.
     * @param {String} opts.orient Orient query param.
     * @param {module:api/RunsV1Api~runsV1GetMultiRunEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EventsResponse}
     */
    this.runsV1GetMultiRunEvents = function(namespace, owner, project, kind, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1GetMultiRunEvents");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetMultiRunEvents");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetMultiRunEvents");
      }

      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling runsV1GetMultiRunEvents");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'kind': kind
      };
      var queryParams = {
        'names': opts['names'],
        'runs': opts['runs'],
        'orient': opts['orient'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1EventsResponse;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRun operation.
     * @callback module:api/RunsV1Api~runsV1GetRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1GetRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1GetRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunArtifactLineage operation.
     * @callback module:api/RunsV1Api~runsV1GetRunArtifactLineageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1RunArtifact} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifacts lineage
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {String} name Artifact name
     * @param {Object} opts Optional parameters
     * @param {String} opts.namespace namespace.
     * @param {module:api/RunsV1Api~runsV1GetRunArtifactLineageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1RunArtifact}
     */
    this.runsV1GetRunArtifactLineage = function(owner, project, uuid, name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunArtifactLineage");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunArtifactLineage");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactLineage");
      }

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling runsV1GetRunArtifactLineage");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid,
        'name': name
      };
      var queryParams = {
        'namespace': opts['namespace'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1RunArtifact;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunArtifactsLineage operation.
     * @callback module:api/RunsV1Api~runsV1GetRunArtifactsLineageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunArtifactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifacts lineage
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1GetRunArtifactsLineageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunArtifactsResponse}
     */
    this.runsV1GetRunArtifactsLineage = function(owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsLineage");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunArtifactsLineage");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsLineage");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunArtifactsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunArtifactsLineageNames operation.
     * @callback module:api/RunsV1Api~runsV1GetRunArtifactsLineageNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunArtifactsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifacts lineage names
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1GetRunArtifactsLineageNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunArtifactsResponse}
     */
    this.runsV1GetRunArtifactsLineageNames = function(owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsLineageNames");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunArtifactsLineageNames");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsLineageNames");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunArtifactsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunArtifactsTree operation.
     * @callback module:api/RunsV1Api~runsV1GetRunArtifactsTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ArtifactTree} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run artifacts tree
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {String} opts.path Path query param.
     * @param {module:api/RunsV1Api~runsV1GetRunArtifactsTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ArtifactTree}
     */
    this.runsV1GetRunArtifactsTree = function(namespace, owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1GetRunArtifactsTree");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsTree");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunArtifactsTree");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsTree");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ArtifactTree;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunEvents operation.
     * @callback module:api/RunsV1Api~runsV1GetRunEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run events
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/String} kind The artifact kind
     * @param {Object} opts Optional parameters
     * @param {String} opts.names Names query param.
     * @param {String} opts.orient Orient query param.
     * @param {module:api/RunsV1Api~runsV1GetRunEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EventsResponse}
     */
    this.runsV1GetRunEvents = function(namespace, owner, project, uuid, kind, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1GetRunEvents");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunEvents");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunEvents");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunEvents");
      }

      // verify the required parameter 'kind' is set
      if (kind === undefined || kind === null) {
        throw new Error("Missing the required parameter 'kind' when calling runsV1GetRunEvents");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid,
        'kind': kind
      };
      var queryParams = {
        'names': opts['names'],
        'orient': opts['orient'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1EventsResponse;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunLogs operation.
     * @callback module:api/RunsV1Api~runsV1GetRunLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Logs} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run logs
     * @param {String} namespace 
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {Date} opts.last_time last time.
     * @param {String} opts.last_file last file.
     * @param {module:api/RunsV1Api~runsV1GetRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Logs}
     */
    this.runsV1GetRunLogs = function(namespace, owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1GetRunLogs");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunLogs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunLogs");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunLogs");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'last_time': opts['last_time'],
        'last_file': opts['last_file'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Logs;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunNamespace operation.
     * @callback module:api/RunsV1Api~runsV1GetRunNamespaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1RunSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Run namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1GetRunNamespaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1RunSettings}
     */
    this.runsV1GetRunNamespace = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunNamespace");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunNamespace");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunNamespace");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1RunSettings;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/namespace', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunResources operation.
     * @callback module:api/RunsV1Api~runsV1GetRunResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1EventsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run resources events
     * @param {String} namespace namespace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {Object} opts Optional parameters
     * @param {String} opts.names Names query param.
     * @param {Boolean} opts.tail Query param flag to tail the values.
     * @param {module:api/RunsV1Api~runsV1GetRunResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1EventsResponse}
     */
    this.runsV1GetRunResources = function(namespace, owner, project, uuid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1GetRunResources");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunResources");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunResources");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunResources");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'names': opts['names'],
        'tail': opts['tail'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1EventsResponse;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/resources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunSettings operation.
     * @callback module:api/RunsV1Api~runsV1GetRunSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1RunSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Run settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1GetRunSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1RunSettings}
     */
    this.runsV1GetRunSettings = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunSettings");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunSettings");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunSettings");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1RunSettings;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunStatuses operation.
     * @callback module:api/RunsV1Api~runsV1GetRunStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Status} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get run status
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1GetRunStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Status}
     */
    this.runsV1GetRunStatuses = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunStatuses");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunStatuses");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1GetRunStatuses");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Status;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/statuses', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1GetRunsArtifactsLineage operation.
     * @callback module:api/RunsV1Api~runsV1GetRunsArtifactsLineageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get runs artifacts lineage
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/RunsV1Api~runsV1GetRunsArtifactsLineageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1GetRunsArtifactsLineage = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1GetRunsArtifactsLineage");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1GetRunsArtifactsLineage");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/artifacts_lineage', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ImpersonateToken operation.
     * @callback module:api/RunsV1Api~runsV1ImpersonateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Auth} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Impersonate run token
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1ImpersonateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Auth}
     */
    this.runsV1ImpersonateToken = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1ImpersonateToken");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1ImpersonateToken");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1ImpersonateToken");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Auth;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/impersonate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1InvalidateRun operation.
     * @callback module:api/RunsV1Api~runsV1InvalidateRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/V1ProjectEntityResourceRequest} body 
     * @param {module:api/RunsV1Api~runsV1InvalidateRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1InvalidateRun = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1InvalidateRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1InvalidateRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1InvalidateRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1InvalidateRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/invalidate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1InvalidateRuns operation.
     * @callback module:api/RunsV1Api~runsV1InvalidateRunsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1Uuids} body Uuids of the entities
     * @param {module:api/RunsV1Api~runsV1InvalidateRunsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1InvalidateRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1InvalidateRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1InvalidateRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1InvalidateRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/invalidate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ListArchivedRuns operation.
     * @callback module:api/RunsV1Api~runsV1ListArchivedRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived runs for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1ListArchivedRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.runsV1ListArchivedRuns = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling runsV1ListArchivedRuns");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/archives/{user}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ListBookmarkedRuns operation.
     * @callback module:api/RunsV1Api~runsV1ListBookmarkedRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked runs for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1ListBookmarkedRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.runsV1ListBookmarkedRuns = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling runsV1ListBookmarkedRuns");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/bookmarks/{user}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ListRuns operation.
     * @callback module:api/RunsV1Api~runsV1ListRunsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1ListRunsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.runsV1ListRuns = function(owner, project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1ListRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1ListRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ListRunsIo operation.
     * @callback module:api/RunsV1Api~runsV1ListRunsIoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListRunsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List runs io
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/RunsV1Api~runsV1ListRunsIoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListRunsResponse}
     */
    this.runsV1ListRunsIo = function(owner, project, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1ListRunsIo");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1ListRunsIo");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListRunsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/io', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1NotifyRunStatus operation.
     * @callback module:api/RunsV1Api~runsV1NotifyRunStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Notify run status
     * @param {String} namespace Na,espace
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/V1EntityNotificationBody} body 
     * @param {module:api/RunsV1Api~runsV1NotifyRunStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1NotifyRunStatus = function(namespace, owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling runsV1NotifyRunStatus");
      }

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1NotifyRunStatus");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1NotifyRunStatus");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1NotifyRunStatus");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1NotifyRunStatus");
      }


      var pathParams = {
        'namespace': namespace,
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/notify', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1PatchRun operation.
     * @callback module:api/RunsV1Api~runsV1PatchRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} run_uuid UUID
     * @param {module:model/V1Run} body Run object
     * @param {module:api/RunsV1Api~runsV1PatchRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1PatchRun = function(owner, project, run_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1PatchRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1PatchRun");
      }

      // verify the required parameter 'run_uuid' is set
      if (run_uuid === undefined || run_uuid === null) {
        throw new Error("Missing the required parameter 'run_uuid' when calling runsV1PatchRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1PatchRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'run.uuid': run_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{run.uuid}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1RestartRun operation.
     * @callback module:api/RunsV1Api~runsV1RestartRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart run
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project
     * @param {String} entity_uuid Uuid identifier of the entity
     * @param {module:model/V1Run} body Run object
     * @param {module:api/RunsV1Api~runsV1RestartRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1RestartRun = function(entity_owner, entity_project, entity_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling runsV1RestartRun");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling runsV1RestartRun");
      }

      // verify the required parameter 'entity_uuid' is set
      if (entity_uuid === undefined || entity_uuid === null) {
        throw new Error("Missing the required parameter 'entity_uuid' when calling runsV1RestartRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1RestartRun");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.uuid': entity_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/restart', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1RestoreRun operation.
     * @callback module:api/RunsV1Api~runsV1RestoreRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1RestoreRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1RestoreRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1RestoreRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1RestoreRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1RestoreRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1ResumeRun operation.
     * @callback module:api/RunsV1Api~runsV1ResumeRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume run
     * @param {String} entity_owner Owner of the namespace
     * @param {String} entity_project Project
     * @param {String} entity_uuid Uuid identifier of the entity
     * @param {module:model/V1Run} body Run object
     * @param {module:api/RunsV1Api~runsV1ResumeRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1ResumeRun = function(entity_owner, entity_project, entity_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'entity_owner' is set
      if (entity_owner === undefined || entity_owner === null) {
        throw new Error("Missing the required parameter 'entity_owner' when calling runsV1ResumeRun");
      }

      // verify the required parameter 'entity_project' is set
      if (entity_project === undefined || entity_project === null) {
        throw new Error("Missing the required parameter 'entity_project' when calling runsV1ResumeRun");
      }

      // verify the required parameter 'entity_uuid' is set
      if (entity_uuid === undefined || entity_uuid === null) {
        throw new Error("Missing the required parameter 'entity_uuid' when calling runsV1ResumeRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1ResumeRun");
      }


      var pathParams = {
        'entity.owner': entity_owner,
        'entity.project': entity_project,
        'entity.uuid': entity_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/resume', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1StartRunTensorboard operation.
     * @callback module:api/RunsV1Api~runsV1StartRunTensorboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start run tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:model/V1ProjectEntityResourceRequest} body 
     * @param {module:api/RunsV1Api~runsV1StartRunTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1StartRunTensorboard = function(owner, project, uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1StartRunTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1StartRunTensorboard");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1StartRunTensorboard");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1StartRunTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/start', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1StopRun operation.
     * @callback module:api/RunsV1Api~runsV1StopRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1StopRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1StopRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1StopRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1StopRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1StopRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1StopRunTensorboard operation.
     * @callback module:api/RunsV1Api~runsV1StopRunTensorboardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop run tensorboard
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1StopRunTensorboardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1StopRunTensorboard = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1StopRunTensorboard");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1StopRunTensorboard");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1StopRunTensorboard");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1StopRuns operation.
     * @callback module:api/RunsV1Api~runsV1StopRunsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1Uuids} body Uuids of the entities
     * @param {module:api/RunsV1Api~runsV1StopRunsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1StopRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1StopRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1StopRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1StopRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/stop', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1TagRuns operation.
     * @callback module:api/RunsV1Api~runsV1TagRunsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tag runs
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:model/V1Uuids} body Uuids of the entities
     * @param {module:api/RunsV1Api~runsV1TagRunsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1TagRuns = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1TagRuns");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1TagRuns");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1TagRuns");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/tag', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1UnbookmarkRun operation.
     * @callback module:api/RunsV1Api~runsV1UnbookmarkRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbookmark run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project
     * @param {String} uuid Uuid identifier of the entity
     * @param {module:api/RunsV1Api~runsV1UnbookmarkRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.runsV1UnbookmarkRun = function(owner, project, uuid, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1UnbookmarkRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1UnbookmarkRun");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling runsV1UnbookmarkRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runsV1UpdateRun operation.
     * @callback module:api/RunsV1Api~runsV1UpdateRunCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Run} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update run
     * @param {String} owner Owner of the namespace
     * @param {String} project Project where the run will be assigned
     * @param {String} run_uuid UUID
     * @param {module:model/V1Run} body Run object
     * @param {module:api/RunsV1Api~runsV1UpdateRunCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Run}
     */
    this.runsV1UpdateRun = function(owner, project, run_uuid, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling runsV1UpdateRun");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling runsV1UpdateRun");
      }

      // verify the required parameter 'run_uuid' is set
      if (run_uuid === undefined || run_uuid === null) {
        throw new Error("Missing the required parameter 'run_uuid' when calling runsV1UpdateRun");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling runsV1UpdateRun");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'run.uuid': run_uuid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Run;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{run.uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadRunArtifact operation.
     * @callback module:api/RunsV1Api~uploadRunArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an artifact file to a store via run access
     * @param {String} owner Owner of the namespace
     * @param {String} project Project having access to the store
     * @param {String} uuid Unique integer identifier of the entity
     * @param {File} uploadfile The file to upload.
     * @param {Object} opts Optional parameters
     * @param {String} opts.path File path query params.
     * @param {Boolean} opts.overwrite File path query params.
     * @param {module:api/RunsV1Api~uploadRunArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.uploadRunArtifact = function(owner, project, uuid, uploadfile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling uploadRunArtifact");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling uploadRunArtifact");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling uploadRunArtifact");
      }

      // verify the required parameter 'uploadfile' is set
      if (uploadfile === undefined || uploadfile === null) {
        throw new Error("Missing the required parameter 'uploadfile' when calling uploadRunArtifact");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
        'overwrite': opts['overwrite'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'uploadfile': uploadfile
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/artifacts/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadRunLogs operation.
     * @callback module:api/RunsV1Api~uploadRunLogsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a logs file to a store via run access
     * @param {String} owner Owner of the namespace
     * @param {String} project Project having access to the store
     * @param {String} uuid Unique integer identifier of the entity
     * @param {File} uploadfile The file to upload.
     * @param {Object} opts Optional parameters
     * @param {String} opts.path File path query params.
     * @param {Boolean} opts.overwrite File path query params.
     * @param {module:api/RunsV1Api~uploadRunLogsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.uploadRunLogs = function(owner, project, uuid, uploadfile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling uploadRunLogs");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling uploadRunLogs");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling uploadRunLogs");
      }

      // verify the required parameter 'uploadfile' is set
      if (uploadfile === undefined || uploadfile === null) {
        throw new Error("Missing the required parameter 'uploadfile' when calling uploadRunLogs");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
        'overwrite': opts['overwrite'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'uploadfile': uploadfile
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/runs/{uuid}/logs/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
