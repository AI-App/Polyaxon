// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.72
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RuntimeError', 'model/V1ListTeamMembersResponse', 'model/V1ListTeamsResponse', 'model/V1Team', 'model/V1TeamMember'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RuntimeError'), require('../model/V1ListTeamMembersResponse'), require('../model/V1ListTeamsResponse'), require('../model/V1Team'), require('../model/V1TeamMember'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.TeamsV1Api = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.RuntimeError, root.PolyaxonSdk.V1ListTeamMembersResponse, root.PolyaxonSdk.V1ListTeamsResponse, root.PolyaxonSdk.V1Team, root.PolyaxonSdk.V1TeamMember);
  }
}(this, function(ApiClient, RuntimeError, V1ListTeamMembersResponse, V1ListTeamsResponse, V1Team, V1TeamMember) {
  'use strict';

  /**
   * TeamsV1 service.
   * @module api/TeamsV1Api
   * @version 1.0.72
   */

  /**
   * Constructs a new TeamsV1Api. 
   * @alias module:api/TeamsV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teamsV1CreateTeam operation.
     * @callback module:api/TeamsV1Api~teamsV1CreateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organization
     * @param {String} owner Owner of the namespace
     * @param {module:model/V1Team} body Team body
     * @param {module:api/TeamsV1Api~teamsV1CreateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Team}
     */
    this.teamsV1CreateTeam = function(owner, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1CreateTeam");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1CreateTeam");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Team;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1CreateTeamMember operation.
     * @callback module:api/TeamsV1Api~teamsV1CreateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1TeamMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create organization member
     * @param {String} owner Owner of the namespace
     * @param {String} team Team
     * @param {module:model/V1TeamMember} body Team body
     * @param {module:api/TeamsV1Api~teamsV1CreateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1TeamMember}
     */
    this.teamsV1CreateTeamMember = function(owner, team, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1CreateTeamMember");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1CreateTeamMember");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1CreateTeamMember");
      }


      var pathParams = {
        'owner': owner,
        'team': team
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1TeamMember;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1DeleteTeam operation.
     * @callback module:api/TeamsV1Api~teamsV1DeleteTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization
     * @param {String} owner Owner of the namespace
     * @param {String} team Team under namesapce
     * @param {module:api/TeamsV1Api~teamsV1DeleteTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsV1DeleteTeam = function(owner, team, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1DeleteTeam");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1DeleteTeam");
      }


      var pathParams = {
        'owner': owner,
        'team': team
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1DeleteTeamMember operation.
     * @callback module:api/TeamsV1Api~teamsV1DeleteTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete organization member details
     * @param {String} owner Owner of the namespace
     * @param {String} team Team under namesapce
     * @param {String} user Member under team
     * @param {module:api/TeamsV1Api~teamsV1DeleteTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsV1DeleteTeamMember = function(owner, team, user, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1DeleteTeamMember");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1DeleteTeamMember");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling teamsV1DeleteTeamMember");
      }


      var pathParams = {
        'owner': owner,
        'team': team,
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members/{user}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1GetTeam operation.
     * @callback module:api/TeamsV1Api~teamsV1GetTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization
     * @param {String} owner Owner of the namespace
     * @param {String} team Team under namesapce
     * @param {module:api/TeamsV1Api~teamsV1GetTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Team}
     */
    this.teamsV1GetTeam = function(owner, team, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1GetTeam");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1GetTeam");
      }


      var pathParams = {
        'owner': owner,
        'team': team
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Team;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1GetTeamMember operation.
     * @callback module:api/TeamsV1Api~teamsV1GetTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1TeamMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization member details
     * @param {String} owner Owner of the namespace
     * @param {String} team Team under namesapce
     * @param {String} user Member under team
     * @param {module:api/TeamsV1Api~teamsV1GetTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1TeamMember}
     */
    this.teamsV1GetTeamMember = function(owner, team, user, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1GetTeamMember");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1GetTeamMember");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling teamsV1GetTeamMember");
      }


      var pathParams = {
        'owner': owner,
        'team': team,
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1TeamMember;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members/{user}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1ListTeamMembers operation.
     * @callback module:api/TeamsV1Api~teamsV1ListTeamMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListTeamMembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get organization members
     * @param {String} owner Owner of the namespace
     * @param {String} team Team under namesapce
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/TeamsV1Api~teamsV1ListTeamMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListTeamMembersResponse}
     */
    this.teamsV1ListTeamMembers = function(owner, team, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1ListTeamMembers");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1ListTeamMembers");
      }


      var pathParams = {
        'owner': owner,
        'team': team
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListTeamMembersResponse;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1ListTeamNames operation.
     * @callback module:api/TeamsV1Api~teamsV1ListTeamNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListTeamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations names
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/TeamsV1Api~teamsV1ListTeamNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListTeamsResponse}
     */
    this.teamsV1ListTeamNames = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1ListTeamNames");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListTeamsResponse;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1ListTeams operation.
     * @callback module:api/TeamsV1Api~teamsV1ListTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListTeamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List organizations
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/TeamsV1Api~teamsV1ListTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListTeamsResponse}
     */
    this.teamsV1ListTeams = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1ListTeams");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListTeamsResponse;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1PatchTeam operation.
     * @callback module:api/TeamsV1Api~teamsV1PatchTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch organization
     * @param {String} owner Owner of the namespace
     * @param {String} team_name Name
     * @param {module:model/V1Team} body Team body
     * @param {module:api/TeamsV1Api~teamsV1PatchTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Team}
     */
    this.teamsV1PatchTeam = function(owner, team_name, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1PatchTeam");
      }

      // verify the required parameter 'team_name' is set
      if (team_name === undefined || team_name === null) {
        throw new Error("Missing the required parameter 'team_name' when calling teamsV1PatchTeam");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1PatchTeam");
      }


      var pathParams = {
        'owner': owner,
        'team.name': team_name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Team;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team.name}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1PatchTeamMember operation.
     * @callback module:api/TeamsV1Api~teamsV1PatchTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1TeamMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch organization member
     * @param {String} owner Owner of the namespace
     * @param {String} team Team
     * @param {String} member_user User
     * @param {module:model/V1TeamMember} body Team body
     * @param {module:api/TeamsV1Api~teamsV1PatchTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1TeamMember}
     */
    this.teamsV1PatchTeamMember = function(owner, team, member_user, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1PatchTeamMember");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1PatchTeamMember");
      }

      // verify the required parameter 'member_user' is set
      if (member_user === undefined || member_user === null) {
        throw new Error("Missing the required parameter 'member_user' when calling teamsV1PatchTeamMember");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1PatchTeamMember");
      }


      var pathParams = {
        'owner': owner,
        'team': team,
        'member.user': member_user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1TeamMember;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members/{member.user}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1UpdateTeam operation.
     * @callback module:api/TeamsV1Api~teamsV1UpdateTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization
     * @param {String} owner Owner of the namespace
     * @param {String} team_name Name
     * @param {module:model/V1Team} body Team body
     * @param {module:api/TeamsV1Api~teamsV1UpdateTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Team}
     */
    this.teamsV1UpdateTeam = function(owner, team_name, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1UpdateTeam");
      }

      // verify the required parameter 'team_name' is set
      if (team_name === undefined || team_name === null) {
        throw new Error("Missing the required parameter 'team_name' when calling teamsV1UpdateTeam");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1UpdateTeam");
      }


      var pathParams = {
        'owner': owner,
        'team.name': team_name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Team;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team.name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsV1UpdateTeamMember operation.
     * @callback module:api/TeamsV1Api~teamsV1UpdateTeamMemberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1TeamMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update organization member
     * @param {String} owner Owner of the namespace
     * @param {String} team Team
     * @param {String} member_user User
     * @param {module:model/V1TeamMember} body Team body
     * @param {module:api/TeamsV1Api~teamsV1UpdateTeamMemberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1TeamMember}
     */
    this.teamsV1UpdateTeamMember = function(owner, team, member_user, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling teamsV1UpdateTeamMember");
      }

      // verify the required parameter 'team' is set
      if (team === undefined || team === null) {
        throw new Error("Missing the required parameter 'team' when calling teamsV1UpdateTeamMember");
      }

      // verify the required parameter 'member_user' is set
      if (member_user === undefined || member_user === null) {
        throw new Error("Missing the required parameter 'member_user' when calling teamsV1UpdateTeamMember");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling teamsV1UpdateTeamMember");
      }


      var pathParams = {
        'owner': owner,
        'team': team,
        'member.user': member_user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1TeamMember;

      return this.apiClient.callApi(
        '/api/v1/orgs/{owner}/teams/{team}/members/{member.user}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
