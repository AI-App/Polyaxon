// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.71
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RuntimeError', 'model/V1ListProjectsResponse', 'model/V1Project', 'model/V1ProjectSettings', 'model/V1ProjectTeams'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RuntimeError'), require('../model/V1ListProjectsResponse'), require('../model/V1Project'), require('../model/V1ProjectSettings'), require('../model/V1ProjectTeams'));
  } else {
    // Browser globals (root is window)
    if (!root.PolyaxonSdk) {
      root.PolyaxonSdk = {};
    }
    root.PolyaxonSdk.ProjectsV1Api = factory(root.PolyaxonSdk.ApiClient, root.PolyaxonSdk.RuntimeError, root.PolyaxonSdk.V1ListProjectsResponse, root.PolyaxonSdk.V1Project, root.PolyaxonSdk.V1ProjectSettings, root.PolyaxonSdk.V1ProjectTeams);
  }
}(this, function(ApiClient, RuntimeError, V1ListProjectsResponse, V1Project, V1ProjectSettings, V1ProjectTeams) {
  'use strict';

  /**
   * ProjectsV1 service.
   * @module api/ProjectsV1Api
   * @version 1.0.71
   */

  /**
   * Constructs a new ProjectsV1Api. 
   * @alias module:api/ProjectsV1Api
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the projectsV1ArchiveProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1ArchiveProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1ArchiveProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1ArchiveProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1ArchiveProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1ArchiveProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/archive', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1BookmarkProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1BookmarkProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bookmark project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1BookmarkProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1BookmarkProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1BookmarkProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1BookmarkProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/bookmark', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1CreateProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1CreateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project
     * @param {String} owner Owner of the namespace
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~projectsV1CreateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    this.projectsV1CreateProject = function(owner, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1CreateProject");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1CreateProject");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Project;

      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/create', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1DeleteProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1DeleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1DeleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1DeleteProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1DeleteProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1DeleteProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1DisableProjectCI operation.
     * @callback module:api/ProjectsV1Api~projectsV1DisableProjectCICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disbale project CI
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1DisableProjectCICallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1DisableProjectCI = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1DisableProjectCI");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1DisableProjectCI");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/ci', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1EnableProjectCI operation.
     * @callback module:api/ProjectsV1Api~projectsV1EnableProjectCICallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable project CI
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1EnableProjectCICallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1EnableProjectCI = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1EnableProjectCI");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1EnableProjectCI");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/ci', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1FetchProjectTeams operation.
     * @callback module:api/ProjectsV1Api~projectsV1FetchProjectTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectTeams} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project teams
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1FetchProjectTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectTeams}
     */
    this.projectsV1FetchProjectTeams = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1FetchProjectTeams");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1FetchProjectTeams");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectTeams;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/teams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1GetProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1GetProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1GetProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    this.projectsV1GetProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1GetProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1GetProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Project;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1GetProjectSettings operation.
     * @callback module:api/ProjectsV1Api~projectsV1GetProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Project settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1GetProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    this.projectsV1GetProjectSettings = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1GetProjectSettings");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1GetProjectSettings");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectSettings;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/settings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1ListArchivedProjects operation.
     * @callback module:api/ProjectsV1Api~projectsV1ListArchivedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List archived projects for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/ProjectsV1Api~projectsV1ListArchivedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    this.projectsV1ListArchivedProjects = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling projectsV1ListArchivedProjects");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListProjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/archives/{user}/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1ListBookmarkedProjects operation.
     * @callback module:api/ProjectsV1Api~projectsV1ListBookmarkedProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List bookmarked projects for user
     * @param {String} user User
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/ProjectsV1Api~projectsV1ListBookmarkedProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    this.projectsV1ListBookmarkedProjects = function(user, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling projectsV1ListBookmarkedProjects");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListProjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/bookmarks/{user}/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1ListProjectNames operation.
     * @callback module:api/ProjectsV1Api~projectsV1ListProjectNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List project names
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/ProjectsV1Api~projectsV1ListProjectNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    this.projectsV1ListProjectNames = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1ListProjectNames");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListProjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/names', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1ListProjects operation.
     * @callback module:api/ProjectsV1Api~projectsV1ListProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ListProjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List projects
     * @param {String} owner Owner of the namespace
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset.
     * @param {Number} opts.limit Limit size.
     * @param {String} opts.sort Sort to order the search.
     * @param {String} opts.query Query filter the search search.
     * @param {module:api/ProjectsV1Api~projectsV1ListProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ListProjectsResponse}
     */
    this.projectsV1ListProjects = function(owner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1ListProjects");
      }


      var pathParams = {
        'owner': owner
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort': opts['sort'],
        'query': opts['query'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ListProjectsResponse;

      return this.apiClient.callApi(
        '/api/v1/{owner}/projects/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1PatchProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1PatchProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch project
     * @param {String} owner Owner of the namespace
     * @param {String} project_name Required name
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~projectsV1PatchProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    this.projectsV1PatchProject = function(owner, project_name, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1PatchProject");
      }

      // verify the required parameter 'project_name' is set
      if (project_name === undefined || project_name === null) {
        throw new Error("Missing the required parameter 'project_name' when calling projectsV1PatchProject");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1PatchProject");
      }


      var pathParams = {
        'owner': owner,
        'project.name': project_name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Project;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project.name}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1PatchProjectSettings operation.
     * @callback module:api/ProjectsV1Api~projectsV1PatchProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch project settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectSettings} body Project settings body
     * @param {module:api/ProjectsV1Api~projectsV1PatchProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    this.projectsV1PatchProjectSettings = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1PatchProjectSettings");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1PatchProjectSettings");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1PatchProjectSettings");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectSettings;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/settings', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1PatchProjectTeams operation.
     * @callback module:api/ProjectsV1Api~projectsV1PatchProjectTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectTeams} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch project teams
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectTeams} body Project settings body
     * @param {module:api/ProjectsV1Api~projectsV1PatchProjectTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectTeams}
     */
    this.projectsV1PatchProjectTeams = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1PatchProjectTeams");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1PatchProjectTeams");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1PatchProjectTeams");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectTeams;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/teams', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1RestoreProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1RestoreProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1RestoreProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1RestoreProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1RestoreProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1RestoreProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/restore', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1UnbookmarkProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1UnbookmarkProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unbookmark project
     * @param {String} owner Owner of the namespace
     * @param {String} project Project under namesapce
     * @param {module:api/ProjectsV1Api~projectsV1UnbookmarkProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.projectsV1UnbookmarkProject = function(owner, project, callback) {
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1UnbookmarkProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1UnbookmarkProject");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/unbookmark', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1UpdateProject operation.
     * @callback module:api/ProjectsV1Api~projectsV1UpdateProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * @param {String} owner Owner of the namespace
     * @param {String} project_name Required name
     * @param {module:model/V1Project} body Project body
     * @param {module:api/ProjectsV1Api~projectsV1UpdateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1Project}
     */
    this.projectsV1UpdateProject = function(owner, project_name, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1UpdateProject");
      }

      // verify the required parameter 'project_name' is set
      if (project_name === undefined || project_name === null) {
        throw new Error("Missing the required parameter 'project_name' when calling projectsV1UpdateProject");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1UpdateProject");
      }


      var pathParams = {
        'owner': owner,
        'project.name': project_name
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1Project;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project.name}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1UpdateProjectSettings operation.
     * @callback module:api/ProjectsV1Api~projectsV1UpdateProjectSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project settings
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectSettings} body Project settings body
     * @param {module:api/ProjectsV1Api~projectsV1UpdateProjectSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectSettings}
     */
    this.projectsV1UpdateProjectSettings = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1UpdateProjectSettings");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1UpdateProjectSettings");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1UpdateProjectSettings");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectSettings;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/settings', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsV1UpdateProjectTeams operation.
     * @callback module:api/ProjectsV1Api~projectsV1UpdateProjectTeamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ProjectTeams} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project teams
     * @param {String} owner Owner of the namespace
     * @param {String} project Project name
     * @param {module:model/V1ProjectTeams} body Project settings body
     * @param {module:api/ProjectsV1Api~projectsV1UpdateProjectTeamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ProjectTeams}
     */
    this.projectsV1UpdateProjectTeams = function(owner, project, body, callback) {
      var postBody = body;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling projectsV1UpdateProjectTeams");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling projectsV1UpdateProjectTeams");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectsV1UpdateProjectTeams");
      }


      var pathParams = {
        'owner': owner,
        'project': project
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = V1ProjectTeams;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/teams', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadProjectArtifact operation.
     * @callback module:api/ProjectsV1Api~uploadProjectArtifactCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload artifact to a store via project access
     * @param {String} owner Owner of the namespace
     * @param {String} project Project having access to the store
     * @param {String} uuid Unique integer identifier of the entity
     * @param {File} uploadfile The file to upload.
     * @param {Object} opts Optional parameters
     * @param {String} opts.path File path query params.
     * @param {Boolean} opts.overwrite File path query params.
     * @param {module:api/ProjectsV1Api~uploadProjectArtifactCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.uploadProjectArtifact = function(owner, project, uuid, uploadfile, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'owner' is set
      if (owner === undefined || owner === null) {
        throw new Error("Missing the required parameter 'owner' when calling uploadProjectArtifact");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling uploadProjectArtifact");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling uploadProjectArtifact");
      }

      // verify the required parameter 'uploadfile' is set
      if (uploadfile === undefined || uploadfile === null) {
        throw new Error("Missing the required parameter 'uploadfile' when calling uploadProjectArtifact");
      }


      var pathParams = {
        'owner': owner,
        'project': project,
        'uuid': uuid
      };
      var queryParams = {
        'path': opts['path'],
        'overwrite': opts['overwrite'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'uploadfile': uploadfile
      };

      var authNames = ['ApiKey'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/v1/{owner}/{project}/artifacts/{uuid}/upload', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
