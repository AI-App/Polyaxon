// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('V1ArtifactsStore', function() {
      beforeEach(function() {
        instance = new PolyaxonSdk.V1ArtifactsStore();
      });

      it('should create an instance of V1ArtifactsStore', function() {
        // TODO: update the code to test V1ArtifactsStore
        expect(instance).to.be.a(PolyaxonSdk.V1ArtifactsStore);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property readme (base name: "readme")', function() {
        // TODO: update the code to test the property readme
        expect(instance).to.have.property('readme');
        // expect(instance.readme).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property created_at (base name: "created_at")', function() {
        // TODO: update the code to test the property created_at
        expect(instance).to.have.property('created_at');
        // expect(instance.created_at).to.be(expectedValueLiteral);
      });

      it('should have the property updated_at (base name: "updated_at")', function() {
        // TODO: update the code to test the property updated_at
        expect(instance).to.have.property('updated_at');
        // expect(instance.updated_at).to.be(expectedValueLiteral);
      });

      it('should have the property frozen (base name: "frozen")', function() {
        // TODO: update the code to test the property frozen
        expect(instance).to.have.property('frozen');
        // expect(instance.frozen).to.be(expectedValueLiteral);
      });

      it('should have the property disabled (base name: "disabled")', function() {
        // TODO: update the code to test the property disabled
        expect(instance).to.have.property('disabled');
        // expect(instance.disabled).to.be(expectedValueLiteral);
      });

      it('should have the property deleted (base name: "deleted")', function() {
        // TODO: update the code to test the property deleted
        expect(instance).to.have.property('deleted');
        // expect(instance.deleted).to.be(expectedValueLiteral);
      });

      it('should have the property k8s_secret (base name: "k8s_secret")', function() {
        // TODO: update the code to test the property k8s_secret
        expect(instance).to.have.property('k8s_secret');
        // expect(instance.k8s_secret).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property mount_path (base name: "mount_path")', function() {
        // TODO: update the code to test the property mount_path
        expect(instance).to.have.property('mount_path');
        // expect(instance.mount_path).to.be(expectedValueLiteral);
      });

      it('should have the property host_path (base name: "host_path")', function() {
        // TODO: update the code to test the property host_path
        expect(instance).to.have.property('host_path');
        // expect(instance.host_path).to.be(expectedValueLiteral);
      });

      it('should have the property volume_claim (base name: "volume_claim")', function() {
        // TODO: update the code to test the property volume_claim
        expect(instance).to.have.property('volume_claim');
        // expect(instance.volume_claim).to.be(expectedValueLiteral);
      });

      it('should have the property bucket (base name: "bucket")', function() {
        // TODO: update the code to test the property bucket
        expect(instance).to.have.property('bucket');
        // expect(instance.bucket).to.be(expectedValueLiteral);
      });

      it('should have the property read_only (base name: "read_only")', function() {
        // TODO: update the code to test the property read_only
        expect(instance).to.have.property('read_only');
        // expect(instance.read_only).to.be(expectedValueLiteral);
      });

    });
  });

}));
