// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * Polyaxon sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.V1ArtifactsStore();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('V1ArtifactsStore', function() {
    it('should create an instance of V1ArtifactsStore', function() {
      // uncomment below and update the code to test V1ArtifactsStore
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be.a(PolyaxonSdk.V1ArtifactsStore);
    });

    it('should have the property uuid (base name: "uuid")', function() {
      // uncomment below and update the code to test the property uuid
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property readme (base name: "readme")', function() {
      // uncomment below and update the code to test the property readme
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property created_at (base name: "created_at")', function() {
      // uncomment below and update the code to test the property created_at
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property updated_at (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updated_at
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property frozen (base name: "frozen")', function() {
      // uncomment below and update the code to test the property frozen
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property k8s_secret (base name: "k8s_secret")', function() {
      // uncomment below and update the code to test the property k8s_secret
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property mount_path (base name: "mount_path")', function() {
      // uncomment below and update the code to test the property mount_path
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property host_path (base name: "host_path")', function() {
      // uncomment below and update the code to test the property host_path
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property volume_claim (base name: "volume_claim")', function() {
      // uncomment below and update the code to test the property volume_claim
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property bucket (base name: "bucket")', function() {
      // uncomment below and update the code to test the property bucket
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

    it('should have the property read_only (base name: "read_only")', function() {
      // uncomment below and update the code to test the property read_only
      //var instance = new PolyaxonSdk.V1ArtifactsStore();
      //expect(instance).to.be();
    });

  });

}));
