// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.72
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.RunsV1Api();
  });

  describe('(package)', function() {
    describe('RunsV1Api', function() {
      describe('getRunArtifact', function() {
        it('should call getRunArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifact call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";
          opts.stream = true;

          instance.getRunArtifact(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifacts', function() {
        it('should call getRunArtifacts successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifacts call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";

          instance.getRunArtifacts(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ArchiveRun', function() {
        it('should call runsV1ArchiveRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ArchiveRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1ArchiveRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1BookmarkRun', function() {
        it('should call runsV1BookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1BookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1BookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1BookmarkRuns', function() {
        it('should call runsV1BookmarkRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1BookmarkRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.runsV1BookmarkRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1CollectRunLogs', function() {
        it('should call runsV1CollectRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1CollectRunLogs call
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1CollectRunLogs(namespace, owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1CopyRun', function() {
        it('should call runsV1CopyRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1CopyRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.run_time = 0;
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.original = new PolyaxonSdk.V1Cloning();
          body.original.uuid = "";
          body.original.name = "";
          body.original.kind = new PolyaxonSdk.V1CloningKind();
          body.pipeline = new PolyaxonSdk.V1Pipeline();
          body.pipeline.uuid = "";
          body.pipeline.name = "";
          body.pipeline.kind = new PolyaxonSdk.V1PipelineKind();
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();
          body.settings = new PolyaxonSdk.V1RunSettings();
          body.settings.namespace = "";
          body.settings.agent = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.agent.uuid = "";
          body.settings.agent.name = "";
          body.settings.queue = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.queue.uuid = "";
          body.settings.queue.name = "";
          body.settings.artifacts_store = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.artifacts_store.uuid = "";
          body.settings.artifacts_store.name = "";
          body.settings.connections = [new PolyaxonSdk.V1RunSettingsCatalog()];
          body.settings.connections[0].uuid = "";
          body.settings.connections[0].name = "";

          instance.runsV1CopyRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1CreateRun', function() {
        it('should call runsV1CreateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1CreateRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1OperationBody();
          body.content = new PolyaxonSdk.V1Operation();
          body.content.version = 0.0;
          body.content.kind = "";
          body.content.name = "";
          body.content.tag = "";
          body.content.description = "";
          body.content.tags = [""];
          body.content.profile = "";
          body.content.queue = "";
          body.content.cache = new PolyaxonSdk.V1Cache();
          body.content.cache.disable = false;
          body.content.cache.ttl = 0;
          body.content.cache.inputs = [""];
          body.content.schedule = ;
          body.content.parallel = ;
          body.content.dependencies = [""];
          body.content.trigger = new PolyaxonSdk.V1TriggerPolicy();
          body.content.conditions = [];
          body.content.skip_on_upstream_skip = false;
          body.content.termination = new PolyaxonSdk.V1Termination();
          body.content.termination.max_retries = 0;
          body.content.termination.ttl = 0;
          body.content.termination.timeout = 0;
          body.content.plugins = new PolyaxonSdk.V1Plugins();
          body.content.plugins.auth = false;
          body.content.plugins.docker = false;
          body.content.plugins.shm = false;
          body.content.plugins.collect_artifacts = false;
          body.content.plugins.collect_logs = false;
          body.content.plugins.collect_resources = "";
          body.content.plugins.sync_statuses = false;
          body.content.plugins.log_level = "";
          body.content.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.plugins.notifications[0].connection = "";
          body.content.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.params = {key: new PolyaxonSdk.V1Param()}new PolyaxonSdk.V1Param();
          body.content.params.key.value = ;
          body.content.params.key.ref = "";
          body.content.params.key.search = new PolyaxonSdk.V1ParamSearch();
          body.content.params.key.search.query = "";
          body.content.params.key.search.sort = "";
          body.content.params.key.search.limit = "";
          body.content.run_patch = ;
          body.content.dag_ref = "";
          body.content.url_ref = "";
          body.content.path_ref = "";
          body.content.hub_ref = "";
          body.content.component = new PolyaxonSdk.V1Component();
          body.content.component.version = 0.0;
          body.content.component.kind = "";
          body.content.component.name = "";
          body.content.component.tag = "";
          body.content.component.description = "";
          body.content.component.tags = [""];
          body.content.component.profile = "";
          body.content.component.queue = "";
          body.content.component.cache = new PolyaxonSdk.V1Cache();
          body.content.component.cache.disable = false;
          body.content.component.cache.ttl = 0;
          body.content.component.cache.inputs = [""];
          body.content.component.termination = new PolyaxonSdk.V1Termination();
          body.content.component.termination.max_retries = 0;
          body.content.component.termination.ttl = 0;
          body.content.component.termination.timeout = 0;
          body.content.component.plugins = new PolyaxonSdk.V1Plugins();
          body.content.component.plugins.auth = false;
          body.content.component.plugins.docker = false;
          body.content.component.plugins.shm = false;
          body.content.component.plugins.collect_artifacts = false;
          body.content.component.plugins.collect_logs = false;
          body.content.component.plugins.collect_resources = "";
          body.content.component.plugins.sync_statuses = false;
          body.content.component.plugins.log_level = "";
          body.content.component.plugins.notifications = [new PolyaxonSdk.V1Notification()];
          body.content.component.plugins.notifications[0].connection = "";
          body.content.component.plugins.notifications[0].trigger = new PolyaxonSdk.NotificationTrigger();
          body.content.component.inputs = [new PolyaxonSdk.V1IO()];
          body.content.component.inputs[0].name = "";
          body.content.component.inputs[0].description = "";
          body.content.component.inputs[0].iotype = "";
          body.content.component.inputs[0].value = ;
          body.content.component.inputs[0].is_optional = false;
          body.content.component.inputs[0].is_list = false;
          body.content.component.inputs[0].is_flag = false;
          body.content.component.inputs[0].delay_validation = false;
          body.content.component.inputs[0].options = [];
          body.content.component.outputs = [new PolyaxonSdk.V1IO()];
          body.content.component.outputs[0].name = "";
          body.content.component.outputs[0].description = "";
          body.content.component.outputs[0].iotype = "";
          body.content.component.outputs[0].value = ;
          body.content.component.outputs[0].is_optional = false;
          body.content.component.outputs[0].is_list = false;
          body.content.component.outputs[0].is_flag = false;
          body.content.component.outputs[0].delay_validation = false;
          body.content.component.outputs[0].options = [];
          body.content.component.run = ;
          body.is_managed = false;
          body.name = "";
          body.description = "";
          body.tags = [""];

          instance.runsV1CreateRun(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1CreateRunArtifactsLineage', function() {
        it('should call runsV1CreateRunArtifactsLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1CreateRunArtifactsLineage call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1RunArtifacts();
          body.artifacts = [new PolyaxonSdk.V1RunArtifact()];
          body.artifacts[0].name = "";
          body.artifacts[0].state = "";
          body.artifacts[0].kind = new PolyaxonSdk.V1ArtifactKind();
          body.artifacts[0].path = "";
          body.artifacts[0].connection = "";
          body.artifacts[0].summary = ;
          body.artifacts[0].is_input = false;

          instance.runsV1CreateRunArtifactsLineage(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1CreateRunStatus', function() {
        it('should call runsV1CreateRunStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1CreateRunStatus call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1EntityStatusBodyRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = new PolyaxonSdk.V1Statuses();
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();

          instance.runsV1CreateRunStatus(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1DeleteRun', function() {
        it('should call runsV1DeleteRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1DeleteRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1DeleteRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1DeleteRunArtifactLineage', function() {
        it('should call runsV1DeleteRunArtifactLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1DeleteRunArtifactLineage call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var name = "name_example";
          var opts = {};
          opts.namespace = "namespace_example";

          instance.runsV1DeleteRunArtifactLineage(owner, project, uuid, name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1DeleteRuns', function() {
        it('should call runsV1DeleteRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1DeleteRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.runsV1DeleteRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetMultiRunEvents', function() {
        it('should call runsV1GetMultiRunEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetMultiRunEvents call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var kind = "kind_example";
          var opts = {};
          opts.names = "names_example";
          opts.runs = "runs_example";
          opts.orient = "orient_example";

          instance.runsV1GetMultiRunEvents(namespace, owner, project, kind, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1EventsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRun', function() {
        it('should call runsV1GetRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1GetRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunArtifactLineage', function() {
        it('should call runsV1GetRunArtifactLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunArtifactLineage call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var name = "name_example";
          var opts = {};
          opts.namespace = "namespace_example";

          instance.runsV1GetRunArtifactLineage(owner, project, uuid, name, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.state).to.be.a('string');
            expect(data.state).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                expect(data.path).to.be.a('string');
            expect(data.path).to.be("");
            expect(data.connection).to.be.a('string');
            expect(data.connection).to.be("");
            expect(data.summary).to.be.a(Object);
            expect(data.summary).to.be();
            expect(data.is_input).to.be.a('boolean');
            expect(data.is_input).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunArtifactsLineage', function() {
        it('should call runsV1GetRunArtifactsLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunArtifactsLineage call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1GetRunArtifactsLineage(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunArtifactsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                    expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.connection).to.be.a('string');
                expect(data.connection).to.be("");
                expect(data.summary).to.be.a(Object);
                expect(data.summary).to.be();
                expect(data.is_input).to.be.a('boolean');
                expect(data.is_input).to.be(false);
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunArtifactsLineageNames', function() {
        it('should call runsV1GetRunArtifactsLineageNames successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunArtifactsLineageNames call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1GetRunArtifactsLineageNames(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunArtifactsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunArtifact);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.state).to.be.a('string');
                expect(data.state).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1ArtifactKind);
                    expect(data.path).to.be.a('string');
                expect(data.path).to.be("");
                expect(data.connection).to.be.a('string');
                expect(data.connection).to.be("");
                expect(data.summary).to.be.a(Object);
                expect(data.summary).to.be();
                expect(data.is_input).to.be.a('boolean');
                expect(data.is_input).to.be(false);
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunArtifactsTree', function() {
        it('should call runsV1GetRunArtifactsTree successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunArtifactsTree call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";

          instance.runsV1GetRunArtifactsTree(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ArtifactTree);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dirs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.is_done).to.be.a('boolean');
            expect(data.is_done).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunEvents', function() {
        it('should call runsV1GetRunEvents successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunEvents call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var kind = "kind_example";
          var opts = {};
          opts.names = "names_example";
          opts.orient = "orient_example";

          instance.runsV1GetRunEvents(namespace, owner, project, uuid, kind, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1EventsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunLogs', function() {
        it('should call runsV1GetRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunLogs call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.last_time = new Date("2013-10-20T19:20:30+01:00");
          opts.last_file = "last_file_example";

          instance.runsV1GetRunLogs(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Logs);
            {
              let dataCtr = data.logs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Log);
                expect(data.timestamp).to.be.a(Date);
                expect(data.timestamp).to.be(new Date());
                expect(data.node).to.be.a('string');
                expect(data.node).to.be("");
                expect(data.pod).to.be.a('string');
                expect(data.pod).to.be("");
                expect(data.container).to.be.a('string');
                expect(data.container).to.be("");
                expect(data.value).to.be.a('string');
                expect(data.value).to.be("");
              }
            }
            expect(data.last_time).to.be.a(Date);
            expect(data.last_time).to.be(new Date());
            expect(data.last_file).to.be.a('string');
            expect(data.last_file).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunNamespace', function() {
        it('should call runsV1GetRunNamespace successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunNamespace call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1GetRunNamespace(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunSettings);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.agent.uuid).to.be.a('string');
              expect(data.agent.uuid).to.be("");
              expect(data.agent.name).to.be.a('string');
              expect(data.agent.name).to.be("");
            expect(data.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.queue.uuid).to.be.a('string');
              expect(data.queue.uuid).to.be("");
              expect(data.queue.name).to.be.a('string');
              expect(data.queue.name).to.be("");
            expect(data.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.artifacts_store.uuid).to.be.a('string');
              expect(data.artifacts_store.uuid).to.be("");
              expect(data.artifacts_store.name).to.be.a('string');
              expect(data.artifacts_store.name).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunResources', function() {
        it('should call runsV1GetRunResources successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunResources call and complete the assertions
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.names = "names_example";
          opts.tail = true;

          instance.runsV1GetRunResources(namespace, owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1EventsResponse);
            {
              let dataCtr = data.data;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunSettings', function() {
        it('should call runsV1GetRunSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1GetRunSettings(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunSettings);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.agent.uuid).to.be.a('string');
              expect(data.agent.uuid).to.be("");
              expect(data.agent.name).to.be.a('string');
              expect(data.agent.name).to.be("");
            expect(data.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.queue.uuid).to.be.a('string');
              expect(data.queue.uuid).to.be("");
              expect(data.queue.name).to.be.a('string');
              expect(data.queue.name).to.be("");
            expect(data.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.artifacts_store.uuid).to.be.a('string');
              expect(data.artifacts_store.uuid).to.be("");
              expect(data.artifacts_store.name).to.be.a('string');
              expect(data.artifacts_store.name).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunStatuses', function() {
        it('should call runsV1GetRunStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunStatuses call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1GetRunStatuses(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1GetRunsArtifactsLineage', function() {
        it('should call runsV1GetRunsArtifactsLineage successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1GetRunsArtifactsLineage call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.runsV1GetRunsArtifactsLineage(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ImpersonateToken', function() {
        it('should call runsV1ImpersonateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ImpersonateToken call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1ImpersonateToken(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Auth);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1InvalidateRun', function() {
        it('should call runsV1InvalidateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1InvalidateRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.runsV1InvalidateRun(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1InvalidateRuns', function() {
        it('should call runsV1InvalidateRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1InvalidateRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.runsV1InvalidateRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ListArchivedRuns', function() {
        it('should call runsV1ListArchivedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ListArchivedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1ListArchivedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.run_time).to.be.a('number');
                expect(data.run_time).to.be(0);
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                      expect(data.original.uuid).to.be.a('string');
                  expect(data.original.uuid).to.be("");
                  expect(data.original.name).to.be.a('string');
                  expect(data.original.name).to.be("");
                  expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
          
                expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                      expect(data.pipeline.uuid).to.be.a('string');
                  expect(data.pipeline.uuid).to.be("");
                  expect(data.pipeline.name).to.be.a('string');
                  expect(data.pipeline.name).to.be("");
                  expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
          
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
                expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                      expect(data.settings.namespace).to.be.a('string');
                  expect(data.settings.namespace).to.be("");
                  expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.agent.uuid).to.be.a('string');
                    expect(data.settings.agent.uuid).to.be("");
                    expect(data.settings.agent.name).to.be.a('string');
                    expect(data.settings.agent.name).to.be("");
                  expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.queue.uuid).to.be.a('string');
                    expect(data.settings.queue.uuid).to.be("");
                    expect(data.settings.queue.name).to.be.a('string');
                    expect(data.settings.queue.name).to.be("");
                  expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.artifacts_store.uuid).to.be.a('string');
                    expect(data.settings.artifacts_store.uuid).to.be("");
                    expect(data.settings.artifacts_store.name).to.be.a('string');
                    expect(data.settings.artifacts_store.name).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                      expect(data.uuid).to.be.a('string');
                      expect(data.uuid).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                    }
                  }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ListBookmarkedRuns', function() {
        it('should call runsV1ListBookmarkedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ListBookmarkedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1ListBookmarkedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.run_time).to.be.a('number');
                expect(data.run_time).to.be(0);
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                      expect(data.original.uuid).to.be.a('string');
                  expect(data.original.uuid).to.be("");
                  expect(data.original.name).to.be.a('string');
                  expect(data.original.name).to.be("");
                  expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
          
                expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                      expect(data.pipeline.uuid).to.be.a('string');
                  expect(data.pipeline.uuid).to.be("");
                  expect(data.pipeline.name).to.be.a('string');
                  expect(data.pipeline.name).to.be("");
                  expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
          
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
                expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                      expect(data.settings.namespace).to.be.a('string');
                  expect(data.settings.namespace).to.be("");
                  expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.agent.uuid).to.be.a('string');
                    expect(data.settings.agent.uuid).to.be("");
                    expect(data.settings.agent.name).to.be.a('string');
                    expect(data.settings.agent.name).to.be("");
                  expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.queue.uuid).to.be.a('string');
                    expect(data.settings.queue.uuid).to.be("");
                    expect(data.settings.queue.name).to.be.a('string');
                    expect(data.settings.queue.name).to.be("");
                  expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.artifacts_store.uuid).to.be.a('string');
                    expect(data.settings.artifacts_store.uuid).to.be("");
                    expect(data.settings.artifacts_store.name).to.be.a('string');
                    expect(data.settings.artifacts_store.name).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                      expect(data.uuid).to.be.a('string');
                      expect(data.uuid).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                    }
                  }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ListRuns', function() {
        it('should call runsV1ListRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ListRuns call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1ListRuns(owner, project, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.run_time).to.be.a('number');
                expect(data.run_time).to.be(0);
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                      expect(data.original.uuid).to.be.a('string');
                  expect(data.original.uuid).to.be("");
                  expect(data.original.name).to.be.a('string');
                  expect(data.original.name).to.be("");
                  expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
          
                expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                      expect(data.pipeline.uuid).to.be.a('string');
                  expect(data.pipeline.uuid).to.be("");
                  expect(data.pipeline.name).to.be.a('string');
                  expect(data.pipeline.name).to.be("");
                  expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
          
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
                expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                      expect(data.settings.namespace).to.be.a('string');
                  expect(data.settings.namespace).to.be("");
                  expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.agent.uuid).to.be.a('string');
                    expect(data.settings.agent.uuid).to.be("");
                    expect(data.settings.agent.name).to.be.a('string');
                    expect(data.settings.agent.name).to.be("");
                  expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.queue.uuid).to.be.a('string');
                    expect(data.settings.queue.uuid).to.be("");
                    expect(data.settings.queue.name).to.be.a('string');
                    expect(data.settings.queue.name).to.be("");
                  expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.artifacts_store.uuid).to.be.a('string');
                    expect(data.settings.artifacts_store.uuid).to.be("");
                    expect(data.settings.artifacts_store.name).to.be.a('string');
                    expect(data.settings.artifacts_store.name).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                      expect(data.uuid).to.be.a('string');
                      expect(data.uuid).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                    }
                  }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ListRunsIo', function() {
        it('should call runsV1ListRunsIo successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ListRunsIo call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.runsV1ListRunsIo(owner, project, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.run_time).to.be.a('number');
                expect(data.run_time).to.be(0);
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(Object);
                expect(data.meta_info).to.be();
                expect(data.is_helper).to.be.a('boolean');
                expect(data.is_helper).to.be(false);
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                      expect(data.original.uuid).to.be.a('string');
                  expect(data.original.uuid).to.be("");
                  expect(data.original.name).to.be.a('string');
                  expect(data.original.name).to.be("");
                  expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
          
                expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                      expect(data.pipeline.uuid).to.be.a('string');
                  expect(data.pipeline.uuid).to.be("");
                  expect(data.pipeline.name).to.be.a('string');
                  expect(data.pipeline.name).to.be("");
                  expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
          
                {
                  let dataCtr = data.status_conditions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                    expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                        expect(data.status).to.be.a('string');
                    expect(data.status).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
                    expect(data.message).to.be.a('string');
                    expect(data.message).to.be("");
                    expect(data.last_update_time).to.be.a(Date);
                    expect(data.last_update_time).to.be(new Date());
                    expect(data.last_transition_time).to.be.a(Date);
                    expect(data.last_transition_time).to.be(new Date());
                  }
                }
                expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                      expect(data.settings.namespace).to.be.a('string');
                  expect(data.settings.namespace).to.be("");
                  expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.agent.uuid).to.be.a('string');
                    expect(data.settings.agent.uuid).to.be("");
                    expect(data.settings.agent.name).to.be.a('string');
                    expect(data.settings.agent.name).to.be("");
                  expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.queue.uuid).to.be.a('string');
                    expect(data.settings.queue.uuid).to.be("");
                    expect(data.settings.queue.name).to.be.a('string');
                    expect(data.settings.queue.name).to.be("");
                  expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                        expect(data.settings.artifacts_store.uuid).to.be.a('string');
                    expect(data.settings.artifacts_store.uuid).to.be("");
                    expect(data.settings.artifacts_store.name).to.be.a('string');
                    expect(data.settings.artifacts_store.name).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                      expect(data.uuid).to.be.a('string');
                      expect(data.uuid).to.be("");
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                    }
                  }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1NotifyRunStatus', function() {
        it('should call runsV1NotifyRunStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1NotifyRunStatus call
          /*
          var namespace = "namespace_example";
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1EntityNotificationBody();
          body.namespace = "";
          body.owner = "";
          body.project = "";
          body.uuid = "";
          body.name = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = new PolyaxonSdk.V1Statuses();
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();
          body.connections = [""];

          instance.runsV1NotifyRunStatus(namespace, owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1PatchRun', function() {
        it('should call runsV1PatchRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1PatchRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.run_time = 0;
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.original = new PolyaxonSdk.V1Cloning();
          body.original.uuid = "";
          body.original.name = "";
          body.original.kind = new PolyaxonSdk.V1CloningKind();
          body.pipeline = new PolyaxonSdk.V1Pipeline();
          body.pipeline.uuid = "";
          body.pipeline.name = "";
          body.pipeline.kind = new PolyaxonSdk.V1PipelineKind();
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();
          body.settings = new PolyaxonSdk.V1RunSettings();
          body.settings.namespace = "";
          body.settings.agent = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.agent.uuid = "";
          body.settings.agent.name = "";
          body.settings.queue = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.queue.uuid = "";
          body.settings.queue.name = "";
          body.settings.artifacts_store = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.artifacts_store.uuid = "";
          body.settings.artifacts_store.name = "";
          body.settings.connections = [new PolyaxonSdk.V1RunSettingsCatalog()];
          body.settings.connections[0].uuid = "";
          body.settings.connections[0].name = "";

          instance.runsV1PatchRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1RestartRun', function() {
        it('should call runsV1RestartRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1RestartRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.run_time = 0;
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.original = new PolyaxonSdk.V1Cloning();
          body.original.uuid = "";
          body.original.name = "";
          body.original.kind = new PolyaxonSdk.V1CloningKind();
          body.pipeline = new PolyaxonSdk.V1Pipeline();
          body.pipeline.uuid = "";
          body.pipeline.name = "";
          body.pipeline.kind = new PolyaxonSdk.V1PipelineKind();
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();
          body.settings = new PolyaxonSdk.V1RunSettings();
          body.settings.namespace = "";
          body.settings.agent = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.agent.uuid = "";
          body.settings.agent.name = "";
          body.settings.queue = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.queue.uuid = "";
          body.settings.queue.name = "";
          body.settings.artifacts_store = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.artifacts_store.uuid = "";
          body.settings.artifacts_store.name = "";
          body.settings.connections = [new PolyaxonSdk.V1RunSettingsCatalog()];
          body.settings.connections[0].uuid = "";
          body.settings.connections[0].name = "";

          instance.runsV1RestartRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1RestoreRun', function() {
        it('should call runsV1RestoreRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1RestoreRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1RestoreRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1ResumeRun', function() {
        it('should call runsV1ResumeRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1ResumeRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.run_time = 0;
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.original = new PolyaxonSdk.V1Cloning();
          body.original.uuid = "";
          body.original.name = "";
          body.original.kind = new PolyaxonSdk.V1CloningKind();
          body.pipeline = new PolyaxonSdk.V1Pipeline();
          body.pipeline.uuid = "";
          body.pipeline.name = "";
          body.pipeline.kind = new PolyaxonSdk.V1PipelineKind();
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();
          body.settings = new PolyaxonSdk.V1RunSettings();
          body.settings.namespace = "";
          body.settings.agent = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.agent.uuid = "";
          body.settings.agent.name = "";
          body.settings.queue = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.queue.uuid = "";
          body.settings.queue.name = "";
          body.settings.artifacts_store = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.artifacts_store.uuid = "";
          body.settings.artifacts_store.name = "";
          body.settings.connections = [new PolyaxonSdk.V1RunSettingsCatalog()];
          body.settings.connections[0].uuid = "";
          body.settings.connections[0].name = "";

          instance.runsV1ResumeRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1StartRunTensorboard', function() {
        it('should call runsV1StartRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1StartRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.runsV1StartRunTensorboard(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1StopRun', function() {
        it('should call runsV1StopRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1StopRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1StopRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1StopRunTensorboard', function() {
        it('should call runsV1StopRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1StopRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1StopRunTensorboard(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1StopRuns', function() {
        it('should call runsV1StopRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1StopRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.runsV1StopRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1TagRuns', function() {
        it('should call runsV1TagRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1TagRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.runsV1TagRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1UnbookmarkRun', function() {
        it('should call runsV1UnbookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1UnbookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.runsV1UnbookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('runsV1UpdateRun', function() {
        it('should call runsV1UpdateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for runsV1UpdateRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.run_time = 0;
          body.is_managed = "";
          body.content = "";
          body.status = new PolyaxonSdk.V1Statuses();
          body.bookmarked = false;
          body.meta_info = ;
          body.is_helper = false;
          body.kind = new PolyaxonSdk.V1RunKind();
          body.meta_kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.original = new PolyaxonSdk.V1Cloning();
          body.original.uuid = "";
          body.original.name = "";
          body.original.kind = new PolyaxonSdk.V1CloningKind();
          body.pipeline = new PolyaxonSdk.V1Pipeline();
          body.pipeline.uuid = "";
          body.pipeline.name = "";
          body.pipeline.kind = new PolyaxonSdk.V1PipelineKind();
          body.status_conditions = [new PolyaxonSdk.V1StatusCondition()];
          body.status_conditions[0].type = new PolyaxonSdk.V1Statuses();
          body.status_conditions[0].status = "";
          body.status_conditions[0].reason = "";
          body.status_conditions[0].message = "";
          body.status_conditions[0].last_update_time = new Date();
          body.status_conditions[0].last_transition_time = new Date();
          body.settings = new PolyaxonSdk.V1RunSettings();
          body.settings.namespace = "";
          body.settings.agent = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.agent.uuid = "";
          body.settings.agent.name = "";
          body.settings.queue = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.queue.uuid = "";
          body.settings.queue.name = "";
          body.settings.artifacts_store = new PolyaxonSdk.V1RunSettingsCatalog();
          body.settings.artifacts_store.uuid = "";
          body.settings.artifacts_store.name = "";
          body.settings.connections = [new PolyaxonSdk.V1RunSettingsCatalog()];
          body.settings.connections[0].uuid = "";
          body.settings.connections[0].name = "";

          instance.runsV1UpdateRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.run_time).to.be.a('number');
            expect(data.run_time).to.be(0);
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(Object);
            expect(data.meta_info).to.be();
            expect(data.is_helper).to.be.a('boolean');
            expect(data.is_helper).to.be(false);
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.meta_kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.original).to.be.a(PolyaxonSdk.V1Cloning);
                  expect(data.original.uuid).to.be.a('string');
              expect(data.original.uuid).to.be("");
              expect(data.original.name).to.be.a('string');
              expect(data.original.name).to.be("");
              expect(data.original.kind).to.be.a(PolyaxonSdk.V1CloningKind);
      
            expect(data.pipeline).to.be.a(PolyaxonSdk.V1Pipeline);
                  expect(data.pipeline.uuid).to.be.a('string');
              expect(data.pipeline.uuid).to.be("");
              expect(data.pipeline.name).to.be.a('string');
              expect(data.pipeline.name).to.be("");
              expect(data.pipeline.kind).to.be.a(PolyaxonSdk.V1PipelineKind);
      
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }
            expect(data.settings).to.be.a(PolyaxonSdk.V1RunSettings);
                  expect(data.settings.namespace).to.be.a('string');
              expect(data.settings.namespace).to.be("");
              expect(data.settings.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.agent.uuid).to.be.a('string');
                expect(data.settings.agent.uuid).to.be("");
                expect(data.settings.agent.name).to.be.a('string');
                expect(data.settings.agent.name).to.be("");
              expect(data.settings.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.queue.uuid).to.be.a('string');
                expect(data.settings.queue.uuid).to.be("");
                expect(data.settings.queue.name).to.be.a('string');
                expect(data.settings.queue.name).to.be("");
              expect(data.settings.artifacts_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                    expect(data.settings.artifacts_store.uuid).to.be.a('string');
                expect(data.settings.artifacts_store.uuid).to.be("");
                expect(data.settings.artifacts_store.name).to.be.a('string');
                expect(data.settings.artifacts_store.name).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.uuid).to.be.a('string');
                  expect(data.uuid).to.be("");
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunArtifact', function() {
        it('should call uploadRunArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunArtifact call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunArtifact(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunLogs', function() {
        it('should call uploadRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunLogs call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunLogs(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
