// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.RunsV1Api();
  });

  describe('(package)', function() {
    describe('RunsV1Api', function() {
      describe('archiveRun', function() {
        it('should call archiveRun successfully', function(done) {
          // TODO: uncomment, update parameter values for archiveRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.archiveRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('bookmarkRun', function() {
        it('should call bookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for bookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.bookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('copyRun', function() {
        it('should call copyRun successfully', function(done) {
          // TODO: uncomment, update parameter values for copyRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.copyRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRun', function() {
        it('should call createRun successfully', function(done) {
          // TODO: uncomment, update parameter values for createRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.createRun(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRunCodeRef', function() {
        it('should call createRunCodeRef successfully', function(done) {
          // TODO: uncomment, update parameter values for createRunCodeRef call
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1CodeRef();
          body.commit = "";
          body.url = "";

          instance.createRunCodeRef(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createRunStatus', function() {
        it('should call createRunStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for createRunStatus call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1EntityStatusBodyRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = "";
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();

          instance.createRunStatus(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRun', function() {
        it('should call deleteRun successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.deleteRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteRuns', function() {
        it('should call deleteRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.deleteRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRun', function() {
        it('should call getRun successfully', function(done) {
          // TODO: uncomment, update parameter values for getRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunArtifactsTree', function() {
        it('should call getRunArtifactsTree successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunArtifactsTree call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";
          opts.step = 56;
          opts.type = "type_example";

          instance.getRunArtifactsTree(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ArtifactTreeResponse);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dirs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.is_done).to.be.a('boolean');
            expect(data.is_done).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunLogsFile', function() {
        it('should call getRunLogsFile successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunLogsFile call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";
          opts.step = 56;
          opts.type = "type_example";

          instance.getRunLogsFile(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunLogsTree', function() {
        it('should call getRunLogsTree successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunLogsTree call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var opts = {};
          opts.path = "path_example";
          opts.step = 56;
          opts.type = "type_example";

          instance.getRunLogsTree(owner, project, uuid, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ArtifactTreeResponse);
            {
              let dataCtr = data.files;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.dirs;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.is_done).to.be.a('boolean');
            expect(data.is_done).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunSettings', function() {
        it('should call getRunSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRunSettings(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1RunSettings);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.agent).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.agent.uuid).to.be.a('string');
              expect(data.agent.uuid).to.be("");
              expect(data.agent.name).to.be.a('string');
              expect(data.agent.name).to.be("");
            expect(data.queue).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.queue.uuid).to.be.a('string');
              expect(data.queue.uuid).to.be("");
              expect(data.queue.name).to.be.a('string');
              expect(data.queue.name).to.be("");
            expect(data.logs_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.logs_store.uuid).to.be.a('string');
              expect(data.logs_store.uuid).to.be("");
              expect(data.logs_store.name).to.be.a('string');
              expect(data.logs_store.name).to.be("");
            expect(data.outputs_store).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.outputs_store.uuid).to.be.a('string');
              expect(data.outputs_store.uuid).to.be("");
              expect(data.outputs_store.name).to.be.a('string');
              expect(data.outputs_store.name).to.be("");
            {
              let dataCtr = data.init_artifacts_stores;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }
            {
              let dataCtr = data.artifacts_stores;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }
            {
              let dataCtr = data.git_accesses;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }
            expect(data.registry_access).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                  expect(data.registry_access.uuid).to.be.a('string');
              expect(data.registry_access.uuid).to.be("");
              expect(data.registry_access.name).to.be.a('string');
              expect(data.registry_access.name).to.be("");
            {
              let dataCtr = data.k8s_secrets;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }
            {
              let dataCtr = data.k8s_config_maps;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1RunSettingsCatalog);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRunStatuses', function() {
        it('should call getRunStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getRunStatuses call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.getRunStatuses(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a('string');
                expect(data.type).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('impersonateToken', function() {
        it('should call impersonateToken successfully', function(done) {
          // TODO: uncomment, update parameter values for impersonateToken call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.impersonateToken(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Auth);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invalidateRun', function() {
        it('should call invalidateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for invalidateRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.invalidateRun(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('invalidateRuns', function() {
        it('should call invalidateRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for invalidateRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.invalidateRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listArchivedRuns', function() {
        it('should call listArchivedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listArchivedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listArchivedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                      expect(data.meta_info.service).to.be.a('boolean');
                  expect(data.meta_info.service).to.be(false);
                  expect(data.meta_info.concurrency).to.be.a('number');
                  expect(data.meta_info.concurrency).to.be(0);
                  expect(data.meta_info.parallel_kind).to.be.a('string');
                  expect(data.meta_info.parallel_kind).to.be("");
                  expect(data.meta_info.run_kind).to.be.a('string');
                  expect(data.meta_info.run_kind).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.run_env).to.be.a(Object);
                expect(data.run_env).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a('string');
                expect(data.cloning_strategy).to.be("");
                expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listBookmarkedRuns', function() {
        it('should call listBookmarkedRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listBookmarkedRuns call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listBookmarkedRuns(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                      expect(data.meta_info.service).to.be.a('boolean');
                  expect(data.meta_info.service).to.be(false);
                  expect(data.meta_info.concurrency).to.be.a('number');
                  expect(data.meta_info.concurrency).to.be(0);
                  expect(data.meta_info.parallel_kind).to.be.a('string');
                  expect(data.meta_info.parallel_kind).to.be("");
                  expect(data.meta_info.run_kind).to.be.a('string');
                  expect(data.meta_info.run_kind).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.run_env).to.be.a(Object);
                expect(data.run_env).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a('string');
                expect(data.cloning_strategy).to.be("");
                expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('listRuns', function() {
        it('should call listRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for listRuns call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.listRuns(owner, project, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListRunsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Run);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.project).to.be.a('string');
                expect(data.project).to.be("");
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.started_at).to.be.a(Date);
                expect(data.started_at).to.be(new Date());
                expect(data.finished_at).to.be.a(Date);
                expect(data.finished_at).to.be(new Date());
                expect(data.is_managed).to.be.a('string');
                expect(data.is_managed).to.be("");
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                      expect(data.meta_info.service).to.be.a('boolean');
                  expect(data.meta_info.service).to.be(false);
                  expect(data.meta_info.concurrency).to.be.a('number');
                  expect(data.meta_info.concurrency).to.be(0);
                  expect(data.meta_info.parallel_kind).to.be.a('string');
                  expect(data.meta_info.parallel_kind).to.be("");
                  expect(data.meta_info.run_kind).to.be.a('string');
                  expect(data.meta_info.run_kind).to.be("");
                expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                    expect(data.hub).to.be.a('string');
                expect(data.hub).to.be("");
                expect(data.inputs).to.be.a(Object);
                expect(data.inputs).to.be();
                expect(data.outputs).to.be.a(Object);
                expect(data.outputs).to.be();
                expect(data.run_env).to.be.a(Object);
                expect(data.run_env).to.be();
                expect(data.is_resume).to.be.a('boolean');
                expect(data.is_resume).to.be(false);
                expect(data.is_clone).to.be.a('boolean');
                expect(data.is_clone).to.be(false);
                expect(data.cloning_strategy).to.be.a('string');
                expect(data.cloning_strategy).to.be("");
                expect(data.pipeline).to.be.a('string');
                expect(data.pipeline).to.be("");
                expect(data.original).to.be.a('string');
                expect(data.original).to.be("");
                expect(data.pipeline_name).to.be.a('string');
                expect(data.pipeline_name).to.be("");
                expect(data.original_name).to.be.a('string');
                expect(data.original_name).to.be("");
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchRun', function() {
        it('should call patchRun successfully', function(done) {
          // TODO: uncomment, update parameter values for patchRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.patchRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restartRun', function() {
        it('should call restartRun successfully', function(done) {
          // TODO: uncomment, update parameter values for restartRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.restartRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('restoreRun', function() {
        it('should call restoreRun successfully', function(done) {
          // TODO: uncomment, update parameter values for restoreRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.restoreRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resumeRun', function() {
        it('should call resumeRun successfully', function(done) {
          // TODO: uncomment, update parameter values for resumeRun call and complete the assertions
          /*
          var entity_owner = "entity_owner_example";
          var entity_project = "entity_project_example";
          var entity_uuid = "entity_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.resumeRun(entity_owner, entity_project, entity_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('startRunTensorboard', function() {
        it('should call startRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for startRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1ProjectEntityResourceRequest();
          body.owner = "";
          body.project = "";
          body.uuid = "";

          instance.startRunTensorboard(owner, project, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRun', function() {
        it('should call stopRun successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.stopRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRunTensorboard', function() {
        it('should call stopRunTensorboard successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRunTensorboard call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.stopRunTensorboard(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('stopRuns', function() {
        it('should call stopRuns successfully', function(done) {
          // TODO: uncomment, update parameter values for stopRuns call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1Uuids();
          body.uuids = [""];

          instance.stopRuns(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('unbookmarkRun', function() {
        it('should call unbookmarkRun successfully', function(done) {
          // TODO: uncomment, update parameter values for unbookmarkRun call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";

          instance.unbookmarkRun(owner, project, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('updateRun', function() {
        it('should call updateRun successfully', function(done) {
          // TODO: uncomment, update parameter values for updateRun call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var run_uuid = "run_uuid_example";
          var body = new PolyaxonSdk.V1Run();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.deleted = false;
          body.user = "";
          body.owner = "";
          body.project = "";
          body.created_at = new Date();
          body.updated_at = new Date();
          body.started_at = new Date();
          body.finished_at = new Date();
          body.is_managed = "";
          body.content = "";
          body.status = "";
          body.readme = "";
          body.bookmarked = false;
          body.meta_info = new PolyaxonSdk.V1RunMetaInfo();
          body.meta_info.service = false;
          body.meta_info.concurrency = 0;
          body.meta_info.parallel_kind = "";
          body.meta_info.run_kind = "";
          body.kind = new PolyaxonSdk.V1RunKind();
          body.hub = "";
          body.inputs = ;
          body.outputs = ;
          body.run_env = ;
          body.is_resume = false;
          body.is_clone = false;
          body.cloning_strategy = "";
          body.pipeline = "";
          body.original = "";
          body.pipeline_name = "";
          body.original_name = "";

          instance.updateRun(owner, project, run_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Run);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.project).to.be.a('string');
            expect(data.project).to.be("");
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.started_at).to.be.a(Date);
            expect(data.started_at).to.be(new Date());
            expect(data.finished_at).to.be.a(Date);
            expect(data.finished_at).to.be(new Date());
            expect(data.is_managed).to.be.a('string');
            expect(data.is_managed).to.be("");
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("");
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.meta_info).to.be.a(PolyaxonSdk.V1RunMetaInfo);
                  expect(data.meta_info.service).to.be.a('boolean');
              expect(data.meta_info.service).to.be(false);
              expect(data.meta_info.concurrency).to.be.a('number');
              expect(data.meta_info.concurrency).to.be(0);
              expect(data.meta_info.parallel_kind).to.be.a('string');
              expect(data.meta_info.parallel_kind).to.be("");
              expect(data.meta_info.run_kind).to.be.a('string');
              expect(data.meta_info.run_kind).to.be("");
            expect(data.kind).to.be.a(PolyaxonSdk.V1RunKind);
                expect(data.hub).to.be.a('string');
            expect(data.hub).to.be("");
            expect(data.inputs).to.be.a(Object);
            expect(data.inputs).to.be();
            expect(data.outputs).to.be.a(Object);
            expect(data.outputs).to.be();
            expect(data.run_env).to.be.a(Object);
            expect(data.run_env).to.be();
            expect(data.is_resume).to.be.a('boolean');
            expect(data.is_resume).to.be(false);
            expect(data.is_clone).to.be.a('boolean');
            expect(data.is_clone).to.be(false);
            expect(data.cloning_strategy).to.be.a('string');
            expect(data.cloning_strategy).to.be("");
            expect(data.pipeline).to.be.a('string');
            expect(data.pipeline).to.be("");
            expect(data.original).to.be.a('string');
            expect(data.original).to.be("");
            expect(data.pipeline_name).to.be.a('string');
            expect(data.pipeline_name).to.be("");
            expect(data.original_name).to.be.a('string');
            expect(data.original_name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunArtifact', function() {
        it('should call uploadRunArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunArtifact call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunArtifact(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadRunLogs', function() {
        it('should call uploadRunLogs successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadRunLogs call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadRunLogs(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
