// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.72
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.QueuesV1Api();
  });

  describe('(package)', function() {
    describe('QueuesV1Api', function() {
      describe('queuesV1CreateQueue', function() {
        it('should call queuesV1CreateQueue successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1CreateQueue call and complete the assertions
          /*
          var owner = "owner_example";
          var agent = "agent_example";
          var body = new PolyaxonSdk.V1Queue();
          body.uuid = "";
          body.agent = "";
          body.name = "";
          body.priority = 0;
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.queuesV1CreateQueue(owner, agent, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Agent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.version_api).to.be.a(Object);
            expect(data.version_api).to.be();
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1DeleteQueue', function() {
        it('should call queuesV1DeleteQueue successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1DeleteQueue call
          /*
          var owner = "owner_example";
          var agent = "agent_example";
          var uuid = "uuid_example";

          instance.queuesV1DeleteQueue(owner, agent, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1GetQueue', function() {
        it('should call queuesV1GetQueue successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1GetQueue call and complete the assertions
          /*
          var owner = "owner_example";
          var agent = "agent_example";
          var uuid = "uuid_example";

          instance.queuesV1GetQueue(owner, agent, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Queue);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.agent).to.be.a('string');
            expect(data.agent).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('number');
            expect(data.priority).to.be(0);
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1ListOrganizationQueueNames', function() {
        it('should call queuesV1ListOrganizationQueueNames successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1ListOrganizationQueueNames call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.queuesV1ListOrganizationQueueNames(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListQueuesResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Queue);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.agent).to.be.a('string');
                expect(data.agent).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.priority).to.be.a('number');
                expect(data.priority).to.be(0);
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1ListOrganizationQueues', function() {
        it('should call queuesV1ListOrganizationQueues successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1ListOrganizationQueues call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.queuesV1ListOrganizationQueues(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListQueuesResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Queue);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.agent).to.be.a('string');
                expect(data.agent).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.priority).to.be.a('number');
                expect(data.priority).to.be(0);
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1ListQueueNames', function() {
        it('should call queuesV1ListQueueNames successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1ListQueueNames call and complete the assertions
          /*
          var owner = "owner_example";
          var agent = "agent_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.queuesV1ListQueueNames(owner, agent, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListQueuesResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Queue);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.agent).to.be.a('string');
                expect(data.agent).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.priority).to.be.a('number');
                expect(data.priority).to.be(0);
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1ListQueues', function() {
        it('should call queuesV1ListQueues successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1ListQueues call and complete the assertions
          /*
          var owner = "owner_example";
          var agent = "agent_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.queuesV1ListQueues(owner, agent, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListQueuesResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Queue);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.agent).to.be.a('string');
                expect(data.agent).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.priority).to.be.a('number');
                expect(data.priority).to.be(0);
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1PatchQueue', function() {
        it('should call queuesV1PatchQueue successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1PatchQueue call and complete the assertions
          /*
          var owner = "owner_example";
          var queue_agent = "queue_agent_example";
          var queue_uuid = "queue_uuid_example";
          var body = new PolyaxonSdk.V1Queue();
          body.uuid = "";
          body.agent = "";
          body.name = "";
          body.priority = 0;
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.queuesV1PatchQueue(owner, queue_agent, queue_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Queue);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.agent).to.be.a('string');
            expect(data.agent).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('number');
            expect(data.priority).to.be(0);
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('queuesV1UpdateQueue', function() {
        it('should call queuesV1UpdateQueue successfully', function(done) {
          // TODO: uncomment, update parameter values for queuesV1UpdateQueue call and complete the assertions
          /*
          var owner = "owner_example";
          var queue_agent = "queue_agent_example";
          var queue_uuid = "queue_uuid_example";
          var body = new PolyaxonSdk.V1Queue();
          body.uuid = "";
          body.agent = "";
          body.name = "";
          body.priority = 0;
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();

          instance.queuesV1UpdateQueue(owner, queue_agent, queue_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Queue);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.agent).to.be.a('string');
            expect(data.agent).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.priority).to.be.a('number');
            expect(data.priority).to.be(0);
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
