// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.71
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.ProjectsV1Api();
  });

  describe('(package)', function() {
    describe('ProjectsV1Api', function() {
      describe('projectsV1ArchiveProject', function() {
        it('should call projectsV1ArchiveProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1ArchiveProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1ArchiveProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1BookmarkProject', function() {
        it('should call projectsV1BookmarkProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1BookmarkProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1BookmarkProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1CreateProject', function() {
        it('should call projectsV1CreateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1CreateProject call and complete the assertions
          /*
          var owner = "owner_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.projectsV1CreateProject(owner, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1DeleteProject', function() {
        it('should call projectsV1DeleteProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1DeleteProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1DeleteProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1DisableProjectCI', function() {
        it('should call projectsV1DisableProjectCI successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1DisableProjectCI call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1DisableProjectCI(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1EnableProjectCI', function() {
        it('should call projectsV1EnableProjectCI successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1EnableProjectCI call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1EnableProjectCI(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1FetchProjectTeams', function() {
        it('should call projectsV1FetchProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1FetchProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1FetchProjectTeams(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1GetProject', function() {
        it('should call projectsV1GetProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1GetProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1GetProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1GetProjectSettings', function() {
        it('should call projectsV1GetProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1GetProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1GetProjectSettings(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1ListArchivedProjects', function() {
        it('should call projectsV1ListArchivedProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1ListArchivedProjects call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.projectsV1ListArchivedProjects(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1ListBookmarkedProjects', function() {
        it('should call projectsV1ListBookmarkedProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1ListBookmarkedProjects call and complete the assertions
          /*
          var user = "user_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.projectsV1ListBookmarkedProjects(user, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1ListProjectNames', function() {
        it('should call projectsV1ListProjectNames successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1ListProjectNames call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.projectsV1ListProjectNames(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1ListProjects', function() {
        it('should call projectsV1ListProjects successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1ListProjects call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.projectsV1ListProjects(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListProjectsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Project);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.user_email).to.be.a('string');
                expect(data.user_email).to.be("");
                expect(data.owner).to.be.a('string');
                expect(data.owner).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.is_public).to.be.a('string');
                expect(data.is_public).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.bookmarked).to.be.a('boolean');
                expect(data.bookmarked).to.be(false);
                expect(data.readme).to.be.a('string');
                expect(data.readme).to.be("");
                expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                      expect(data.settings.artifacts_store).to.be.a('string');
                  expect(data.settings.artifacts_store).to.be("");
                  {
                    let dataCtr = data.settings.connections;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  expect(data.settings.run_profile).to.be.a('string');
                  expect(data.settings.run_profile).to.be("");
                  {
                    let dataCtr = data.settings.run_profiles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                {
                  let dataCtr = data.teams;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1PatchProject', function() {
        it('should call projectsV1PatchProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1PatchProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project_name = "project_name_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.projectsV1PatchProject(owner, project_name, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1PatchProjectSettings', function() {
        it('should call projectsV1PatchProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1PatchProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectSettings();
          body.artifacts_store = "";
          body.connections = [""];
          body.run_profile = "";
          body.run_profiles = [""];

          instance.projectsV1PatchProjectSettings(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1PatchProjectTeams', function() {
        it('should call projectsV1PatchProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1PatchProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectTeams();
          body.teams = [""];

          instance.projectsV1PatchProjectTeams(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1RestoreProject', function() {
        it('should call projectsV1RestoreProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1RestoreProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1RestoreProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1UnbookmarkProject', function() {
        it('should call projectsV1UnbookmarkProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1UnbookmarkProject call
          /*
          var owner = "owner_example";
          var project = "project_example";

          instance.projectsV1UnbookmarkProject(owner, project, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1UpdateProject', function() {
        it('should call projectsV1UpdateProject successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1UpdateProject call and complete the assertions
          /*
          var owner = "owner_example";
          var project_name = "project_name_example";
          var body = new PolyaxonSdk.V1Project();
          body.uuid = "";
          body.user = "";
          body.user_email = "";
          body.owner = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.created_at = new Date();
          body.updated_at = new Date();
          body.is_public = "";
          body.deleted = false;
          body.bookmarked = false;
          body.readme = "";
          body.settings = new PolyaxonSdk.V1ProjectSettings();
          body.settings.artifacts_store = "";
          body.settings.connections = [""];
          body.settings.run_profile = "";
          body.settings.run_profiles = [""];
          body.teams = [""];

          instance.projectsV1UpdateProject(owner, project_name, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Project);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.user_email).to.be.a('string');
            expect(data.user_email).to.be("");
            expect(data.owner).to.be.a('string');
            expect(data.owner).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.is_public).to.be.a('string');
            expect(data.is_public).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.bookmarked).to.be.a('boolean');
            expect(data.bookmarked).to.be(false);
            expect(data.readme).to.be.a('string');
            expect(data.readme).to.be("");
            expect(data.settings).to.be.a(PolyaxonSdk.V1ProjectSettings);
                  expect(data.settings.artifacts_store).to.be.a('string');
              expect(data.settings.artifacts_store).to.be("");
              {
                let dataCtr = data.settings.connections;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.settings.run_profile).to.be.a('string');
              expect(data.settings.run_profile).to.be("");
              {
                let dataCtr = data.settings.run_profiles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1UpdateProjectSettings', function() {
        it('should call projectsV1UpdateProjectSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1UpdateProjectSettings call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectSettings();
          body.artifacts_store = "";
          body.connections = [""];
          body.run_profile = "";
          body.run_profiles = [""];

          instance.projectsV1UpdateProjectSettings(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectSettings);
            expect(data.artifacts_store).to.be.a('string');
            expect(data.artifacts_store).to.be("");
            {
              let dataCtr = data.connections;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.run_profile).to.be.a('string');
            expect(data.run_profile).to.be("");
            {
              let dataCtr = data.run_profiles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('projectsV1UpdateProjectTeams', function() {
        it('should call projectsV1UpdateProjectTeams successfully', function(done) {
          // TODO: uncomment, update parameter values for projectsV1UpdateProjectTeams call and complete the assertions
          /*
          var owner = "owner_example";
          var project = "project_example";
          var body = new PolyaxonSdk.V1ProjectTeams();
          body.teams = [""];

          instance.projectsV1UpdateProjectTeams(owner, project, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ProjectTeams);
            {
              let dataCtr = data.teams;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('uploadProjectArtifact', function() {
        it('should call uploadProjectArtifact successfully', function(done) {
          // TODO: uncomment, update parameter values for uploadProjectArtifact call
          /*
          var owner = "owner_example";
          var project = "project_example";
          var uuid = "uuid_example";
          var uploadfile = "/path/to/file.txt";
          var opts = {};
          opts.path = "path_example";
          opts.overwrite = true;

          instance.uploadProjectArtifact(owner, project, uuid, uploadfile, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
