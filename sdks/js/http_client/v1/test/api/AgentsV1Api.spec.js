// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.71
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.AgentsV1Api();
  });

  describe('(package)', function() {
    describe('AgentsV1Api', function() {
      describe('agentsV1CreateAgent', function() {
        it('should call agentsV1CreateAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1CreateAgent call and complete the assertions
          /*
          var owner = "owner_example";
          var body = new PolyaxonSdk.V1Agent();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.namespace = "";
          body.version_api = ;
          body.content = "";
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();
          body.status = new PolyaxonSdk.V1Statuses();

          instance.agentsV1CreateAgent(owner, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Agent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.version_api).to.be.a(Object);
            expect(data.version_api).to.be();
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1CreateAgentStatus', function() {
        it('should call agentsV1CreateAgentStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1CreateAgentStatus call and complete the assertions
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";
          var body = new PolyaxonSdk.V1AgentStatusBodyRequest();
          body.owner = "";
          body.uuid = "";
          body.condition = new PolyaxonSdk.V1StatusCondition();
          body.condition.type = new PolyaxonSdk.V1Statuses();
          body.condition.status = "";
          body.condition.reason = "";
          body.condition.message = "";
          body.condition.last_update_time = new Date();
          body.condition.last_transition_time = new Date();

          instance.agentsV1CreateAgentStatus(owner, uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1DeleteAgent', function() {
        it('should call agentsV1DeleteAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1DeleteAgent call
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.agentsV1DeleteAgent(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1GetAgent', function() {
        it('should call agentsV1GetAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1GetAgent call and complete the assertions
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.agentsV1GetAgent(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Agent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.version_api).to.be.a(Object);
            expect(data.version_api).to.be();
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1GetAgentState', function() {
        it('should call agentsV1GetAgentState successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1GetAgentState call and complete the assertions
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.agentsV1GetAgentState(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1AgentStateResponse);
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                expect(data.state).to.be.a(PolyaxonSdk.AgentStateResponseAgentState);
                  expect(data.state.schedules).to.be.a(Object);
              expect(data.state.schedules).to.be();
              expect(data.state.notifier).to.be.a(Object);
              expect(data.state.notifier).to.be();
              expect(data.state.watchdogs).to.be.a(Object);
              expect(data.state.watchdogs).to.be();
              expect(data.state.tuners).to.be.a(Object);
              expect(data.state.tuners).to.be();
              expect(data.state.queued).to.be.a(Object);
              expect(data.state.queued).to.be();
              expect(data.state.stopping).to.be.a(Object);
              expect(data.state.stopping).to.be();
              expect(data.state.apply).to.be.a(Object);
              expect(data.state.apply).to.be();
              expect(data.state.full).to.be.a('boolean');
              expect(data.state.full).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1GetAgentStatuses', function() {
        it('should call agentsV1GetAgentStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1GetAgentStatuses call and complete the assertions
          /*
          var owner = "owner_example";
          var uuid = "uuid_example";

          instance.agentsV1GetAgentStatuses(owner, uuid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Status);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
                {
              let dataCtr = data.status_conditions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1StatusCondition);
                expect(data.type).to.be.a(PolyaxonSdk.V1Statuses);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("");
                expect(data.reason).to.be.a('string');
                expect(data.reason).to.be("");
                expect(data.message).to.be.a('string');
                expect(data.message).to.be("");
                expect(data.last_update_time).to.be.a(Date);
                expect(data.last_update_time).to.be(new Date());
                expect(data.last_transition_time).to.be.a(Date);
                expect(data.last_transition_time).to.be(new Date());
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1ListAgentNames', function() {
        it('should call agentsV1ListAgentNames successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1ListAgentNames call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.agentsV1ListAgentNames(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListAgentsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Agent);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.disabled).to.be.a('boolean');
                expect(data.disabled).to.be(false);
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.namespace).to.be.a('string');
                expect(data.namespace).to.be("");
                expect(data.version_api).to.be.a(Object);
                expect(data.version_api).to.be();
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
        
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1ListAgents', function() {
        it('should call agentsV1ListAgents successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1ListAgents call and complete the assertions
          /*
          var owner = "owner_example";
          var opts = {};
          opts.offset = 56;
          opts.limit = 56;
          opts.sort = "sort_example";
          opts.query = "query_example";

          instance.agentsV1ListAgents(owner, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1ListAgentsResponse);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(PolyaxonSdk.V1Agent);
                expect(data.uuid).to.be.a('string');
                expect(data.uuid).to.be("");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.disabled).to.be.a('boolean');
                expect(data.disabled).to.be(false);
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.namespace).to.be.a('string');
                expect(data.namespace).to.be("");
                expect(data.version_api).to.be.a(Object);
                expect(data.version_api).to.be();
                expect(data.content).to.be.a('string');
                expect(data.content).to.be("");
                expect(data.concurrency).to.be.a('number');
                expect(data.concurrency).to.be(0);
                expect(data.created_at).to.be.a(Date);
                expect(data.created_at).to.be(new Date());
                expect(data.updated_at).to.be.a(Date);
                expect(data.updated_at).to.be(new Date());
                expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
        
              }
            }
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1PatchAgent', function() {
        it('should call agentsV1PatchAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1PatchAgent call and complete the assertions
          /*
          var owner = "owner_example";
          var agent_uuid = "agent_uuid_example";
          var body = new PolyaxonSdk.V1Agent();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.namespace = "";
          body.version_api = ;
          body.content = "";
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();
          body.status = new PolyaxonSdk.V1Statuses();

          instance.agentsV1PatchAgent(owner, agent_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Agent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.version_api).to.be.a(Object);
            expect(data.version_api).to.be();
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1SyncAgent', function() {
        it('should call agentsV1SyncAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1SyncAgent call
          /*
          var owner = "owner_example";
          var agent_uuid = "agent_uuid_example";
          var body = new PolyaxonSdk.V1Agent();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.namespace = "";
          body.version_api = ;
          body.content = "";
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();
          body.status = new PolyaxonSdk.V1Statuses();

          instance.agentsV1SyncAgent(owner, agent_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('agentsV1UpdateAgent', function() {
        it('should call agentsV1UpdateAgent successfully', function(done) {
          // TODO: uncomment, update parameter values for agentsV1UpdateAgent call and complete the assertions
          /*
          var owner = "owner_example";
          var agent_uuid = "agent_uuid_example";
          var body = new PolyaxonSdk.V1Agent();
          body.uuid = "";
          body.name = "";
          body.description = "";
          body.tags = [""];
          body.disabled = false;
          body.deleted = false;
          body.namespace = "";
          body.version_api = ;
          body.content = "";
          body.concurrency = 0;
          body.created_at = new Date();
          body.updated_at = new Date();
          body.status = new PolyaxonSdk.V1Statuses();

          instance.agentsV1UpdateAgent(owner, agent_uuid, body, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Agent);
            expect(data.uuid).to.be.a('string');
            expect(data.uuid).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.disabled).to.be.a('boolean');
            expect(data.disabled).to.be(false);
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.namespace).to.be.a('string');
            expect(data.namespace).to.be("");
            expect(data.version_api).to.be.a(Object);
            expect(data.version_api).to.be();
            expect(data.content).to.be.a('string');
            expect(data.content).to.be("");
            expect(data.concurrency).to.be.a('number');
            expect(data.concurrency).to.be(0);
            expect(data.created_at).to.be.a(Date);
            expect(data.created_at).to.be(new Date());
            expect(data.updated_at).to.be.a(Date);
            expect(data.updated_at).to.be(new Date());
            expect(data.status).to.be.a(PolyaxonSdk.V1Statuses);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
