// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.SchemasV1Api();
  });

  describe('(package)', function() {
    describe('SchemasV1Api', function() {
      describe('noOp', function() {
        it('should call noOp successfully', function(done) {
          // TODO: uncomment noOp call and complete the assertions
          /*

          instance.noOp(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Schemas);
            expect(data.early_stopping).to.be.a(PolyaxonSdk.V1EarlyStoppingAllSchemas);
                  expect(data.early_stopping.median).to.be.a(PolyaxonSdk.V1MedianStoppingPolicy);
                    expect(data.early_stopping.median.king).to.be.a('string');
                expect(data.early_stopping.median.king).to.be("");
                expect(data.early_stopping.median.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.median.evaluation_interval).to.be("");
              expect(data.early_stopping.average).to.be.a(PolyaxonSdk.V1AverageStoppingPolicy);
                    expect(data.early_stopping.average.king).to.be.a('string');
                expect(data.early_stopping.average.king).to.be("");
                expect(data.early_stopping.average.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.average.evaluation_interval).to.be("");
              expect(data.early_stopping.truncation).to.be.a(PolyaxonSdk.V1TruncationStoppingPolicy);
                    expect(data.early_stopping.truncation.king).to.be.a('string');
                expect(data.early_stopping.truncation.king).to.be("");
                expect(data.early_stopping.truncation.percent).to.be.a('number');
                expect(data.early_stopping.truncation.percent).to.be(0);
                expect(data.early_stopping.truncation.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.truncation.evaluation_interval).to.be("");
              expect(data.early_stopping.metric).to.be.a(PolyaxonSdk.V1MetricEarlyStopping);
                    expect(data.early_stopping.metric.kind).to.be.a('string');
                expect(data.early_stopping.metric.kind).to.be("");
                expect(data.early_stopping.metric.metric).to.be.a('string');
                expect(data.early_stopping.metric.metric).to.be("");
                expect(data.early_stopping.metric.value).to.be.a('string');
                expect(data.early_stopping.metric.value).to.be("");
                expect(data.early_stopping.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
                    {
                  let dataCtr = data.early_stopping.metric.policy;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.early_stopping.failure).to.be.a(PolyaxonSdk.V1FailureEarlyStopping);
                    expect(data.early_stopping.failure.kind).to.be.a('string');
                expect(data.early_stopping.failure.kind).to.be("");
                expect(data.early_stopping.failure.percent).to.be.a('number');
                expect(data.early_stopping.failure.percent).to.be(0);
                expect(data.early_stopping.failure.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.failure.evaluation_interval).to.be("");
            expect(data.mount).to.be.a(PolyaxonSdk.V1Mounts);
                  {
                let dataCtr = data.mount.secrets;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.mount_path).to.be.a('string');
                  expect(data.mount_path).to.be("");
                  {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.mount.config_maps;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  expect(data.mount_path).to.be.a('string');
                  expect(data.mount_path).to.be("");
                  {
                    let dataCtr = data.items;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
              {
                let dataCtr = data.mount.artifacts;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                  expect(data.name).to.be.a('string');
                  expect(data.name).to.be("");
                  {
                    let dataCtr = data.paths;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                }
              }
            expect(data.parallel).to.be.a(PolyaxonSdk.V1ParallelAllSchemas);
                  expect(data.parallel.random).to.be.a(PolyaxonSdk.V1RandomSearch);
                    expect(data.parallel.random.kind).to.be.a('string');
                expect(data.parallel.random.kind).to.be("");
                expect(data.parallel.random.matrix).to.be.a('string');
                expect(data.parallel.random.matrix).to.be("");
                expect(data.parallel.random.n_runs).to.be.a('string');
                expect(data.parallel.random.n_runs).to.be("");
                expect(data.parallel.random.seed).to.be.a('string');
                expect(data.parallel.random.seed).to.be("");
                expect(data.parallel.random.concurrency).to.be.a('string');
                expect(data.parallel.random.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.random.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.grid).to.be.a(PolyaxonSdk.V1GridSearch);
                    expect(data.parallel.grid.kind).to.be.a('string');
                expect(data.parallel.grid.kind).to.be("");
                expect(data.parallel.grid.matrix).to.be.a('string');
                expect(data.parallel.grid.matrix).to.be("");
                expect(data.parallel.grid.n_runs).to.be.a('string');
                expect(data.parallel.grid.n_runs).to.be("");
                expect(data.parallel.grid.seed).to.be.a('string');
                expect(data.parallel.grid.seed).to.be("");
                expect(data.parallel.grid.concurrency).to.be.a('string');
                expect(data.parallel.grid.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.grid.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperband).to.be.a(PolyaxonSdk.V1Hyperband);
                    expect(data.parallel.hyperband.kind).to.be.a('string');
                expect(data.parallel.hyperband.kind).to.be("");
                expect(data.parallel.hyperband.matrix).to.be.a('string');
                expect(data.parallel.hyperband.matrix).to.be("");
                expect(data.parallel.hyperband.eta).to.be.a('string');
                expect(data.parallel.hyperband.eta).to.be("");
                expect(data.parallel.hyperband.resource).to.be.a(PolyaxonSdk.V1OptimizationResource);
                      expect(data.parallel.hyperband.resource.name).to.be.a('string');
                  expect(data.parallel.hyperband.resource.name).to.be("");
                  expect(data.parallel.hyperband.resource.type).to.be.a(PolyaxonSdk.V1ResourceType);
          
                expect(data.parallel.hyperband.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.hyperband.metric.name).to.be.a('string');
                  expect(data.parallel.hyperband.metric.name).to.be("");
                  expect(data.parallel.hyperband.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.hyperband.resume).to.be.a('boolean');
                expect(data.parallel.hyperband.resume).to.be(false);
                expect(data.parallel.hyperband.seed).to.be.a('string');
                expect(data.parallel.hyperband.seed).to.be("");
                expect(data.parallel.hyperband.concurrency).to.be.a('string');
                expect(data.parallel.hyperband.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.hyperband.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.bo).to.be.a(PolyaxonSdk.V1BO);
                    expect(data.parallel.bo.kind).to.be.a('string');
                expect(data.parallel.bo.kind).to.be("");
                expect(data.parallel.bo.matrix).to.be.a('string');
                expect(data.parallel.bo.matrix).to.be("");
                expect(data.parallel.bo.n_initial_trials).to.be.a('number');
                expect(data.parallel.bo.n_initial_trials).to.be(0);
                expect(data.parallel.bo.n_iterations).to.be.a('number');
                expect(data.parallel.bo.n_iterations).to.be(0);
                {
                  let dataCtr = data.parallel.bo.utility_function;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.parallel.bo.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.bo.metric.name).to.be.a('string');
                  expect(data.parallel.bo.metric.name).to.be("");
                  expect(data.parallel.bo.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.bo.seed).to.be.a('string');
                expect(data.parallel.bo.seed).to.be("");
                expect(data.parallel.bo.concurrency).to.be.a('string');
                expect(data.parallel.bo.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.bo.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperopt).to.be.a(PolyaxonSdk.V1Hyperopt);
                    expect(data.parallel.hyperopt.kind).to.be.a('string');
                expect(data.parallel.hyperopt.kind).to.be("");
                expect(data.parallel.hyperopt.algorithm).to.be.a(PolyaxonSdk.V1HyperoptAlgorithms);
                    expect(data.parallel.hyperopt.matrix).to.be.a('string');
                expect(data.parallel.hyperopt.matrix).to.be("");
                expect(data.parallel.hyperopt.n_runs).to.be.a('string');
                expect(data.parallel.hyperopt.n_runs).to.be("");
                expect(data.parallel.hyperopt.seed).to.be.a('string');
                expect(data.parallel.hyperopt.seed).to.be("");
                expect(data.parallel.hyperopt.concurrency).to.be.a('string');
                expect(data.parallel.hyperopt.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.hyperopt.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.iterative).to.be.a(PolyaxonSdk.V1Iterative);
                    expect(data.parallel.iterative.kind).to.be.a('string');
                expect(data.parallel.iterative.kind).to.be("");
                expect(data.parallel.iterative.matrix).to.be.a('string');
                expect(data.parallel.iterative.matrix).to.be("");
                expect(data.parallel.iterative.n_iterations).to.be.a('number');
                expect(data.parallel.iterative.n_iterations).to.be(0);
                expect(data.parallel.iterative.container).to.be.a(PolyaxonSdk.V1Container);
                      expect(data.parallel.iterative.container.kind).to.be.a('string');
                  expect(data.parallel.iterative.container.kind).to.be("");
                  expect(data.parallel.iterative.container.image).to.be.a('string');
                  expect(data.parallel.iterative.container.image).to.be("");
                  expect(data.parallel.iterative.container.image_pull_policy).to.be.a('string');
                  expect(data.parallel.iterative.container.image_pull_policy).to.be("");
                  {
                    let dataCtr = data.parallel.iterative.container.command;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.parallel.iterative.container.args;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                expect(data.parallel.iterative.seed).to.be.a('string');
                expect(data.parallel.iterative.seed).to.be("");
                expect(data.parallel.iterative.concurrency).to.be.a('string');
                expect(data.parallel.iterative.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.iterative.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.mapping).to.be.a(PolyaxonSdk.V1Mapping);
                    expect(data.parallel.mapping.kind).to.be.a('string');
                expect(data.parallel.mapping.kind).to.be("");
                expect(data.parallel.mapping.values).to.be.a('string');
                expect(data.parallel.mapping.values).to.be("");
                expect(data.parallel.mapping.concurrency).to.be.a('string');
                expect(data.parallel.mapping.concurrency).to.be("");
                {
                  let dataCtr = data.parallel.mapping.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
            expect(data.schedule).to.be.a(PolyaxonSdk.V1ScheduleAllSchemas);
                  expect(data.schedule.cron).to.be.a(PolyaxonSdk.V1CronSchedule);
                    expect(data.schedule.cron.kind).to.be.a('string');
                expect(data.schedule.cron.kind).to.be("");
                expect(data.schedule.cron.start_at).to.be.a(Date);
                expect(data.schedule.cron.start_at).to.be(new Date());
                expect(data.schedule.cron.end_at).to.be.a(Date);
                expect(data.schedule.cron.end_at).to.be(new Date());
                expect(data.schedule.cron.cron).to.be.a('string');
                expect(data.schedule.cron.cron).to.be("");
                expect(data.schedule.cron.depends_on_past).to.be.a('boolean');
                expect(data.schedule.cron.depends_on_past).to.be(false);
              expect(data.schedule.exact_time).to.be.a(PolyaxonSdk.V1ExactTimeSchedule);
                    expect(data.schedule.exact_time.kind).to.be.a('string');
                expect(data.schedule.exact_time.kind).to.be("");
                expect(data.schedule.exact_time.start_at).to.be.a(Date);
                expect(data.schedule.exact_time.start_at).to.be(new Date());
              expect(data.schedule.interval).to.be.a(PolyaxonSdk.V1IntervalSchedule);
                    expect(data.schedule.interval.kind).to.be.a('string');
                expect(data.schedule.interval.kind).to.be("");
                expect(data.schedule.interval.start_at).to.be.a(Date);
                expect(data.schedule.interval.start_at).to.be(new Date());
                expect(data.schedule.interval.end_at).to.be.a(Date);
                expect(data.schedule.interval.end_at).to.be(new Date());
                expect(data.schedule.interval.frequency).to.be.a('string');
                expect(data.schedule.interval.frequency).to.be("");
                expect(data.schedule.interval.depends_on_past).to.be.a('boolean');
                expect(data.schedule.interval.depends_on_past).to.be(false);
              expect(data.schedule.repeatable).to.be.a(PolyaxonSdk.V1RepeatableSchedule);
                    expect(data.schedule.repeatable.kind).to.be.a('string');
                expect(data.schedule.repeatable.kind).to.be("");
                expect(data.schedule.repeatable.limit).to.be.a('string');
                expect(data.schedule.repeatable.limit).to.be("");
                expect(data.schedule.repeatable.depends_on_past).to.be.a('boolean');
                expect(data.schedule.repeatable.depends_on_past).to.be(false);
            expect(data.termination).to.be.a(PolyaxonSdk.V1Termination);
                  expect(data.termination.max_retries).to.be.a('number');
              expect(data.termination.max_retries).to.be(0);
              expect(data.termination.restart_policy).to.be.a('string');
              expect(data.termination.restart_policy).to.be("");
              expect(data.termination.ttl).to.be.a('string');
              expect(data.termination.ttl).to.be("");
              expect(data.termination.timeout).to.be.a('string');
              expect(data.termination.timeout).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
