// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PolyaxonSdk);
  }
}(this, function(expect, PolyaxonSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PolyaxonSdk.SchemasV1Api();
  });

  describe('(package)', function() {
    describe('SchemasV1Api', function() {
      describe('noOp', function() {
        it('should call noOp successfully', function(done) {
          // TODO: uncomment noOp call and complete the assertions
          /*

          instance.noOp(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(PolyaxonSdk.V1Schemas);
            expect(data.op_condition).to.be.a(PolyaxonSdk.V1OpCondition);
                  expect(data.op_condition.op_io_conidtion).to.be.a(PolyaxonSdk.V1OpIOCondition);
                    expect(data.op_condition.op_io_conidtion.kind).to.be.a('string');
                expect(data.op_condition.op_io_conidtion.kind).to.be("");
                expect(data.op_condition.op_io_conidtion.param).to.be.a('string');
                expect(data.op_condition.op_io_conidtion.param).to.be("");
                expect(data.op_condition.op_io_conidtion.trigger).to.be.a('string');
                expect(data.op_condition.op_io_conidtion.trigger).to.be("");
              expect(data.op_condition.op_status_condition).to.be.a(PolyaxonSdk.V1OpStatusCondition);
                    expect(data.op_condition.op_status_condition.kind).to.be.a('string');
                expect(data.op_condition.op_status_condition.kind).to.be("");
                expect(data.op_condition.op_status_condition.op).to.be.a('string');
                expect(data.op_condition.op_status_condition.op).to.be("");
                expect(data.op_condition.op_status_condition.trigger).to.be.a('string');
                expect(data.op_condition.op_status_condition.trigger).to.be("");
            expect(data.early_stopping).to.be.a(PolyaxonSdk.V1EarlyStopping);
                  expect(data.early_stopping.median).to.be.a(PolyaxonSdk.V1MedianStoppingPolicy);
                    expect(data.early_stopping.median.kind).to.be.a('string');
                expect(data.early_stopping.median.kind).to.be("");
                expect(data.early_stopping.median.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.median.evaluation_interval).to.be(0);
              expect(data.early_stopping.average).to.be.a(PolyaxonSdk.V1AverageStoppingPolicy);
                    expect(data.early_stopping.average.kind).to.be.a('string');
                expect(data.early_stopping.average.kind).to.be("");
                expect(data.early_stopping.average.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.average.evaluation_interval).to.be(0);
              expect(data.early_stopping.truncation).to.be.a(PolyaxonSdk.V1TruncationStoppingPolicy);
                    expect(data.early_stopping.truncation.kind).to.be.a('string');
                expect(data.early_stopping.truncation.kind).to.be("");
                expect(data.early_stopping.truncation.percent).to.be.a('number');
                expect(data.early_stopping.truncation.percent).to.be(0);
                expect(data.early_stopping.truncation.evaluation_interval).to.be.a('number');
                expect(data.early_stopping.truncation.evaluation_interval).to.be(0);
              expect(data.early_stopping.metric).to.be.a(PolyaxonSdk.V1MetricEarlyStopping);
                    expect(data.early_stopping.metric.kind).to.be.a('string');
                expect(data.early_stopping.metric.kind).to.be("");
                expect(data.early_stopping.metric.metric).to.be.a('string');
                expect(data.early_stopping.metric.metric).to.be("");
                expect(data.early_stopping.metric.value).to.be.a('string');
                expect(data.early_stopping.metric.value).to.be("");
                expect(data.early_stopping.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
                    {
                  let dataCtr = data.early_stopping.metric.policy;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.early_stopping.failure).to.be.a(PolyaxonSdk.V1FailureEarlyStopping);
                    expect(data.early_stopping.failure.kind).to.be.a('string');
                expect(data.early_stopping.failure.kind).to.be("");
                expect(data.early_stopping.failure.percent).to.be.a('number');
                expect(data.early_stopping.failure.percent).to.be(0);
                expect(data.early_stopping.failure.evaluation_interval).to.be.a('string');
                expect(data.early_stopping.failure.evaluation_interval).to.be("");
            expect(data.parallel).to.be.a(PolyaxonSdk.V1Parallel);
                  expect(data.parallel.random).to.be.a(PolyaxonSdk.V1RandomSearch);
                    expect(data.parallel.random.kind).to.be.a('string');
                expect(data.parallel.random.kind).to.be("");
                expect(data.parallel.random.matrix).to.be.a('string');
                expect(data.parallel.random.matrix).to.be("");
                expect(data.parallel.random.n_runs).to.be.a('number');
                expect(data.parallel.random.n_runs).to.be(0);
                expect(data.parallel.random.seed).to.be.a('number');
                expect(data.parallel.random.seed).to.be(0);
                expect(data.parallel.random.concurrency).to.be.a('number');
                expect(data.parallel.random.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.random.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.grid).to.be.a(PolyaxonSdk.V1GridSearch);
                    expect(data.parallel.grid.kind).to.be.a('string');
                expect(data.parallel.grid.kind).to.be("");
                expect(data.parallel.grid.matrix).to.be.a('string');
                expect(data.parallel.grid.matrix).to.be("");
                expect(data.parallel.grid.n_runs).to.be.a('number');
                expect(data.parallel.grid.n_runs).to.be(0);
                expect(data.parallel.grid.seed).to.be.a('number');
                expect(data.parallel.grid.seed).to.be(0);
                expect(data.parallel.grid.concurrency).to.be.a('number');
                expect(data.parallel.grid.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.grid.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperband).to.be.a(PolyaxonSdk.V1Hyperband);
                    expect(data.parallel.hyperband.kind).to.be.a('string');
                expect(data.parallel.hyperband.kind).to.be("");
                expect(data.parallel.hyperband.matrix).to.be.a('string');
                expect(data.parallel.hyperband.matrix).to.be("");
                expect(data.parallel.hyperband.max_iter).to.be.a('number');
                expect(data.parallel.hyperband.max_iter).to.be(0);
                expect(data.parallel.hyperband.eta).to.be.a('number');
                expect(data.parallel.hyperband.eta).to.be(0);
                expect(data.parallel.hyperband.resource).to.be.a(PolyaxonSdk.V1OptimizationResource);
                      expect(data.parallel.hyperband.resource.name).to.be.a('string');
                  expect(data.parallel.hyperband.resource.name).to.be("");
                  expect(data.parallel.hyperband.resource.type).to.be.a(PolyaxonSdk.V1ResourceType);
          
                expect(data.parallel.hyperband.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.hyperband.metric.name).to.be.a('string');
                  expect(data.parallel.hyperband.metric.name).to.be("");
                  expect(data.parallel.hyperband.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.hyperband.resume).to.be.a('boolean');
                expect(data.parallel.hyperband.resume).to.be(false);
                expect(data.parallel.hyperband.seed).to.be.a('number');
                expect(data.parallel.hyperband.seed).to.be(0);
                expect(data.parallel.hyperband.concurrency).to.be.a('number');
                expect(data.parallel.hyperband.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.hyperband.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.bo).to.be.a(PolyaxonSdk.V1BO);
                    expect(data.parallel.bo.kind).to.be.a('string');
                expect(data.parallel.bo.kind).to.be("");
                expect(data.parallel.bo.matrix).to.be.a('string');
                expect(data.parallel.bo.matrix).to.be("");
                expect(data.parallel.bo.n_initial_trials).to.be.a('number');
                expect(data.parallel.bo.n_initial_trials).to.be(0);
                expect(data.parallel.bo.n_iterations).to.be.a('number');
                expect(data.parallel.bo.n_iterations).to.be(0);
                expect(data.parallel.bo.utility_function).to.be.a(Object);
                expect(data.parallel.bo.utility_function).to.be();
                expect(data.parallel.bo.metric).to.be.a(PolyaxonSdk.V1OptimizationMetric);
                      expect(data.parallel.bo.metric.name).to.be.a('string');
                  expect(data.parallel.bo.metric.name).to.be("");
                  expect(data.parallel.bo.metric.optimization).to.be.a(PolyaxonSdk.V1Optimization);
          
                expect(data.parallel.bo.seed).to.be.a('number');
                expect(data.parallel.bo.seed).to.be(0);
                expect(data.parallel.bo.concurrency).to.be.a('number');
                expect(data.parallel.bo.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.bo.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.hyperopt).to.be.a(PolyaxonSdk.V1Hyperopt);
                    expect(data.parallel.hyperopt.kind).to.be.a('string');
                expect(data.parallel.hyperopt.kind).to.be("");
                expect(data.parallel.hyperopt.algorithm).to.be.a(PolyaxonSdk.V1HyperoptAlgorithms);
                    expect(data.parallel.hyperopt.matrix).to.be.a('string');
                expect(data.parallel.hyperopt.matrix).to.be("");
                expect(data.parallel.hyperopt.n_runs).to.be.a('number');
                expect(data.parallel.hyperopt.n_runs).to.be(0);
                expect(data.parallel.hyperopt.seed).to.be.a('number');
                expect(data.parallel.hyperopt.seed).to.be(0);
                expect(data.parallel.hyperopt.concurrency).to.be.a('number');
                expect(data.parallel.hyperopt.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.hyperopt.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.iterative).to.be.a(PolyaxonSdk.V1Iterative);
                    expect(data.parallel.iterative.kind).to.be.a('string');
                expect(data.parallel.iterative.kind).to.be("");
                expect(data.parallel.iterative.matrix).to.be.a('string');
                expect(data.parallel.iterative.matrix).to.be("");
                expect(data.parallel.iterative.n_iterations).to.be.a('number');
                expect(data.parallel.iterative.n_iterations).to.be(0);
                expect(data.parallel.iterative.container).to.be.a(PolyaxonSdk.V1Container);
                      expect(data.parallel.iterative.container.kind).to.be.a('string');
                  expect(data.parallel.iterative.container.kind).to.be("");
                  expect(data.parallel.iterative.container.image).to.be.a('string');
                  expect(data.parallel.iterative.container.image).to.be("");
                  expect(data.parallel.iterative.container.image_pull_policy).to.be.a('string');
                  expect(data.parallel.iterative.container.image_pull_policy).to.be("");
                  {
                    let dataCtr = data.parallel.iterative.container.command;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.parallel.iterative.container.args;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                expect(data.parallel.iterative.seed).to.be.a('number');
                expect(data.parallel.iterative.seed).to.be(0);
                expect(data.parallel.iterative.concurrency).to.be.a('number');
                expect(data.parallel.iterative.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.iterative.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.parallel.mapping).to.be.a(PolyaxonSdk.V1Mapping);
                    expect(data.parallel.mapping.kind).to.be.a('string');
                expect(data.parallel.mapping.kind).to.be("");
                expect(data.parallel.mapping.values).to.be.a('string');
                expect(data.parallel.mapping.values).to.be("");
                expect(data.parallel.mapping.concurrency).to.be.a('number');
                expect(data.parallel.mapping.concurrency).to.be(0);
                {
                  let dataCtr = data.parallel.mapping.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
            expect(data.op).to.be.a(PolyaxonSdk.V1Op);
                  expect(data.op.version).to.be.a('number');
              expect(data.op.version).to.be(0.0);
              expect(data.op.kind).to.be.a('string');
              expect(data.op.kind).to.be("");
              expect(data.op.name).to.be.a('string');
              expect(data.op.name).to.be("");
              expect(data.op.tag).to.be.a('string');
              expect(data.op.tag).to.be("");
              expect(data.op.description).to.be.a('string');
              expect(data.op.description).to.be("");
              {
                let dataCtr = data.op.tags;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.op.profile).to.be.a('string');
              expect(data.op.profile).to.be("");
              expect(data.op.queue).to.be.a('string');
              expect(data.op.queue).to.be("");
              expect(data.op.nocache).to.be.a('boolean');
              expect(data.op.nocache).to.be(false);
              expect(data.op.environment).to.be.a(PolyaxonSdk.V1Environment);
                    expect(data.op.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                      expect(data.op.environment.resources.limits).to.be.a(Object);
                  expect(data.op.environment.resources.limits).to.be();
                  expect(data.op.environment.resources.requests).to.be.a(Object);
                  expect(data.op.environment.resources.requests).to.be();
                {
                  let dataCtr = data.op.environment.labels;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.op.environment.annotations;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.op.environment.node_selector;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.op.environment.affinity;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                {
                  let dataCtr = data.op.environment.tolerations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.op.environment.service_account).to.be.a('string');
                expect(data.op.environment.service_account).to.be("");
                {
                  let dataCtr = data.op.environment.image_pull_secrets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.op.environment.env_vars;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
                expect(data.op.environment.security_context).to.be.a(Object);
                expect(data.op.environment.security_context).to.be();
                expect(data.op.environment.log_level).to.be.a('string');
                expect(data.op.environment.log_level).to.be("");
                expect(data.op.environment.auth).to.be.a('boolean');
                expect(data.op.environment.auth).to.be(false);
                expect(data.op.environment.docker).to.be.a('boolean');
                expect(data.op.environment.docker).to.be(false);
                expect(data.op.environment.shm).to.be.a('boolean');
                expect(data.op.environment.shm).to.be(false);
                expect(data.op.environment.outputs).to.be.a('boolean');
                expect(data.op.environment.outputs).to.be(false);
                expect(data.op.environment.logs).to.be.a('boolean');
                expect(data.op.environment.logs).to.be(false);
                expect(data.op.environment.registry).to.be.a('string');
                expect(data.op.environment.registry).to.be("");
                expect(data.op.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                      expect(data.op.environment.init_container.image).to.be.a('string');
                  expect(data.op.environment.init_container.image).to.be("");
                  expect(data.op.environment.init_container.image_pull_policy).to.be.a('string');
                  expect(data.op.environment.init_container.image_pull_policy).to.be("");
                  expect(data.op.environment.init_container.sleep_interval).to.be.a('number');
                  expect(data.op.environment.init_container.sleep_interval).to.be(0);
                  expect(data.op.environment.init_container.outputs_sync_interval).to.be.a('number');
                  expect(data.op.environment.init_container.outputs_sync_interval).to.be(0);
                  expect(data.op.environment.init_container.logs_sync_interval).to.be.a('number');
                  expect(data.op.environment.init_container.logs_sync_interval).to.be(0);
                expect(data.op.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                      expect(data.op.environment.sidecar_container.image).to.be.a('string');
                  expect(data.op.environment.sidecar_container.image).to.be("");
                  expect(data.op.environment.sidecar_container.image_pull_policy).to.be.a('string');
                  expect(data.op.environment.sidecar_container.image_pull_policy).to.be("");
                  expect(data.op.environment.sidecar_container.sleep_interval).to.be.a('number');
                  expect(data.op.environment.sidecar_container.sleep_interval).to.be(0);
                  expect(data.op.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                  expect(data.op.environment.sidecar_container.outputs_sync_interval).to.be(0);
                  expect(data.op.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                  expect(data.op.environment.sidecar_container.logs_sync_interval).to.be(0);
              expect(data.op.termination).to.be.a(PolyaxonSdk.V1Termination);
                    expect(data.op.termination.max_retries).to.be.a('number');
                expect(data.op.termination.max_retries).to.be(0);
                expect(data.op.termination.restart_policy).to.be.a('string');
                expect(data.op.termination.restart_policy).to.be("");
                expect(data.op.termination.ttl).to.be.a('number');
                expect(data.op.termination.ttl).to.be(0);
                expect(data.op.termination.timeout).to.be.a('number');
                expect(data.op.termination.timeout).to.be(0);
              expect(data.op.init).to.be.a(PolyaxonSdk.V1Init);
                    {
                  let dataCtr = data.op.init.repos;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.commit).to.be.a('string');
                    expect(data.commit).to.be("");
                    expect(data.branch).to.be.a('string');
                    expect(data.branch).to.be("");
                  }
                }
                {
                  let dataCtr = data.op.init.artifacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.paths;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  }
                }
                expect(data.op.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                      expect(data.op.init.build.image).to.be.a('string');
                  expect(data.op.init.build.image).to.be("");
                  {
                    let dataCtr = data.op.init.build.env;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  {
                    let dataCtr = data.op.init.build.path;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  {
                    let dataCtr = data.op.init.build.copy;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  {
                    let dataCtr = data.op.init.build.run;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  expect(data.op.init.build.lang_env).to.be.a('string');
                  expect(data.op.init.build.lang_env).to.be("");
                  expect(data.op.init.build.uid).to.be.a('number');
                  expect(data.op.init.build.uid).to.be(0);
                  expect(data.op.init.build.gid).to.be.a('number');
                  expect(data.op.init.build.gid).to.be(0);
                  expect(data.op.init.build.filename).to.be.a('string');
                  expect(data.op.init.build.filename).to.be("");
                  expect(data.op.init.build.workdir).to.be.a('string');
                  expect(data.op.init.build.workdir).to.be("");
                  expect(data.op.init.build.workdir_path).to.be.a('string');
                  expect(data.op.init.build.workdir_path).to.be("");
                  expect(data.op.init.build.shell).to.be.a('string');
                  expect(data.op.init.build.shell).to.be("");
              expect(data.op.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                    {
                  let dataCtr = data.op.mounts.secrets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.mount_path).to.be.a('string');
                    expect(data.mount_path).to.be("");
                    {
                      let dataCtr = data.items;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  }
                }
                {
                  let dataCtr = data.op.mounts.config_maps;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.mount_path).to.be.a('string');
                    expect(data.mount_path).to.be("");
                    {
                      let dataCtr = data.items;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  }
                }
                {
                  let dataCtr = data.op.mounts.artifacts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    {
                      let dataCtr = data.paths;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                  }
                }
              expect(data.op.schedule).to.be.a(Object);
              expect(data.op.schedule).to.be();
              expect(data.op.parallel).to.be.a(Object);
              expect(data.op.parallel).to.be();
              expect(data.op.service).to.be.a(PolyaxonSdk.V1Service);
                    expect(data.op.service.enabled).to.be.a('boolean');
                expect(data.op.service.enabled).to.be(false);
                {
                  let dataCtr = data.op.service.ports;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
              {
                let dataCtr = data.op.dependencies;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.op.trigger).to.be.a(PolyaxonSdk.V1TriggerPolicy);
                  {
                let dataCtr = data.op.conditions;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(Object);
                  expect(data).to.be();
                }
              }
              expect(data.op.skip_on_upstream_skip).to.be.a('boolean');
              expect(data.op.skip_on_upstream_skip).to.be(false);
              expect(data.op.params).to.be.a(Object);
              expect(data.op.params).to.be();
              expect(data.op.component_ref).to.be.a(PolyaxonSdk.V1ComponentRef);
                    expect(data.op.component_ref.name).to.be.a('string');
                expect(data.op.component_ref.name).to.be("");
                expect(data.op.component_ref.url).to.be.a('string');
                expect(data.op.component_ref.url).to.be("");
                expect(data.op.component_ref.path).to.be.a('string');
                expect(data.op.component_ref.path).to.be("");
                expect(data.op.component_ref.hub).to.be.a('string');
                expect(data.op.component_ref.hub).to.be("");
              expect(data.op.component).to.be.a(PolyaxonSdk.V1Component);
                    expect(data.op.component.version).to.be.a('number');
                expect(data.op.component.version).to.be(0.0);
                expect(data.op.component.kind).to.be.a('string');
                expect(data.op.component.kind).to.be("");
                expect(data.op.component.name).to.be.a('string');
                expect(data.op.component.name).to.be("");
                expect(data.op.component.tag).to.be.a('string');
                expect(data.op.component.tag).to.be("");
                expect(data.op.component.description).to.be.a('string');
                expect(data.op.component.description).to.be("");
                {
                  let dataCtr = data.op.component.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.op.component.profile).to.be.a('string');
                expect(data.op.component.profile).to.be("");
                expect(data.op.component.queue).to.be.a('string');
                expect(data.op.component.queue).to.be("");
                expect(data.op.component.nocache).to.be.a('boolean');
                expect(data.op.component.nocache).to.be(false);
                expect(data.op.component.environment).to.be.a(PolyaxonSdk.V1Environment);
                      expect(data.op.component.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                        expect(data.op.component.environment.resources.limits).to.be.a(Object);
                    expect(data.op.component.environment.resources.limits).to.be();
                    expect(data.op.component.environment.resources.requests).to.be.a(Object);
                    expect(data.op.component.environment.resources.requests).to.be();
                  {
                    let dataCtr = data.op.component.environment.labels;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.op.component.environment.annotations;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.op.component.environment.node_selector;
                    expect(dataCtr).to.be.an(Object);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.op.component.environment.affinity;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  {
                    let dataCtr = data.op.component.environment.tolerations;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  expect(data.op.component.environment.service_account).to.be.a('string');
                  expect(data.op.component.environment.service_account).to.be("");
                  {
                    let dataCtr = data.op.component.environment.image_pull_secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('string');
                      expect(data).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.op.component.environment.env_vars;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(Object);
                      expect(data).to.be();
                    }
                  }
                  expect(data.op.component.environment.security_context).to.be.a(Object);
                  expect(data.op.component.environment.security_context).to.be();
                  expect(data.op.component.environment.log_level).to.be.a('string');
                  expect(data.op.component.environment.log_level).to.be("");
                  expect(data.op.component.environment.auth).to.be.a('boolean');
                  expect(data.op.component.environment.auth).to.be(false);
                  expect(data.op.component.environment.docker).to.be.a('boolean');
                  expect(data.op.component.environment.docker).to.be(false);
                  expect(data.op.component.environment.shm).to.be.a('boolean');
                  expect(data.op.component.environment.shm).to.be(false);
                  expect(data.op.component.environment.outputs).to.be.a('boolean');
                  expect(data.op.component.environment.outputs).to.be(false);
                  expect(data.op.component.environment.logs).to.be.a('boolean');
                  expect(data.op.component.environment.logs).to.be(false);
                  expect(data.op.component.environment.registry).to.be.a('string');
                  expect(data.op.component.environment.registry).to.be("");
                  expect(data.op.component.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                        expect(data.op.component.environment.init_container.image).to.be.a('string');
                    expect(data.op.component.environment.init_container.image).to.be("");
                    expect(data.op.component.environment.init_container.image_pull_policy).to.be.a('string');
                    expect(data.op.component.environment.init_container.image_pull_policy).to.be("");
                    expect(data.op.component.environment.init_container.sleep_interval).to.be.a('number');
                    expect(data.op.component.environment.init_container.sleep_interval).to.be(0);
                    expect(data.op.component.environment.init_container.outputs_sync_interval).to.be.a('number');
                    expect(data.op.component.environment.init_container.outputs_sync_interval).to.be(0);
                    expect(data.op.component.environment.init_container.logs_sync_interval).to.be.a('number');
                    expect(data.op.component.environment.init_container.logs_sync_interval).to.be(0);
                  expect(data.op.component.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                        expect(data.op.component.environment.sidecar_container.image).to.be.a('string');
                    expect(data.op.component.environment.sidecar_container.image).to.be("");
                    expect(data.op.component.environment.sidecar_container.image_pull_policy).to.be.a('string');
                    expect(data.op.component.environment.sidecar_container.image_pull_policy).to.be("");
                    expect(data.op.component.environment.sidecar_container.sleep_interval).to.be.a('number');
                    expect(data.op.component.environment.sidecar_container.sleep_interval).to.be(0);
                    expect(data.op.component.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                    expect(data.op.component.environment.sidecar_container.outputs_sync_interval).to.be(0);
                    expect(data.op.component.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                    expect(data.op.component.environment.sidecar_container.logs_sync_interval).to.be(0);
                expect(data.op.component.termination).to.be.a(PolyaxonSdk.V1Termination);
                      expect(data.op.component.termination.max_retries).to.be.a('number');
                  expect(data.op.component.termination.max_retries).to.be(0);
                  expect(data.op.component.termination.restart_policy).to.be.a('string');
                  expect(data.op.component.termination.restart_policy).to.be("");
                  expect(data.op.component.termination.ttl).to.be.a('number');
                  expect(data.op.component.termination.ttl).to.be(0);
                  expect(data.op.component.termination.timeout).to.be.a('number');
                  expect(data.op.component.termination.timeout).to.be(0);
                expect(data.op.component.init).to.be.a(PolyaxonSdk.V1Init);
                      {
                    let dataCtr = data.op.component.init.repos;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.commit).to.be.a('string');
                      expect(data.commit).to.be("");
                      expect(data.branch).to.be.a('string');
                      expect(data.branch).to.be("");
                    }
                  }
                  {
                    let dataCtr = data.op.component.init.artifacts;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      {
                        let dataCtr = data.paths;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    }
                  }
                  expect(data.op.component.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                        expect(data.op.component.init.build.image).to.be.a('string');
                    expect(data.op.component.init.build.image).to.be("");
                    {
                      let dataCtr = data.op.component.init.build.env;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.op.component.init.build.path;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.op.component.init.build.copy;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.op.component.init.build.run;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.op.component.init.build.lang_env).to.be.a('string');
                    expect(data.op.component.init.build.lang_env).to.be("");
                    expect(data.op.component.init.build.uid).to.be.a('number');
                    expect(data.op.component.init.build.uid).to.be(0);
                    expect(data.op.component.init.build.gid).to.be.a('number');
                    expect(data.op.component.init.build.gid).to.be(0);
                    expect(data.op.component.init.build.filename).to.be.a('string');
                    expect(data.op.component.init.build.filename).to.be("");
                    expect(data.op.component.init.build.workdir).to.be.a('string');
                    expect(data.op.component.init.build.workdir).to.be("");
                    expect(data.op.component.init.build.workdir_path).to.be.a('string');
                    expect(data.op.component.init.build.workdir_path).to.be("");
                    expect(data.op.component.init.build.shell).to.be.a('string');
                    expect(data.op.component.init.build.shell).to.be("");
                expect(data.op.component.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                      {
                    let dataCtr = data.op.component.mounts.secrets;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.mount_path).to.be.a('string');
                      expect(data.mount_path).to.be("");
                      {
                        let dataCtr = data.items;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.op.component.mounts.config_maps;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      expect(data.mount_path).to.be.a('string');
                      expect(data.mount_path).to.be("");
                      {
                        let dataCtr = data.items;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    }
                  }
                  {
                    let dataCtr = data.op.component.mounts.artifacts;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                      expect(data.name).to.be.a('string');
                      expect(data.name).to.be("");
                      {
                        let dataCtr = data.paths;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                    }
                  }
                expect(data.op.component.schedule).to.be.a(Object);
                expect(data.op.component.schedule).to.be();
                expect(data.op.component.parallel).to.be.a(Object);
                expect(data.op.component.parallel).to.be();
                expect(data.op.component.service).to.be.a(PolyaxonSdk.V1Service);
                      expect(data.op.component.service.enabled).to.be.a('boolean');
                  expect(data.op.component.service.enabled).to.be(false);
                  {
                    let dataCtr = data.op.component.service.ports;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                {
                  let dataCtr = data.op.component.inputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1IO);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.iotype).to.be.a('string');
                    expect(data.iotype).to.be("");
                    expect(data.value).to.be.a(Object);
                    expect(data.value).to.be();
                    expect(data.is_optional).to.be.a('boolean');
                    expect(data.is_optional).to.be(false);
                    expect(data.is_list).to.be.a('boolean');
                    expect(data.is_list).to.be(false);
                    expect(data.is_flag).to.be.a('boolean');
                    expect(data.is_flag).to.be(false);
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                  }
                }
                {
                  let dataCtr = data.op.component.outputs;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1IO);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    expect(data.iotype).to.be.a('string');
                    expect(data.iotype).to.be("");
                    expect(data.value).to.be.a(Object);
                    expect(data.value).to.be();
                    expect(data.is_optional).to.be.a('boolean');
                    expect(data.is_optional).to.be(false);
                    expect(data.is_list).to.be.a('boolean');
                    expect(data.is_list).to.be(false);
                    expect(data.is_flag).to.be.a('boolean');
                    expect(data.is_flag).to.be(false);
                    {
                      let dataCtr = data.options;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                  }
                }
                expect(data.op.component.run).to.be.a(Object);
                expect(data.op.component.run).to.be();
            expect(data.run).to.be.a(PolyaxonSdk.V1RunSchema);
                  expect(data.run.container).to.be.a(PolyaxonSdk.V1Container);
                    expect(data.run.container.kind).to.be.a('string');
                expect(data.run.container.kind).to.be("");
                expect(data.run.container.image).to.be.a('string');
                expect(data.run.container.image).to.be("");
                expect(data.run.container.image_pull_policy).to.be.a('string');
                expect(data.run.container.image_pull_policy).to.be("");
                {
                  let dataCtr = data.run.container.command;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.run.container.args;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              expect(data.run.dag).to.be.a(PolyaxonSdk.V1Dag);
                    expect(data.run.dag.kind).to.be.a('string');
                expect(data.run.dag.kind).to.be("");
                {
                  let dataCtr = data.run.dag.ops;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Op);
                    expect(data.version).to.be.a('number');
                    expect(data.version).to.be(0.0);
                    expect(data.kind).to.be.a('string');
                    expect(data.kind).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.tag).to.be.a('string');
                    expect(data.tag).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.profile).to.be.a('string');
                    expect(data.profile).to.be("");
                    expect(data.queue).to.be.a('string');
                    expect(data.queue).to.be("");
                    expect(data.nocache).to.be.a('boolean');
                    expect(data.nocache).to.be(false);
                    expect(data.environment).to.be.a(PolyaxonSdk.V1Environment);
                          expect(data.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                            expect(data.environment.resources.limits).to.be.a(Object);
                        expect(data.environment.resources.limits).to.be();
                        expect(data.environment.resources.requests).to.be.a(Object);
                        expect(data.environment.resources.requests).to.be();
                      {
                        let dataCtr = data.environment.labels;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.annotations;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.node_selector;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.affinity;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.environment.tolerations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.environment.service_account).to.be.a('string');
                      expect(data.environment.service_account).to.be("");
                      {
                        let dataCtr = data.environment.image_pull_secrets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.env_vars;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.environment.security_context).to.be.a(Object);
                      expect(data.environment.security_context).to.be();
                      expect(data.environment.log_level).to.be.a('string');
                      expect(data.environment.log_level).to.be("");
                      expect(data.environment.auth).to.be.a('boolean');
                      expect(data.environment.auth).to.be(false);
                      expect(data.environment.docker).to.be.a('boolean');
                      expect(data.environment.docker).to.be(false);
                      expect(data.environment.shm).to.be.a('boolean');
                      expect(data.environment.shm).to.be(false);
                      expect(data.environment.outputs).to.be.a('boolean');
                      expect(data.environment.outputs).to.be(false);
                      expect(data.environment.logs).to.be.a('boolean');
                      expect(data.environment.logs).to.be(false);
                      expect(data.environment.registry).to.be.a('string');
                      expect(data.environment.registry).to.be("");
                      expect(data.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                            expect(data.environment.init_container.image).to.be.a('string');
                        expect(data.environment.init_container.image).to.be("");
                        expect(data.environment.init_container.image_pull_policy).to.be.a('string');
                        expect(data.environment.init_container.image_pull_policy).to.be("");
                        expect(data.environment.init_container.sleep_interval).to.be.a('number');
                        expect(data.environment.init_container.sleep_interval).to.be(0);
                        expect(data.environment.init_container.outputs_sync_interval).to.be.a('number');
                        expect(data.environment.init_container.outputs_sync_interval).to.be(0);
                        expect(data.environment.init_container.logs_sync_interval).to.be.a('number');
                        expect(data.environment.init_container.logs_sync_interval).to.be(0);
                      expect(data.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                            expect(data.environment.sidecar_container.image).to.be.a('string');
                        expect(data.environment.sidecar_container.image).to.be("");
                        expect(data.environment.sidecar_container.image_pull_policy).to.be.a('string');
                        expect(data.environment.sidecar_container.image_pull_policy).to.be("");
                        expect(data.environment.sidecar_container.sleep_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.sleep_interval).to.be(0);
                        expect(data.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.outputs_sync_interval).to.be(0);
                        expect(data.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.logs_sync_interval).to.be(0);
                    expect(data.termination).to.be.a(PolyaxonSdk.V1Termination);
                          expect(data.termination.max_retries).to.be.a('number');
                      expect(data.termination.max_retries).to.be(0);
                      expect(data.termination.restart_policy).to.be.a('string');
                      expect(data.termination.restart_policy).to.be("");
                      expect(data.termination.ttl).to.be.a('number');
                      expect(data.termination.ttl).to.be(0);
                      expect(data.termination.timeout).to.be.a('number');
                      expect(data.termination.timeout).to.be(0);
                    expect(data.init).to.be.a(PolyaxonSdk.V1Init);
                          {
                        let dataCtr = data.init.repos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.commit).to.be.a('string');
                          expect(data.commit).to.be("");
                          expect(data.branch).to.be.a('string');
                          expect(data.branch).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.init.artifacts;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          {
                            let dataCtr = data.paths;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      expect(data.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                            expect(data.init.build.image).to.be.a('string');
                        expect(data.init.build.image).to.be("");
                        {
                          let dataCtr = data.init.build.env;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.path;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.copy;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        expect(data.init.build.lang_env).to.be.a('string');
                        expect(data.init.build.lang_env).to.be("");
                        expect(data.init.build.uid).to.be.a('number');
                        expect(data.init.build.uid).to.be(0);
                        expect(data.init.build.gid).to.be.a('number');
                        expect(data.init.build.gid).to.be(0);
                        expect(data.init.build.filename).to.be.a('string');
                        expect(data.init.build.filename).to.be("");
                        expect(data.init.build.workdir).to.be.a('string');
                        expect(data.init.build.workdir).to.be("");
                        expect(data.init.build.workdir_path).to.be.a('string');
                        expect(data.init.build.workdir_path).to.be("");
                        expect(data.init.build.shell).to.be.a('string');
                        expect(data.init.build.shell).to.be("");
                    expect(data.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                          {
                        let dataCtr = data.mounts.secrets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.mount_path).to.be.a('string');
                          expect(data.mount_path).to.be("");
                          {
                            let dataCtr = data.items;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.mounts.config_maps;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.mount_path).to.be.a('string');
                          expect(data.mount_path).to.be("");
                          {
                            let dataCtr = data.items;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.mounts.artifacts;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          {
                            let dataCtr = data.paths;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                    expect(data.schedule).to.be.a(Object);
                    expect(data.schedule).to.be();
                    expect(data.parallel).to.be.a(Object);
                    expect(data.parallel).to.be();
                    expect(data.service).to.be.a(PolyaxonSdk.V1Service);
                          expect(data.service.enabled).to.be.a('boolean');
                      expect(data.service.enabled).to.be(false);
                      {
                        let dataCtr = data.service.ports;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                    {
                      let dataCtr = data.dependencies;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.trigger).to.be.a(PolyaxonSdk.V1TriggerPolicy);
                        {
                      let dataCtr = data.conditions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.skip_on_upstream_skip).to.be.a('boolean');
                    expect(data.skip_on_upstream_skip).to.be(false);
                    expect(data.params).to.be.a(Object);
                    expect(data.params).to.be();
                    expect(data.component_ref).to.be.a(PolyaxonSdk.V1ComponentRef);
                          expect(data.component_ref.name).to.be.a('string');
                      expect(data.component_ref.name).to.be("");
                      expect(data.component_ref.url).to.be.a('string');
                      expect(data.component_ref.url).to.be("");
                      expect(data.component_ref.path).to.be.a('string');
                      expect(data.component_ref.path).to.be("");
                      expect(data.component_ref.hub).to.be.a('string');
                      expect(data.component_ref.hub).to.be("");
                    expect(data.component).to.be.a(PolyaxonSdk.V1Component);
                          expect(data.component.version).to.be.a('number');
                      expect(data.component.version).to.be(0.0);
                      expect(data.component.kind).to.be.a('string');
                      expect(data.component.kind).to.be("");
                      expect(data.component.name).to.be.a('string');
                      expect(data.component.name).to.be("");
                      expect(data.component.tag).to.be.a('string');
                      expect(data.component.tag).to.be("");
                      expect(data.component.description).to.be.a('string');
                      expect(data.component.description).to.be("");
                      {
                        let dataCtr = data.component.tags;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      expect(data.component.profile).to.be.a('string');
                      expect(data.component.profile).to.be("");
                      expect(data.component.queue).to.be.a('string');
                      expect(data.component.queue).to.be("");
                      expect(data.component.nocache).to.be.a('boolean');
                      expect(data.component.nocache).to.be(false);
                      expect(data.component.environment).to.be.a(PolyaxonSdk.V1Environment);
                            expect(data.component.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                              expect(data.component.environment.resources.limits).to.be.a(Object);
                          expect(data.component.environment.resources.limits).to.be();
                          expect(data.component.environment.resources.requests).to.be.a(Object);
                          expect(data.component.environment.resources.requests).to.be();
                        {
                          let dataCtr = data.component.environment.labels;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.component.environment.annotations;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.component.environment.node_selector;
                          expect(dataCtr).to.be.an(Object);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.component.environment.affinity;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.component.environment.tolerations;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        expect(data.component.environment.service_account).to.be.a('string');
                        expect(data.component.environment.service_account).to.be("");
                        {
                          let dataCtr = data.component.environment.image_pull_secrets;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.component.environment.env_vars;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        expect(data.component.environment.security_context).to.be.a(Object);
                        expect(data.component.environment.security_context).to.be();
                        expect(data.component.environment.log_level).to.be.a('string');
                        expect(data.component.environment.log_level).to.be("");
                        expect(data.component.environment.auth).to.be.a('boolean');
                        expect(data.component.environment.auth).to.be(false);
                        expect(data.component.environment.docker).to.be.a('boolean');
                        expect(data.component.environment.docker).to.be(false);
                        expect(data.component.environment.shm).to.be.a('boolean');
                        expect(data.component.environment.shm).to.be(false);
                        expect(data.component.environment.outputs).to.be.a('boolean');
                        expect(data.component.environment.outputs).to.be(false);
                        expect(data.component.environment.logs).to.be.a('boolean');
                        expect(data.component.environment.logs).to.be(false);
                        expect(data.component.environment.registry).to.be.a('string');
                        expect(data.component.environment.registry).to.be("");
                        expect(data.component.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                              expect(data.component.environment.init_container.image).to.be.a('string');
                          expect(data.component.environment.init_container.image).to.be("");
                          expect(data.component.environment.init_container.image_pull_policy).to.be.a('string');
                          expect(data.component.environment.init_container.image_pull_policy).to.be("");
                          expect(data.component.environment.init_container.sleep_interval).to.be.a('number');
                          expect(data.component.environment.init_container.sleep_interval).to.be(0);
                          expect(data.component.environment.init_container.outputs_sync_interval).to.be.a('number');
                          expect(data.component.environment.init_container.outputs_sync_interval).to.be(0);
                          expect(data.component.environment.init_container.logs_sync_interval).to.be.a('number');
                          expect(data.component.environment.init_container.logs_sync_interval).to.be(0);
                        expect(data.component.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                              expect(data.component.environment.sidecar_container.image).to.be.a('string');
                          expect(data.component.environment.sidecar_container.image).to.be("");
                          expect(data.component.environment.sidecar_container.image_pull_policy).to.be.a('string');
                          expect(data.component.environment.sidecar_container.image_pull_policy).to.be("");
                          expect(data.component.environment.sidecar_container.sleep_interval).to.be.a('number');
                          expect(data.component.environment.sidecar_container.sleep_interval).to.be(0);
                          expect(data.component.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                          expect(data.component.environment.sidecar_container.outputs_sync_interval).to.be(0);
                          expect(data.component.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                          expect(data.component.environment.sidecar_container.logs_sync_interval).to.be(0);
                      expect(data.component.termination).to.be.a(PolyaxonSdk.V1Termination);
                            expect(data.component.termination.max_retries).to.be.a('number');
                        expect(data.component.termination.max_retries).to.be(0);
                        expect(data.component.termination.restart_policy).to.be.a('string');
                        expect(data.component.termination.restart_policy).to.be("");
                        expect(data.component.termination.ttl).to.be.a('number');
                        expect(data.component.termination.ttl).to.be(0);
                        expect(data.component.termination.timeout).to.be.a('number');
                        expect(data.component.termination.timeout).to.be(0);
                      expect(data.component.init).to.be.a(PolyaxonSdk.V1Init);
                            {
                          let dataCtr = data.component.init.repos;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            expect(data.commit).to.be.a('string');
                            expect(data.commit).to.be("");
                            expect(data.branch).to.be.a('string');
                            expect(data.branch).to.be("");
                          }
                        }
                        {
                          let dataCtr = data.component.init.artifacts;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            {
                              let dataCtr = data.paths;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('string');
                                expect(data).to.be("");
                              }
                            }
                          }
                        }
                        expect(data.component.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                              expect(data.component.init.build.image).to.be.a('string');
                          expect(data.component.init.build.image).to.be("");
                          {
                            let dataCtr = data.component.init.build.env;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                          {
                            let dataCtr = data.component.init.build.path;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                          {
                            let dataCtr = data.component.init.build.copy;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                          {
                            let dataCtr = data.component.init.build.run;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                          expect(data.component.init.build.lang_env).to.be.a('string');
                          expect(data.component.init.build.lang_env).to.be("");
                          expect(data.component.init.build.uid).to.be.a('number');
                          expect(data.component.init.build.uid).to.be(0);
                          expect(data.component.init.build.gid).to.be.a('number');
                          expect(data.component.init.build.gid).to.be(0);
                          expect(data.component.init.build.filename).to.be.a('string');
                          expect(data.component.init.build.filename).to.be("");
                          expect(data.component.init.build.workdir).to.be.a('string');
                          expect(data.component.init.build.workdir).to.be("");
                          expect(data.component.init.build.workdir_path).to.be.a('string');
                          expect(data.component.init.build.workdir_path).to.be("");
                          expect(data.component.init.build.shell).to.be.a('string');
                          expect(data.component.init.build.shell).to.be("");
                      expect(data.component.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                            {
                          let dataCtr = data.component.mounts.secrets;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            expect(data.mount_path).to.be.a('string');
                            expect(data.mount_path).to.be("");
                            {
                              let dataCtr = data.items;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('string');
                                expect(data).to.be("");
                              }
                            }
                          }
                        }
                        {
                          let dataCtr = data.component.mounts.config_maps;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            expect(data.mount_path).to.be.a('string');
                            expect(data.mount_path).to.be("");
                            {
                              let dataCtr = data.items;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('string');
                                expect(data).to.be("");
                              }
                            }
                          }
                        }
                        {
                          let dataCtr = data.component.mounts.artifacts;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                            expect(data.name).to.be.a('string');
                            expect(data.name).to.be("");
                            {
                              let dataCtr = data.paths;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a('string');
                                expect(data).to.be("");
                              }
                            }
                          }
                        }
                      expect(data.component.schedule).to.be.a(Object);
                      expect(data.component.schedule).to.be();
                      expect(data.component.parallel).to.be.a(Object);
                      expect(data.component.parallel).to.be();
                      expect(data.component.service).to.be.a(PolyaxonSdk.V1Service);
                            expect(data.component.service.enabled).to.be.a('boolean');
                        expect(data.component.service.enabled).to.be(false);
                        {
                          let dataCtr = data.component.service.ports;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('number');
                            expect(data).to.be(0);
                          }
                        }
                      {
                        let dataCtr = data.component.inputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1IO);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.iotype).to.be.a('string');
                          expect(data.iotype).to.be("");
                          expect(data.value).to.be.a(Object);
                          expect(data.value).to.be();
                          expect(data.is_optional).to.be.a('boolean');
                          expect(data.is_optional).to.be(false);
                          expect(data.is_list).to.be.a('boolean');
                          expect(data.is_list).to.be(false);
                          expect(data.is_flag).to.be.a('boolean');
                          expect(data.is_flag).to.be(false);
                          {
                            let dataCtr = data.options;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.component.outputs;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1IO);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.description).to.be.a('string');
                          expect(data.description).to.be("");
                          expect(data.iotype).to.be.a('string');
                          expect(data.iotype).to.be("");
                          expect(data.value).to.be.a(Object);
                          expect(data.value).to.be();
                          expect(data.is_optional).to.be.a('boolean');
                          expect(data.is_optional).to.be(false);
                          expect(data.is_list).to.be.a('boolean');
                          expect(data.is_list).to.be(false);
                          expect(data.is_flag).to.be.a('boolean');
                          expect(data.is_flag).to.be(false);
                          {
                            let dataCtr = data.options;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(Object);
                              expect(data).to.be();
                            }
                          }
                        }
                      }
                      expect(data.component.run).to.be.a(Object);
                      expect(data.component.run).to.be();
                  }
                }
                {
                  let dataCtr = data.run.dag.components;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(PolyaxonSdk.V1Component);
                    expect(data.version).to.be.a('number');
                    expect(data.version).to.be(0.0);
                    expect(data.kind).to.be.a('string');
                    expect(data.kind).to.be("");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("");
                    expect(data.tag).to.be.a('string');
                    expect(data.tag).to.be("");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    expect(data.profile).to.be.a('string');
                    expect(data.profile).to.be("");
                    expect(data.queue).to.be.a('string');
                    expect(data.queue).to.be("");
                    expect(data.nocache).to.be.a('boolean');
                    expect(data.nocache).to.be(false);
                    expect(data.environment).to.be.a(PolyaxonSdk.V1Environment);
                          expect(data.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                            expect(data.environment.resources.limits).to.be.a(Object);
                        expect(data.environment.resources.limits).to.be();
                        expect(data.environment.resources.requests).to.be.a(Object);
                        expect(data.environment.resources.requests).to.be();
                      {
                        let dataCtr = data.environment.labels;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.annotations;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.node_selector;
                        expect(dataCtr).to.be.an(Object);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.affinity;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.environment.tolerations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.environment.service_account).to.be.a('string');
                      expect(data.environment.service_account).to.be("");
                      {
                        let dataCtr = data.environment.image_pull_secrets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('string');
                          expect(data).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.environment.env_vars;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.environment.security_context).to.be.a(Object);
                      expect(data.environment.security_context).to.be();
                      expect(data.environment.log_level).to.be.a('string');
                      expect(data.environment.log_level).to.be("");
                      expect(data.environment.auth).to.be.a('boolean');
                      expect(data.environment.auth).to.be(false);
                      expect(data.environment.docker).to.be.a('boolean');
                      expect(data.environment.docker).to.be(false);
                      expect(data.environment.shm).to.be.a('boolean');
                      expect(data.environment.shm).to.be(false);
                      expect(data.environment.outputs).to.be.a('boolean');
                      expect(data.environment.outputs).to.be(false);
                      expect(data.environment.logs).to.be.a('boolean');
                      expect(data.environment.logs).to.be(false);
                      expect(data.environment.registry).to.be.a('string');
                      expect(data.environment.registry).to.be("");
                      expect(data.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                            expect(data.environment.init_container.image).to.be.a('string');
                        expect(data.environment.init_container.image).to.be("");
                        expect(data.environment.init_container.image_pull_policy).to.be.a('string');
                        expect(data.environment.init_container.image_pull_policy).to.be("");
                        expect(data.environment.init_container.sleep_interval).to.be.a('number');
                        expect(data.environment.init_container.sleep_interval).to.be(0);
                        expect(data.environment.init_container.outputs_sync_interval).to.be.a('number');
                        expect(data.environment.init_container.outputs_sync_interval).to.be(0);
                        expect(data.environment.init_container.logs_sync_interval).to.be.a('number');
                        expect(data.environment.init_container.logs_sync_interval).to.be(0);
                      expect(data.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                            expect(data.environment.sidecar_container.image).to.be.a('string');
                        expect(data.environment.sidecar_container.image).to.be("");
                        expect(data.environment.sidecar_container.image_pull_policy).to.be.a('string');
                        expect(data.environment.sidecar_container.image_pull_policy).to.be("");
                        expect(data.environment.sidecar_container.sleep_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.sleep_interval).to.be(0);
                        expect(data.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.outputs_sync_interval).to.be(0);
                        expect(data.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                        expect(data.environment.sidecar_container.logs_sync_interval).to.be(0);
                    expect(data.termination).to.be.a(PolyaxonSdk.V1Termination);
                          expect(data.termination.max_retries).to.be.a('number');
                      expect(data.termination.max_retries).to.be(0);
                      expect(data.termination.restart_policy).to.be.a('string');
                      expect(data.termination.restart_policy).to.be("");
                      expect(data.termination.ttl).to.be.a('number');
                      expect(data.termination.ttl).to.be(0);
                      expect(data.termination.timeout).to.be.a('number');
                      expect(data.termination.timeout).to.be(0);
                    expect(data.init).to.be.a(PolyaxonSdk.V1Init);
                          {
                        let dataCtr = data.init.repos;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.commit).to.be.a('string');
                          expect(data.commit).to.be("");
                          expect(data.branch).to.be.a('string');
                          expect(data.branch).to.be("");
                        }
                      }
                      {
                        let dataCtr = data.init.artifacts;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          {
                            let dataCtr = data.paths;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      expect(data.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                            expect(data.init.build.image).to.be.a('string');
                        expect(data.init.build.image).to.be("");
                        {
                          let dataCtr = data.init.build.env;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.path;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.copy;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        {
                          let dataCtr = data.init.build.run;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                        expect(data.init.build.lang_env).to.be.a('string');
                        expect(data.init.build.lang_env).to.be("");
                        expect(data.init.build.uid).to.be.a('number');
                        expect(data.init.build.uid).to.be(0);
                        expect(data.init.build.gid).to.be.a('number');
                        expect(data.init.build.gid).to.be(0);
                        expect(data.init.build.filename).to.be.a('string');
                        expect(data.init.build.filename).to.be("");
                        expect(data.init.build.workdir).to.be.a('string');
                        expect(data.init.build.workdir).to.be("");
                        expect(data.init.build.workdir_path).to.be.a('string');
                        expect(data.init.build.workdir_path).to.be("");
                        expect(data.init.build.shell).to.be.a('string');
                        expect(data.init.build.shell).to.be("");
                    expect(data.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                          {
                        let dataCtr = data.mounts.secrets;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.mount_path).to.be.a('string');
                          expect(data.mount_path).to.be("");
                          {
                            let dataCtr = data.items;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.mounts.config_maps;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          expect(data.mount_path).to.be.a('string');
                          expect(data.mount_path).to.be("");
                          {
                            let dataCtr = data.items;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                      {
                        let dataCtr = data.mounts.artifacts;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                          expect(data.name).to.be.a('string');
                          expect(data.name).to.be("");
                          {
                            let dataCtr = data.paths;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a('string');
                              expect(data).to.be("");
                            }
                          }
                        }
                      }
                    expect(data.schedule).to.be.a(Object);
                    expect(data.schedule).to.be();
                    expect(data.parallel).to.be.a(Object);
                    expect(data.parallel).to.be();
                    expect(data.service).to.be.a(PolyaxonSdk.V1Service);
                          expect(data.service.enabled).to.be.a('boolean');
                      expect(data.service.enabled).to.be(false);
                      {
                        let dataCtr = data.service.ports;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
                    {
                      let dataCtr = data.inputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1IO);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.iotype).to.be.a('string');
                        expect(data.iotype).to.be("");
                        expect(data.value).to.be.a(Object);
                        expect(data.value).to.be();
                        expect(data.is_optional).to.be.a('boolean');
                        expect(data.is_optional).to.be(false);
                        expect(data.is_list).to.be.a('boolean');
                        expect(data.is_list).to.be(false);
                        expect(data.is_flag).to.be.a('boolean');
                        expect(data.is_flag).to.be(false);
                        {
                          let dataCtr = data.options;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.outputs;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1IO);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
                        expect(data.iotype).to.be.a('string');
                        expect(data.iotype).to.be("");
                        expect(data.value).to.be.a(Object);
                        expect(data.value).to.be();
                        expect(data.is_optional).to.be.a('boolean');
                        expect(data.is_optional).to.be(false);
                        expect(data.is_list).to.be.a('boolean');
                        expect(data.is_list).to.be(false);
                        expect(data.is_flag).to.be.a('boolean');
                        expect(data.is_flag).to.be(false);
                        {
                          let dataCtr = data.options;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be();
                          }
                        }
                      }
                    }
                    expect(data.run).to.be.a(Object);
                    expect(data.run).to.be();
                  }
                }
                expect(data.run.dag.concurrency).to.be.a('number');
                expect(data.run.dag.concurrency).to.be(0);
                {
                  let dataCtr = data.run.dag.early_stopping;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(Object);
                    expect(data).to.be();
                  }
                }
              expect(data.run.tf_job).to.be.a(PolyaxonSdk.V1TFJob);
                    expect(data.run.tf_job.kind).to.be.a('string');
                expect(data.run.tf_job.kind).to.be("");
                expect(data.run.tf_job.chief).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.tf_job.chief.replicas).to.be.a('number');
                  expect(data.run.tf_job.chief.replicas).to.be(0);
                  expect(data.run.tf_job.chief.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.tf_job.chief.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.tf_job.chief.environment.resources.limits).to.be.a(Object);
                      expect(data.run.tf_job.chief.environment.resources.limits).to.be();
                      expect(data.run.tf_job.chief.environment.resources.requests).to.be.a(Object);
                      expect(data.run.tf_job.chief.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.tf_job.chief.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.chief.environment.service_account).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.tf_job.chief.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.chief.environment.security_context).to.be.a(Object);
                    expect(data.run.tf_job.chief.environment.security_context).to.be();
                    expect(data.run.tf_job.chief.environment.log_level).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.log_level).to.be("");
                    expect(data.run.tf_job.chief.environment.auth).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.auth).to.be(false);
                    expect(data.run.tf_job.chief.environment.docker).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.docker).to.be(false);
                    expect(data.run.tf_job.chief.environment.shm).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.shm).to.be(false);
                    expect(data.run.tf_job.chief.environment.outputs).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.outputs).to.be(false);
                    expect(data.run.tf_job.chief.environment.logs).to.be.a('boolean');
                    expect(data.run.tf_job.chief.environment.logs).to.be(false);
                    expect(data.run.tf_job.chief.environment.registry).to.be.a('string');
                    expect(data.run.tf_job.chief.environment.registry).to.be("");
                    expect(data.run.tf_job.chief.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.chief.environment.init_container.image).to.be.a('string');
                      expect(data.run.tf_job.chief.environment.init_container.image).to.be("");
                      expect(data.run.tf_job.chief.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.chief.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.chief.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.chief.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.chief.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.tf_job.chief.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.chief.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.tf_job.chief.environment.sidecar_container.image).to.be("");
                      expect(data.run.tf_job.chief.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.chief.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.chief.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.chief.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.chief.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.chief.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.tf_job.chief.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.tf_job.chief.termination.max_retries).to.be.a('number');
                    expect(data.run.tf_job.chief.termination.max_retries).to.be(0);
                    expect(data.run.tf_job.chief.termination.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.chief.termination.restart_policy).to.be("");
                    expect(data.run.tf_job.chief.termination.ttl).to.be.a('number');
                    expect(data.run.tf_job.chief.termination.ttl).to.be(0);
                    expect(data.run.tf_job.chief.termination.timeout).to.be.a('number');
                    expect(data.run.tf_job.chief.termination.timeout).to.be(0);
                  expect(data.run.tf_job.chief.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.tf_job.chief.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.tf_job.chief.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.tf_job.chief.init.build.image).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.tf_job.chief.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.chief.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.chief.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.chief.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.tf_job.chief.init.build.lang_env).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.lang_env).to.be("");
                      expect(data.run.tf_job.chief.init.build.uid).to.be.a('number');
                      expect(data.run.tf_job.chief.init.build.uid).to.be(0);
                      expect(data.run.tf_job.chief.init.build.gid).to.be.a('number');
                      expect(data.run.tf_job.chief.init.build.gid).to.be(0);
                      expect(data.run.tf_job.chief.init.build.filename).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.filename).to.be("");
                      expect(data.run.tf_job.chief.init.build.workdir).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.workdir).to.be("");
                      expect(data.run.tf_job.chief.init.build.workdir_path).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.workdir_path).to.be("");
                      expect(data.run.tf_job.chief.init.build.shell).to.be.a('string');
                      expect(data.run.tf_job.chief.init.build.shell).to.be("");
                  expect(data.run.tf_job.chief.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.tf_job.chief.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.tf_job.chief.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.tf_job.chief.container.kind).to.be.a('string');
                    expect(data.run.tf_job.chief.container.kind).to.be("");
                    expect(data.run.tf_job.chief.container.image).to.be.a('string');
                    expect(data.run.tf_job.chief.container.image).to.be("");
                    expect(data.run.tf_job.chief.container.image_pull_policy).to.be.a('string');
                    expect(data.run.tf_job.chief.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.tf_job.chief.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.chief.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                expect(data.run.tf_job.ps).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.tf_job.ps.replicas).to.be.a('number');
                  expect(data.run.tf_job.ps.replicas).to.be(0);
                  expect(data.run.tf_job.ps.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.tf_job.ps.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.tf_job.ps.environment.resources.limits).to.be.a(Object);
                      expect(data.run.tf_job.ps.environment.resources.limits).to.be();
                      expect(data.run.tf_job.ps.environment.resources.requests).to.be.a(Object);
                      expect(data.run.tf_job.ps.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.tf_job.ps.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.ps.environment.service_account).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.tf_job.ps.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.ps.environment.security_context).to.be.a(Object);
                    expect(data.run.tf_job.ps.environment.security_context).to.be();
                    expect(data.run.tf_job.ps.environment.log_level).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.log_level).to.be("");
                    expect(data.run.tf_job.ps.environment.auth).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.auth).to.be(false);
                    expect(data.run.tf_job.ps.environment.docker).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.docker).to.be(false);
                    expect(data.run.tf_job.ps.environment.shm).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.shm).to.be(false);
                    expect(data.run.tf_job.ps.environment.outputs).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.outputs).to.be(false);
                    expect(data.run.tf_job.ps.environment.logs).to.be.a('boolean');
                    expect(data.run.tf_job.ps.environment.logs).to.be(false);
                    expect(data.run.tf_job.ps.environment.registry).to.be.a('string');
                    expect(data.run.tf_job.ps.environment.registry).to.be("");
                    expect(data.run.tf_job.ps.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.ps.environment.init_container.image).to.be.a('string');
                      expect(data.run.tf_job.ps.environment.init_container.image).to.be("");
                      expect(data.run.tf_job.ps.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.ps.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.ps.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.ps.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.ps.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.tf_job.ps.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.ps.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.tf_job.ps.environment.sidecar_container.image).to.be("");
                      expect(data.run.tf_job.ps.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.ps.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.ps.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.ps.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.ps.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.ps.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.tf_job.ps.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.tf_job.ps.termination.max_retries).to.be.a('number');
                    expect(data.run.tf_job.ps.termination.max_retries).to.be(0);
                    expect(data.run.tf_job.ps.termination.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.ps.termination.restart_policy).to.be("");
                    expect(data.run.tf_job.ps.termination.ttl).to.be.a('number');
                    expect(data.run.tf_job.ps.termination.ttl).to.be(0);
                    expect(data.run.tf_job.ps.termination.timeout).to.be.a('number');
                    expect(data.run.tf_job.ps.termination.timeout).to.be(0);
                  expect(data.run.tf_job.ps.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.tf_job.ps.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.tf_job.ps.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.tf_job.ps.init.build.image).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.tf_job.ps.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.ps.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.ps.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.ps.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.tf_job.ps.init.build.lang_env).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.lang_env).to.be("");
                      expect(data.run.tf_job.ps.init.build.uid).to.be.a('number');
                      expect(data.run.tf_job.ps.init.build.uid).to.be(0);
                      expect(data.run.tf_job.ps.init.build.gid).to.be.a('number');
                      expect(data.run.tf_job.ps.init.build.gid).to.be(0);
                      expect(data.run.tf_job.ps.init.build.filename).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.filename).to.be("");
                      expect(data.run.tf_job.ps.init.build.workdir).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.workdir).to.be("");
                      expect(data.run.tf_job.ps.init.build.workdir_path).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.workdir_path).to.be("");
                      expect(data.run.tf_job.ps.init.build.shell).to.be.a('string');
                      expect(data.run.tf_job.ps.init.build.shell).to.be("");
                  expect(data.run.tf_job.ps.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.tf_job.ps.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.tf_job.ps.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.tf_job.ps.container.kind).to.be.a('string');
                    expect(data.run.tf_job.ps.container.kind).to.be("");
                    expect(data.run.tf_job.ps.container.image).to.be.a('string');
                    expect(data.run.tf_job.ps.container.image).to.be("");
                    expect(data.run.tf_job.ps.container.image_pull_policy).to.be.a('string');
                    expect(data.run.tf_job.ps.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.tf_job.ps.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.ps.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                expect(data.run.tf_job.worker).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.tf_job.worker.replicas).to.be.a('number');
                  expect(data.run.tf_job.worker.replicas).to.be(0);
                  expect(data.run.tf_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.tf_job.worker.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.tf_job.worker.environment.resources.limits).to.be.a(Object);
                      expect(data.run.tf_job.worker.environment.resources.limits).to.be();
                      expect(data.run.tf_job.worker.environment.resources.requests).to.be.a(Object);
                      expect(data.run.tf_job.worker.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.tf_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.worker.environment.service_account).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.tf_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.worker.environment.security_context).to.be.a(Object);
                    expect(data.run.tf_job.worker.environment.security_context).to.be();
                    expect(data.run.tf_job.worker.environment.log_level).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.log_level).to.be("");
                    expect(data.run.tf_job.worker.environment.auth).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.auth).to.be(false);
                    expect(data.run.tf_job.worker.environment.docker).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.docker).to.be(false);
                    expect(data.run.tf_job.worker.environment.shm).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.shm).to.be(false);
                    expect(data.run.tf_job.worker.environment.outputs).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.outputs).to.be(false);
                    expect(data.run.tf_job.worker.environment.logs).to.be.a('boolean');
                    expect(data.run.tf_job.worker.environment.logs).to.be(false);
                    expect(data.run.tf_job.worker.environment.registry).to.be.a('string');
                    expect(data.run.tf_job.worker.environment.registry).to.be("");
                    expect(data.run.tf_job.worker.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.worker.environment.init_container.image).to.be.a('string');
                      expect(data.run.tf_job.worker.environment.init_container.image).to.be("");
                      expect(data.run.tf_job.worker.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.worker.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.worker.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.worker.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.worker.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.tf_job.worker.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.worker.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.tf_job.worker.environment.sidecar_container.image).to.be("");
                      expect(data.run.tf_job.worker.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.worker.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.worker.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.worker.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.worker.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.worker.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.tf_job.worker.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.tf_job.worker.termination.max_retries).to.be.a('number');
                    expect(data.run.tf_job.worker.termination.max_retries).to.be(0);
                    expect(data.run.tf_job.worker.termination.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.worker.termination.restart_policy).to.be("");
                    expect(data.run.tf_job.worker.termination.ttl).to.be.a('number');
                    expect(data.run.tf_job.worker.termination.ttl).to.be(0);
                    expect(data.run.tf_job.worker.termination.timeout).to.be.a('number');
                    expect(data.run.tf_job.worker.termination.timeout).to.be(0);
                  expect(data.run.tf_job.worker.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.tf_job.worker.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.tf_job.worker.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.tf_job.worker.init.build.image).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.tf_job.worker.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.worker.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.worker.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.worker.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.tf_job.worker.init.build.lang_env).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.lang_env).to.be("");
                      expect(data.run.tf_job.worker.init.build.uid).to.be.a('number');
                      expect(data.run.tf_job.worker.init.build.uid).to.be(0);
                      expect(data.run.tf_job.worker.init.build.gid).to.be.a('number');
                      expect(data.run.tf_job.worker.init.build.gid).to.be(0);
                      expect(data.run.tf_job.worker.init.build.filename).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.filename).to.be("");
                      expect(data.run.tf_job.worker.init.build.workdir).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.workdir).to.be("");
                      expect(data.run.tf_job.worker.init.build.workdir_path).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.workdir_path).to.be("");
                      expect(data.run.tf_job.worker.init.build.shell).to.be.a('string');
                      expect(data.run.tf_job.worker.init.build.shell).to.be("");
                  expect(data.run.tf_job.worker.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.tf_job.worker.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.tf_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.tf_job.worker.container.kind).to.be.a('string');
                    expect(data.run.tf_job.worker.container.kind).to.be("");
                    expect(data.run.tf_job.worker.container.image).to.be.a('string');
                    expect(data.run.tf_job.worker.container.image).to.be("");
                    expect(data.run.tf_job.worker.container.image_pull_policy).to.be.a('string');
                    expect(data.run.tf_job.worker.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.tf_job.worker.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.worker.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                expect(data.run.tf_job.evaluator).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.tf_job.evaluator.replicas).to.be.a('number');
                  expect(data.run.tf_job.evaluator.replicas).to.be(0);
                  expect(data.run.tf_job.evaluator.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.tf_job.evaluator.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.tf_job.evaluator.environment.resources.limits).to.be.a(Object);
                      expect(data.run.tf_job.evaluator.environment.resources.limits).to.be();
                      expect(data.run.tf_job.evaluator.environment.resources.requests).to.be.a(Object);
                      expect(data.run.tf_job.evaluator.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.service_account).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.tf_job.evaluator.environment.security_context).to.be.a(Object);
                    expect(data.run.tf_job.evaluator.environment.security_context).to.be();
                    expect(data.run.tf_job.evaluator.environment.log_level).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.log_level).to.be("");
                    expect(data.run.tf_job.evaluator.environment.auth).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.auth).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.docker).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.docker).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.shm).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.shm).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.outputs).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.outputs).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.logs).to.be.a('boolean');
                    expect(data.run.tf_job.evaluator.environment.logs).to.be(false);
                    expect(data.run.tf_job.evaluator.environment.registry).to.be.a('string');
                    expect(data.run.tf_job.evaluator.environment.registry).to.be("");
                    expect(data.run.tf_job.evaluator.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.evaluator.environment.init_container.image).to.be.a('string');
                      expect(data.run.tf_job.evaluator.environment.init_container.image).to.be("");
                      expect(data.run.tf_job.evaluator.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.evaluator.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.evaluator.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.evaluator.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.evaluator.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.tf_job.evaluator.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.tf_job.evaluator.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.image).to.be("");
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.tf_job.evaluator.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.tf_job.evaluator.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.tf_job.evaluator.termination.max_retries).to.be.a('number');
                    expect(data.run.tf_job.evaluator.termination.max_retries).to.be(0);
                    expect(data.run.tf_job.evaluator.termination.restart_policy).to.be.a('string');
                    expect(data.run.tf_job.evaluator.termination.restart_policy).to.be("");
                    expect(data.run.tf_job.evaluator.termination.ttl).to.be.a('number');
                    expect(data.run.tf_job.evaluator.termination.ttl).to.be(0);
                    expect(data.run.tf_job.evaluator.termination.timeout).to.be.a('number');
                    expect(data.run.tf_job.evaluator.termination.timeout).to.be(0);
                  expect(data.run.tf_job.evaluator.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.tf_job.evaluator.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.tf_job.evaluator.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.tf_job.evaluator.init.build.image).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.tf_job.evaluator.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.evaluator.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.evaluator.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.tf_job.evaluator.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.tf_job.evaluator.init.build.lang_env).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.lang_env).to.be("");
                      expect(data.run.tf_job.evaluator.init.build.uid).to.be.a('number');
                      expect(data.run.tf_job.evaluator.init.build.uid).to.be(0);
                      expect(data.run.tf_job.evaluator.init.build.gid).to.be.a('number');
                      expect(data.run.tf_job.evaluator.init.build.gid).to.be(0);
                      expect(data.run.tf_job.evaluator.init.build.filename).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.filename).to.be("");
                      expect(data.run.tf_job.evaluator.init.build.workdir).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.workdir).to.be("");
                      expect(data.run.tf_job.evaluator.init.build.workdir_path).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.workdir_path).to.be("");
                      expect(data.run.tf_job.evaluator.init.build.shell).to.be.a('string');
                      expect(data.run.tf_job.evaluator.init.build.shell).to.be("");
                  expect(data.run.tf_job.evaluator.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.tf_job.evaluator.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.tf_job.evaluator.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.tf_job.evaluator.container.kind).to.be.a('string');
                    expect(data.run.tf_job.evaluator.container.kind).to.be("");
                    expect(data.run.tf_job.evaluator.container.image).to.be.a('string');
                    expect(data.run.tf_job.evaluator.container.image).to.be("");
                    expect(data.run.tf_job.evaluator.container.image_pull_policy).to.be.a('string');
                    expect(data.run.tf_job.evaluator.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.tf_job.evaluator.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.tf_job.evaluator.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
              expect(data.run.pytorch_job).to.be.a(PolyaxonSdk.V1PytorchJob);
                    expect(data.run.pytorch_job.kind).to.be.a('string');
                expect(data.run.pytorch_job.kind).to.be("");
                expect(data.run.pytorch_job.master).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.pytorch_job.master.replicas).to.be.a('number');
                  expect(data.run.pytorch_job.master.replicas).to.be(0);
                  expect(data.run.pytorch_job.master.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.pytorch_job.master.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.pytorch_job.master.environment.resources.limits).to.be.a(Object);
                      expect(data.run.pytorch_job.master.environment.resources.limits).to.be();
                      expect(data.run.pytorch_job.master.environment.resources.requests).to.be.a(Object);
                      expect(data.run.pytorch_job.master.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.service_account).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.pytorch_job.master.environment.security_context).to.be.a(Object);
                    expect(data.run.pytorch_job.master.environment.security_context).to.be();
                    expect(data.run.pytorch_job.master.environment.log_level).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.log_level).to.be("");
                    expect(data.run.pytorch_job.master.environment.auth).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.auth).to.be(false);
                    expect(data.run.pytorch_job.master.environment.docker).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.docker).to.be(false);
                    expect(data.run.pytorch_job.master.environment.shm).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.shm).to.be(false);
                    expect(data.run.pytorch_job.master.environment.outputs).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.outputs).to.be(false);
                    expect(data.run.pytorch_job.master.environment.logs).to.be.a('boolean');
                    expect(data.run.pytorch_job.master.environment.logs).to.be(false);
                    expect(data.run.pytorch_job.master.environment.registry).to.be.a('string');
                    expect(data.run.pytorch_job.master.environment.registry).to.be("");
                    expect(data.run.pytorch_job.master.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.pytorch_job.master.environment.init_container.image).to.be.a('string');
                      expect(data.run.pytorch_job.master.environment.init_container.image).to.be("");
                      expect(data.run.pytorch_job.master.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.pytorch_job.master.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.pytorch_job.master.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.pytorch_job.master.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.pytorch_job.master.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.pytorch_job.master.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.pytorch_job.master.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.pytorch_job.master.environment.sidecar_container.image).to.be("");
                      expect(data.run.pytorch_job.master.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.pytorch_job.master.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.pytorch_job.master.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.pytorch_job.master.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.pytorch_job.master.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.master.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.pytorch_job.master.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.pytorch_job.master.termination.max_retries).to.be.a('number');
                    expect(data.run.pytorch_job.master.termination.max_retries).to.be(0);
                    expect(data.run.pytorch_job.master.termination.restart_policy).to.be.a('string');
                    expect(data.run.pytorch_job.master.termination.restart_policy).to.be("");
                    expect(data.run.pytorch_job.master.termination.ttl).to.be.a('number');
                    expect(data.run.pytorch_job.master.termination.ttl).to.be(0);
                    expect(data.run.pytorch_job.master.termination.timeout).to.be.a('number');
                    expect(data.run.pytorch_job.master.termination.timeout).to.be(0);
                  expect(data.run.pytorch_job.master.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.pytorch_job.master.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.pytorch_job.master.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.pytorch_job.master.init.build.image).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.pytorch_job.master.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.master.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.master.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.master.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.pytorch_job.master.init.build.lang_env).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.lang_env).to.be("");
                      expect(data.run.pytorch_job.master.init.build.uid).to.be.a('number');
                      expect(data.run.pytorch_job.master.init.build.uid).to.be(0);
                      expect(data.run.pytorch_job.master.init.build.gid).to.be.a('number');
                      expect(data.run.pytorch_job.master.init.build.gid).to.be(0);
                      expect(data.run.pytorch_job.master.init.build.filename).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.filename).to.be("");
                      expect(data.run.pytorch_job.master.init.build.workdir).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.workdir).to.be("");
                      expect(data.run.pytorch_job.master.init.build.workdir_path).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.workdir_path).to.be("");
                      expect(data.run.pytorch_job.master.init.build.shell).to.be.a('string');
                      expect(data.run.pytorch_job.master.init.build.shell).to.be("");
                  expect(data.run.pytorch_job.master.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.pytorch_job.master.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.pytorch_job.master.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.pytorch_job.master.container.kind).to.be.a('string');
                    expect(data.run.pytorch_job.master.container.kind).to.be("");
                    expect(data.run.pytorch_job.master.container.image).to.be.a('string');
                    expect(data.run.pytorch_job.master.container.image).to.be("");
                    expect(data.run.pytorch_job.master.container.image_pull_policy).to.be.a('string');
                    expect(data.run.pytorch_job.master.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.master.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.master.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                expect(data.run.pytorch_job.worker).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.pytorch_job.worker.replicas).to.be.a('number');
                  expect(data.run.pytorch_job.worker.replicas).to.be(0);
                  expect(data.run.pytorch_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.pytorch_job.worker.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.pytorch_job.worker.environment.resources.limits).to.be.a(Object);
                      expect(data.run.pytorch_job.worker.environment.resources.limits).to.be();
                      expect(data.run.pytorch_job.worker.environment.resources.requests).to.be.a(Object);
                      expect(data.run.pytorch_job.worker.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.service_account).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.pytorch_job.worker.environment.security_context).to.be.a(Object);
                    expect(data.run.pytorch_job.worker.environment.security_context).to.be();
                    expect(data.run.pytorch_job.worker.environment.log_level).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.log_level).to.be("");
                    expect(data.run.pytorch_job.worker.environment.auth).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.auth).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.docker).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.docker).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.shm).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.shm).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.outputs).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.outputs).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.logs).to.be.a('boolean');
                    expect(data.run.pytorch_job.worker.environment.logs).to.be(false);
                    expect(data.run.pytorch_job.worker.environment.registry).to.be.a('string');
                    expect(data.run.pytorch_job.worker.environment.registry).to.be("");
                    expect(data.run.pytorch_job.worker.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.pytorch_job.worker.environment.init_container.image).to.be.a('string');
                      expect(data.run.pytorch_job.worker.environment.init_container.image).to.be("");
                      expect(data.run.pytorch_job.worker.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.pytorch_job.worker.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.pytorch_job.worker.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.pytorch_job.worker.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.pytorch_job.worker.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.pytorch_job.worker.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.pytorch_job.worker.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.image).to.be("");
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.pytorch_job.worker.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.pytorch_job.worker.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.pytorch_job.worker.termination.max_retries).to.be.a('number');
                    expect(data.run.pytorch_job.worker.termination.max_retries).to.be(0);
                    expect(data.run.pytorch_job.worker.termination.restart_policy).to.be.a('string');
                    expect(data.run.pytorch_job.worker.termination.restart_policy).to.be("");
                    expect(data.run.pytorch_job.worker.termination.ttl).to.be.a('number');
                    expect(data.run.pytorch_job.worker.termination.ttl).to.be(0);
                    expect(data.run.pytorch_job.worker.termination.timeout).to.be.a('number');
                    expect(data.run.pytorch_job.worker.termination.timeout).to.be(0);
                  expect(data.run.pytorch_job.worker.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.pytorch_job.worker.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.pytorch_job.worker.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.pytorch_job.worker.init.build.image).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.pytorch_job.worker.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.worker.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.worker.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.pytorch_job.worker.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.pytorch_job.worker.init.build.lang_env).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.lang_env).to.be("");
                      expect(data.run.pytorch_job.worker.init.build.uid).to.be.a('number');
                      expect(data.run.pytorch_job.worker.init.build.uid).to.be(0);
                      expect(data.run.pytorch_job.worker.init.build.gid).to.be.a('number');
                      expect(data.run.pytorch_job.worker.init.build.gid).to.be(0);
                      expect(data.run.pytorch_job.worker.init.build.filename).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.filename).to.be("");
                      expect(data.run.pytorch_job.worker.init.build.workdir).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.workdir).to.be("");
                      expect(data.run.pytorch_job.worker.init.build.workdir_path).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.workdir_path).to.be("");
                      expect(data.run.pytorch_job.worker.init.build.shell).to.be.a('string');
                      expect(data.run.pytorch_job.worker.init.build.shell).to.be("");
                  expect(data.run.pytorch_job.worker.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.pytorch_job.worker.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.pytorch_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.pytorch_job.worker.container.kind).to.be.a('string');
                    expect(data.run.pytorch_job.worker.container.kind).to.be("");
                    expect(data.run.pytorch_job.worker.container.image).to.be.a('string');
                    expect(data.run.pytorch_job.worker.container.image).to.be("");
                    expect(data.run.pytorch_job.worker.container.image_pull_policy).to.be.a('string');
                    expect(data.run.pytorch_job.worker.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.pytorch_job.worker.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.pytorch_job.worker.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
              expect(data.run.mpi_job).to.be.a(PolyaxonSdk.V1MpiJob);
                    expect(data.run.mpi_job.kind).to.be.a('string');
                expect(data.run.mpi_job.kind).to.be("");
                expect(data.run.mpi_job.slots_per_worker).to.be.a('number');
                expect(data.run.mpi_job.slots_per_worker).to.be(0);
                expect(data.run.mpi_job.launcher).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.mpi_job.launcher.replicas).to.be.a('number');
                  expect(data.run.mpi_job.launcher.replicas).to.be(0);
                  expect(data.run.mpi_job.launcher.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.mpi_job.launcher.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.mpi_job.launcher.environment.resources.limits).to.be.a(Object);
                      expect(data.run.mpi_job.launcher.environment.resources.limits).to.be();
                      expect(data.run.mpi_job.launcher.environment.resources.requests).to.be.a(Object);
                      expect(data.run.mpi_job.launcher.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.service_account).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.mpi_job.launcher.environment.security_context).to.be.a(Object);
                    expect(data.run.mpi_job.launcher.environment.security_context).to.be();
                    expect(data.run.mpi_job.launcher.environment.log_level).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.log_level).to.be("");
                    expect(data.run.mpi_job.launcher.environment.auth).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.auth).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.docker).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.docker).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.shm).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.shm).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.outputs).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.outputs).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.logs).to.be.a('boolean');
                    expect(data.run.mpi_job.launcher.environment.logs).to.be(false);
                    expect(data.run.mpi_job.launcher.environment.registry).to.be.a('string');
                    expect(data.run.mpi_job.launcher.environment.registry).to.be("");
                    expect(data.run.mpi_job.launcher.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.mpi_job.launcher.environment.init_container.image).to.be.a('string');
                      expect(data.run.mpi_job.launcher.environment.init_container.image).to.be("");
                      expect(data.run.mpi_job.launcher.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.mpi_job.launcher.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.mpi_job.launcher.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.mpi_job.launcher.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.mpi_job.launcher.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.mpi_job.launcher.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.mpi_job.launcher.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.image).to.be("");
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.launcher.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.mpi_job.launcher.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.mpi_job.launcher.termination.max_retries).to.be.a('number');
                    expect(data.run.mpi_job.launcher.termination.max_retries).to.be(0);
                    expect(data.run.mpi_job.launcher.termination.restart_policy).to.be.a('string');
                    expect(data.run.mpi_job.launcher.termination.restart_policy).to.be("");
                    expect(data.run.mpi_job.launcher.termination.ttl).to.be.a('number');
                    expect(data.run.mpi_job.launcher.termination.ttl).to.be(0);
                    expect(data.run.mpi_job.launcher.termination.timeout).to.be.a('number');
                    expect(data.run.mpi_job.launcher.termination.timeout).to.be(0);
                  expect(data.run.mpi_job.launcher.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.mpi_job.launcher.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.mpi_job.launcher.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.mpi_job.launcher.init.build.image).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.mpi_job.launcher.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.launcher.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.launcher.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.launcher.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.mpi_job.launcher.init.build.lang_env).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.lang_env).to.be("");
                      expect(data.run.mpi_job.launcher.init.build.uid).to.be.a('number');
                      expect(data.run.mpi_job.launcher.init.build.uid).to.be(0);
                      expect(data.run.mpi_job.launcher.init.build.gid).to.be.a('number');
                      expect(data.run.mpi_job.launcher.init.build.gid).to.be(0);
                      expect(data.run.mpi_job.launcher.init.build.filename).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.filename).to.be("");
                      expect(data.run.mpi_job.launcher.init.build.workdir).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.workdir).to.be("");
                      expect(data.run.mpi_job.launcher.init.build.workdir_path).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.workdir_path).to.be("");
                      expect(data.run.mpi_job.launcher.init.build.shell).to.be.a('string');
                      expect(data.run.mpi_job.launcher.init.build.shell).to.be("");
                  expect(data.run.mpi_job.launcher.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.mpi_job.launcher.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.mpi_job.launcher.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.mpi_job.launcher.container.kind).to.be.a('string');
                    expect(data.run.mpi_job.launcher.container.kind).to.be("");
                    expect(data.run.mpi_job.launcher.container.image).to.be.a('string');
                    expect(data.run.mpi_job.launcher.container.image).to.be("");
                    expect(data.run.mpi_job.launcher.container.image_pull_policy).to.be.a('string');
                    expect(data.run.mpi_job.launcher.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.launcher.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.launcher.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                expect(data.run.mpi_job.worker).to.be.a(PolyaxonSdk.V1Replica);
                      expect(data.run.mpi_job.worker.replicas).to.be.a('number');
                  expect(data.run.mpi_job.worker.replicas).to.be(0);
                  expect(data.run.mpi_job.worker.environment).to.be.a(PolyaxonSdk.V1Environment);
                        expect(data.run.mpi_job.worker.environment.resources).to.be.a(PolyaxonSdk.V1ResourceRequirements);
                          expect(data.run.mpi_job.worker.environment.resources.limits).to.be.a(Object);
                      expect(data.run.mpi_job.worker.environment.resources.limits).to.be();
                      expect(data.run.mpi_job.worker.environment.resources.requests).to.be.a(Object);
                      expect(data.run.mpi_job.worker.environment.resources.requests).to.be();
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.labels;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.annotations;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.node_selector;
                      expect(dataCtr).to.be.an(Object);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.affinity;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.tolerations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.service_account).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.service_account).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.image_pull_secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.environment.env_vars;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(Object);
                        expect(data).to.be();
                      }
                    }
                    expect(data.run.mpi_job.worker.environment.security_context).to.be.a(Object);
                    expect(data.run.mpi_job.worker.environment.security_context).to.be();
                    expect(data.run.mpi_job.worker.environment.log_level).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.log_level).to.be("");
                    expect(data.run.mpi_job.worker.environment.auth).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.auth).to.be(false);
                    expect(data.run.mpi_job.worker.environment.docker).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.docker).to.be(false);
                    expect(data.run.mpi_job.worker.environment.shm).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.shm).to.be(false);
                    expect(data.run.mpi_job.worker.environment.outputs).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.outputs).to.be(false);
                    expect(data.run.mpi_job.worker.environment.logs).to.be.a('boolean');
                    expect(data.run.mpi_job.worker.environment.logs).to.be(false);
                    expect(data.run.mpi_job.worker.environment.registry).to.be.a('string');
                    expect(data.run.mpi_job.worker.environment.registry).to.be("");
                    expect(data.run.mpi_job.worker.environment.init_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.mpi_job.worker.environment.init_container.image).to.be.a('string');
                      expect(data.run.mpi_job.worker.environment.init_container.image).to.be("");
                      expect(data.run.mpi_job.worker.environment.init_container.image_pull_policy).to.be.a('string');
                      expect(data.run.mpi_job.worker.environment.init_container.image_pull_policy).to.be("");
                      expect(data.run.mpi_job.worker.environment.init_container.sleep_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.init_container.sleep_interval).to.be(0);
                      expect(data.run.mpi_job.worker.environment.init_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.init_container.outputs_sync_interval).to.be(0);
                      expect(data.run.mpi_job.worker.environment.init_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.init_container.logs_sync_interval).to.be(0);
                    expect(data.run.mpi_job.worker.environment.sidecar_container).to.be.a(PolyaxonSdk.V1ContainerEnv);
                          expect(data.run.mpi_job.worker.environment.sidecar_container.image).to.be.a('string');
                      expect(data.run.mpi_job.worker.environment.sidecar_container.image).to.be("");
                      expect(data.run.mpi_job.worker.environment.sidecar_container.image_pull_policy).to.be.a('string');
                      expect(data.run.mpi_job.worker.environment.sidecar_container.image_pull_policy).to.be("");
                      expect(data.run.mpi_job.worker.environment.sidecar_container.sleep_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.sidecar_container.sleep_interval).to.be(0);
                      expect(data.run.mpi_job.worker.environment.sidecar_container.outputs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.sidecar_container.outputs_sync_interval).to.be(0);
                      expect(data.run.mpi_job.worker.environment.sidecar_container.logs_sync_interval).to.be.a('number');
                      expect(data.run.mpi_job.worker.environment.sidecar_container.logs_sync_interval).to.be(0);
                  expect(data.run.mpi_job.worker.termination).to.be.a(PolyaxonSdk.V1Termination);
                        expect(data.run.mpi_job.worker.termination.max_retries).to.be.a('number');
                    expect(data.run.mpi_job.worker.termination.max_retries).to.be(0);
                    expect(data.run.mpi_job.worker.termination.restart_policy).to.be.a('string');
                    expect(data.run.mpi_job.worker.termination.restart_policy).to.be("");
                    expect(data.run.mpi_job.worker.termination.ttl).to.be.a('number');
                    expect(data.run.mpi_job.worker.termination.ttl).to.be(0);
                    expect(data.run.mpi_job.worker.termination.timeout).to.be.a('number');
                    expect(data.run.mpi_job.worker.termination.timeout).to.be(0);
                  expect(data.run.mpi_job.worker.init).to.be.a(PolyaxonSdk.V1Init);
                        {
                      let dataCtr = data.run.mpi_job.worker.init.repos;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1RepoInit);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.commit).to.be.a('string');
                        expect(data.commit).to.be("");
                        expect(data.branch).to.be.a('string');
                        expect(data.branch).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.init.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    expect(data.run.mpi_job.worker.init.build).to.be.a(PolyaxonSdk.V1BuildContext);
                          expect(data.run.mpi_job.worker.init.build.image).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.image).to.be("");
                      {
                        let dataCtr = data.run.mpi_job.worker.init.build.env;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.worker.init.build.path;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.worker.init.build.copy;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      {
                        let dataCtr = data.run.mpi_job.worker.init.build.run;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(Object);
                          expect(data).to.be();
                        }
                      }
                      expect(data.run.mpi_job.worker.init.build.lang_env).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.lang_env).to.be("");
                      expect(data.run.mpi_job.worker.init.build.uid).to.be.a('number');
                      expect(data.run.mpi_job.worker.init.build.uid).to.be(0);
                      expect(data.run.mpi_job.worker.init.build.gid).to.be.a('number');
                      expect(data.run.mpi_job.worker.init.build.gid).to.be(0);
                      expect(data.run.mpi_job.worker.init.build.filename).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.filename).to.be("");
                      expect(data.run.mpi_job.worker.init.build.workdir).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.workdir).to.be("");
                      expect(data.run.mpi_job.worker.init.build.workdir_path).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.workdir_path).to.be("");
                      expect(data.run.mpi_job.worker.init.build.shell).to.be.a('string');
                      expect(data.run.mpi_job.worker.init.build.shell).to.be("");
                  expect(data.run.mpi_job.worker.mounts).to.be.a(PolyaxonSdk.V1Mounts);
                        {
                      let dataCtr = data.run.mpi_job.worker.mounts.secrets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.mounts.config_maps;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1K8sMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        expect(data.mount_path).to.be.a('string');
                        expect(data.mount_path).to.be("");
                        {
                          let dataCtr = data.items;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.mounts.artifacts;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(PolyaxonSdk.V1ArtifactMount);
                        expect(data.name).to.be.a('string');
                        expect(data.name).to.be("");
                        {
                          let dataCtr = data.paths;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("");
                          }
                        }
                      }
                    }
                  expect(data.run.mpi_job.worker.container).to.be.a(PolyaxonSdk.V1Container);
                        expect(data.run.mpi_job.worker.container.kind).to.be.a('string');
                    expect(data.run.mpi_job.worker.container.kind).to.be("");
                    expect(data.run.mpi_job.worker.container.image).to.be.a('string');
                    expect(data.run.mpi_job.worker.container.image).to.be("");
                    expect(data.run.mpi_job.worker.container.image_pull_policy).to.be.a('string');
                    expect(data.run.mpi_job.worker.container.image_pull_policy).to.be("");
                    {
                      let dataCtr = data.run.mpi_job.worker.container.command;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
                    {
                      let dataCtr = data.run.mpi_job.worker.container.args;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
              expect(data.run.dask).to.be.a(PolyaxonSdk.V1Dask);
                    expect(data.run.dask.kind).to.be.a('string');
                expect(data.run.dask.kind).to.be("");
                expect(data.run.dask.spec).to.be.a(Object);
                expect(data.run.dask.spec).to.be();
              expect(data.run.spark).to.be.a(PolyaxonSdk.V1Spark);
                    expect(data.run.spark.kind).to.be.a('string');
                expect(data.run.spark.kind).to.be("");
                expect(data.run.spark.spec).to.be.a(Object);
                expect(data.run.spark.spec).to.be();
              expect(data.run.flink).to.be.a(PolyaxonSdk.V1Flink);
                    expect(data.run.flink.kind).to.be.a('string');
                expect(data.run.flink.kind).to.be("");
                expect(data.run.flink.spec).to.be.a(Object);
                expect(data.run.flink.spec).to.be();
            expect(data.schedule).to.be.a(PolyaxonSdk.V1Schedule);
                  expect(data.schedule.cron).to.be.a(PolyaxonSdk.V1CronSchedule);
                    expect(data.schedule.cron.kind).to.be.a('string');
                expect(data.schedule.cron.kind).to.be("");
                expect(data.schedule.cron.start_at).to.be.a(Date);
                expect(data.schedule.cron.start_at).to.be(new Date());
                expect(data.schedule.cron.end_at).to.be.a(Date);
                expect(data.schedule.cron.end_at).to.be(new Date());
                expect(data.schedule.cron.cron).to.be.a('string');
                expect(data.schedule.cron.cron).to.be("");
                expect(data.schedule.cron.depends_on_past).to.be.a('boolean');
                expect(data.schedule.cron.depends_on_past).to.be(false);
              expect(data.schedule.exact_time).to.be.a(PolyaxonSdk.V1ExactTimeSchedule);
                    expect(data.schedule.exact_time.kind).to.be.a('string');
                expect(data.schedule.exact_time.kind).to.be("");
                expect(data.schedule.exact_time.start_at).to.be.a(Date);
                expect(data.schedule.exact_time.start_at).to.be(new Date());
              expect(data.schedule.interval).to.be.a(PolyaxonSdk.V1IntervalSchedule);
                    expect(data.schedule.interval.kind).to.be.a('string');
                expect(data.schedule.interval.kind).to.be("");
                expect(data.schedule.interval.start_at).to.be.a(Date);
                expect(data.schedule.interval.start_at).to.be(new Date());
                expect(data.schedule.interval.end_at).to.be.a(Date);
                expect(data.schedule.interval.end_at).to.be(new Date());
                expect(data.schedule.interval.frequency).to.be.a('number');
                expect(data.schedule.interval.frequency).to.be(0);
                expect(data.schedule.interval.depends_on_past).to.be.a('boolean');
                expect(data.schedule.interval.depends_on_past).to.be(false);
              expect(data.schedule.repeatable).to.be.a(PolyaxonSdk.V1RepeatableSchedule);
                    expect(data.schedule.repeatable.kind).to.be.a('string');
                expect(data.schedule.repeatable.kind).to.be("");
                expect(data.schedule.repeatable.limit).to.be.a('number');
                expect(data.schedule.repeatable.limit).to.be(0);
                expect(data.schedule.repeatable.depends_on_past).to.be.a('boolean');
                expect(data.schedule.repeatable.depends_on_past).to.be(false);
            expect(data.artifact_format).to.be.a(PolyaxonSdk.V1ArtifactFormat);
                expect(data.connection_schema).to.be.a(PolyaxonSdk.V1ConnectionScema);
                  expect(data.connection_schema.blob_connection).to.be.a(PolyaxonSdk.V1BlobConnection);
                    expect(data.connection_schema.blob_connection.blob).to.be.a('string');
                expect(data.connection_schema.blob_connection.blob).to.be("");
              expect(data.connection_schema.host_path_connection).to.be.a(PolyaxonSdk.V1HostPathConnection);
                    expect(data.connection_schema.host_path_connection.host_path).to.be.a('string');
                expect(data.connection_schema.host_path_connection.host_path).to.be("");
                expect(data.connection_schema.host_path_connection.mount_path).to.be.a('string');
                expect(data.connection_schema.host_path_connection.mount_path).to.be("");
                expect(data.connection_schema.host_path_connection.read_only).to.be.a('boolean');
                expect(data.connection_schema.host_path_connection.read_only).to.be(false);
              expect(data.connection_schema.claim_connection).to.be.a(PolyaxonSdk.V1ClaimConnection);
                    expect(data.connection_schema.claim_connection.volume_claim).to.be.a('string');
                expect(data.connection_schema.claim_connection.volume_claim).to.be("");
                expect(data.connection_schema.claim_connection.mount_path).to.be.a('string');
                expect(data.connection_schema.claim_connection.mount_path).to.be("");
                expect(data.connection_schema.claim_connection.read_only).to.be.a('boolean');
                expect(data.connection_schema.claim_connection.read_only).to.be(false);
              expect(data.connection_schema.host_connection).to.be.a(PolyaxonSdk.V1HostConnection);
                    expect(data.connection_schema.host_connection.url).to.be.a('string');
                expect(data.connection_schema.host_connection.url).to.be("");
                expect(data.connection_schema.host_connection.insecure).to.be.a('boolean');
                expect(data.connection_schema.host_connection.insecure).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
