syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "v1/artifacts_store.proto";
import "v1/host_access.proto";
import "v1/k8s_resource.proto";
import "v1/base.proto";
import "v1/code_ref.proto";
import "v1/run.proto";
import "v1/project.proto";
import "v1/version.proto";
import "v1/auth.proto";
import "v1/user.proto";
import "v1/search.proto";
import "v1/status.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Polyaxon sdk";
		version: "1.0.0";
		contact: {
			name: "Polyaxon sdk";
			url: "https://github.com/polyaxon/polyaxon";
			email: "contact@polyaxon.com";
        };
    };
    schemes: HTTP;
	schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
		security: {
			key: "ApiKey";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
        }
    };
	security: {
		security_requirement: {
			key: "ApiKey";
			value: {};
        }
	};
    responses: {
		key: "204";
		value: {
            description: "No content.";
		}
	}
    responses: {
		key: "403";
		value: {
			description: "You don't have permission to access the resource.";
		}
	}
    responses: {
		key: "404";
		value: {
			description: "Resource does not exist.";
		}
	}
};


service RunsV1 {
    // List bookmarked runs for user
    rpc ListBookmarkedRuns(UserResouceListRequest) returns (ListRunsResponse) {
        option (google.api.http) = {
            get: "/api/v1/bookmarks/{user}/runs"
        };
    }

    // List archived runs for user
    rpc ListArchivedRuns(UserResouceListRequest) returns (ListRunsResponse) {
        option (google.api.http) = {
            get: "/api/v1/archives/{user}/runs"
        };
    }

    // List runs
    rpc ListRuns(ProjectResourceListRequest) returns (ListRunsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs"
        };
    }

    // Create new run
    rpc CreateRun(RunBodyRequest) returns (Run) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs"
            body: "run"
        };
    }

    // Get run
    rpc GetRun(ProjectEntityResourceRequest) returns (Run) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs/{uuid}"
        };
    }

    // Update run
    rpc UpdateRun(RunBodyRequest) returns (Run) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project}/runs/{run.uuid}"
            body: "run"
        };
    }

    // Patch run
    rpc PatchRun(RunBodyRequest) returns (Run) {
        option (google.api.http) = {
            patch: "/api/v1/{owner}/{project}/runs/{run.uuid}"
            body: "run"
        };
    }

    // Delete run
    rpc DeleteRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/runs/{uuid}"
        };
    }

    // Delete runs
    rpc DeleteRuns(ProjectResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/runs/delete"
            body: "uuids"
        };
    }

    // Stop run
    rpc StopRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/stop"
        };
    }

    // Stop runs
    rpc StopRuns(ProjectResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/stop"
            body: "uuids"
        };
    }

    // Invalidate run
    rpc InvalidateRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/invalidate"
            body: "*"
        };
    }

    // Invalidate runs
    rpc InvalidateRuns(ProjectResourceUuidsBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/invalidate"
            body: "uuids"
        };
    }

     // Restart run with copy
     rpc CopyRun(EntityRunBodyRequest) returns (Run) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/copy"
            body: "run"
        };
    }

    // Restart run
    rpc RestartRun(EntityRunBodyRequest) returns (Run) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/restart"
            body: "run"
        };
    }

    // Resume run
    rpc ResumeRun(EntityRunBodyRequest) returns (Run) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/resume"
            body: "run"
        };
    }

    // Archive run
    rpc ArchiveRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/archive"
        };
    }

    // Restore run
    rpc RestoreRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/restore"
        };
    }

    // Bookmark run
    rpc BookmarkRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/bookmark"
        };
    }

    // Unbookmark run
    rpc UnbookmarkRun(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/runs/{uuid}/unbookmark"
        };
    }

    // Start run tensorboard
    rpc StartRunTensorboard(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {  // TODO: should be a tensorboard object
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/start"
            body: "*"
        };
    }

    // Stop run tensorboard
    rpc StopRunTensorboard(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/stop"
        };
    }

    // Get run status
    rpc GetRunStatuses(ProjectEntityResourceRequest) returns (Status) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs/{uuid}/statuses"
        };
    }

    // Create new run status
    rpc CreateRunStatus(EntityStatusBodyRequest) returns (Status) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/statuses"
            body: "*"
        };
    }

    // Get run code ref
    rpc GetRunCodeRefs(ProjectEntityResourceRequest) returns (ListCodeRefsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs/{uuid}/coderef"
        };
    }

    // Get run code ref
    rpc CreateRunCodeRef(CodeRefBodyRequest) returns (CodeReference) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/coderef"
            body: "code_reference"
        };
    }

    // Impersonate run token
    rpc ImpersonateToken(ProjectEntityResourceRequest) returns (Auth) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/runs/{uuid}/impersonate"
        };
    }

    // Get run logs list
    rpc GetRunLogsTree(RunArtifactRequest) returns (ArtifactTreeResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs/{uuid}/logs/tree"
        };
    }

    // Get run artifacts list
    rpc GetRunArtifactsTree(RunArtifactRequest) returns (ArtifactTreeResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/runs/{uuid}/artifacts/tree"
        };
    }
}

// Service to manage project
service ProjectsV1 {
    // List projects
    rpc ListProjects(OwnerResouceListRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/projects/list"
        };
    }

    // Create new project
    rpc CreateProject(ProjectBodyRequest) returns (Project) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/projects/create"
            body: "project"
        };
    }

    // List project namess
    rpc ListProjectNames(OwnerResouceListRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/projects/names"
        };
    }

    // List bookmarked projects for user
    rpc ListBookmarkedProjects(UserResouceListRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/bookmarks/{user}/projects"
        };
    }

    // List archived projects for user
    rpc ListArchivedProjects(UserResouceListRequest) returns (ListProjectsResponse) {
        option (google.api.http) = {
            get: "/api/v1/archives/{user}/projects"
        };
    }

    // Get project
    rpc GetProject(ProjectResourceRequest) returns (Project) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}"
        };
    }

    // Update project
    rpc UpdateProject(ProjectBodyRequest) returns (Project) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project.name}"
            body: "project"
        };
    }

    // Patch project
    rpc PatchProject(ProjectBodyRequest) returns (Project) {
        option (google.api.http) = {
            patch: "/api/v1/{owner}/{project.name}"
            body: "project"
        };
    }

    // Delete project
    rpc DeleteProject(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}"
        };
    }

    // Archive project
    rpc ArchiveProject(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/archive"
        };
    }

    // Restore project
    rpc RestoreProject(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/restore"
        };
    }

    // Bookmark project
    rpc BookmarkProject(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/bookmark"
        };
    }

    // Unbookmark project
    rpc UnbookmarkProject(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/unbookmark"
        };
    }

    // Enable project CI
    rpc EnableProjectCI(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/ci"
        };
    }

    // Disbale project CI
    rpc DisableProjectCI(ProjectResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/ci"
        };
    }
}

// Service to manage artifacts
service ArtifactsStoresV1 {

    // List artifact stores namess
    rpc ListArtifactsStoreNames(OwnerResouceListRequest) returns (ListArtifactsStoresResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/artifacts_stores/names"
        };
    }

    // List artifact stores
    rpc ListArtifactsStores(OwnerResouceListRequest) returns (ListArtifactsStoresResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/artifacts_stores"
        };
    }

    // Create artifact store
    rpc CreateArtifactsStore(ArtifactsStoreBodyRequest) returns (ArtifactsStore) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/artifacts_stores"
            body: "artifact_store"
        };
    }

    // Get artifact store
    rpc GetArtifactsStore(OwnerEntityResourceRequest) returns (ArtifactsStore) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/artifacts_stores/{uuid}"
        };
    }

    // Update artifact store
    rpc UpdateArtifactsStore(ArtifactsStoreBodyRequest) returns (ArtifactsStore) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/artifacts_stores/{artifact_store.uuid}"
            body: "artifact_store"
        };
    }

    // Patch artifact store
    rpc PatchArtifactsStore(ArtifactsStoreBodyRequest) returns (ArtifactsStore) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/artifacts_stores/{artifact_store.uuid}"
            body: "artifact_store"
        };
    }

    // Delete artifact store
    rpc DeleteArtifactsStore(OwnerEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/artifacts_stores/{uuid}"
        };
    }
}

// Service to manage k8s config maps
service K8sConfigMapsV1 {

    // List k8s config map namess
    rpc ListK8sConfigMapNames(OwnerResouceListRequest) returns (ListK8sResourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_config_maps/names"
        };
    }

    // List k8s config maps
    rpc ListK8sConfigMaps(OwnerResouceListRequest) returns (ListK8sResourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_config_maps"
        };
    }

    // Create k8s config map
    rpc CreateK8sConfigMaps(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/k8s_config_maps"
            body: "k8s_resource"
        };
    }

    // Get k8s config map
    rpc GetK8sConfigMap(OwnerEntityResourceRequest) returns (K8sResource) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_config_maps/{uuid}"
        };
    }

    // Update k8s config map
    rpc UpdateK8sConfigMap(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/k8s_config_maps/{k8s_resource.uuid}"
            body: "k8s_resource"
        };
    }

    // Patch k8s config map
    rpc PatchK8sConfigMap(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/k8s_config_maps/{k8s_resource.uuid}"
            body: "k8s_resource"
        };
    }

    // Delete k8s config map
    rpc DeleteK8sConfigMap(OwnerEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/k8s_config_maps/{uuid}"
        };
    }
}

// Service to manage k8s secrets
service K8sSecretsV1 {

    // List k8s secret namess
    rpc ListK8sSecretNames(OwnerResouceListRequest) returns (ListK8sResourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_secrets/names"
        };
    }

    // List k8s secrets
    rpc ListK8sSecrets(OwnerResouceListRequest) returns (ListK8sResourcesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_secrets"
        };
    }

    // Create k8s secret
    rpc CreateK8sSecrets(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/k8s_secrets"
            body: "k8s_resource"
        };
    }

    // Get k8s secret
    rpc GetK8sSecret(OwnerEntityResourceRequest) returns (K8sResource) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/k8s_secrets/{uuid}"
        };
    }

    // Update k8s secret
    rpc UpdateK8sSecret(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}"
            body: "k8s_resource"
        };
    }

    // Patch k8s secret
    rpc PatchK8sSecret(K8sResourceBodyRequest) returns (K8sResource) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}"
            body: "k8s_resource"
        };
    }

    // Delete k8s config map
    rpc DeleteK8sSecret(OwnerEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/k8s_secrets/{uuid}"
        };
    }
}


// Service to manage regsitry access
service RegistryAccessesV1 {

    // List registry access names
    rpc ListRegistryAccessNames(OwnerResouceListRequest) returns (ListHostAccessesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/registry_accesses/names"
        };
    }

    // List registry access
    rpc ListRegistryAccesses(OwnerResouceListRequest) returns (ListHostAccessesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/registry_accesses"
        };
    }

    // Create registry access
    rpc CreateRegistryAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/registry_accesses"
            body: "host_access"
        };
    }

    // Get registry access
    rpc GetRegistryAccess(OwnerEntityResourceRequest) returns (HostAccess) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/registry_accesses/{uuid}"
        };
    }

    // Update registry access
    rpc UpdateRegistryAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/registry_accesses/{host_access.uuid}"
            body: "host_access"
        };
    }

    // Patch registry access
    rpc PatchRegistryAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/registry_accesses/{host_access.uuid}"
            body: "host_access"
        };
    }

    // Delete registry access
    rpc DeleteRegistryAccess(OwnerEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/registry_accesses/{uuid}"
        };
    }
}

// Service to manage git access
service GitAccessesV1 {

    // List git access names
    rpc ListGitAccessNames(OwnerResouceListRequest) returns (ListHostAccessesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/git_accesses/names"
        };
    }

    // List git accesses
    rpc ListGitAccesses(OwnerResouceListRequest) returns (ListHostAccessesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/git_accesses"
        };
    }

    // Create git accesses
    rpc CreateGitAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/git_accesses"
            body: "host_access"
        };
    }

    // Get git access
    rpc GetGitAccess(OwnerEntityResourceRequest) returns (HostAccess) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/git_accesses/{uuid}"
        };
    }

    // Update git access
    rpc UpdateGitAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/git_accesses/{host_access.uuid}"
            body: "host_access"
        };
    }

    // Patch git access
    rpc PatchGitAccess(HostAccessBodyRequest) returns (HostAccess) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/git_accesses/{host_access.uuid}"
            body: "host_access"
        };
    }

    // Delete git access
    rpc DeleteGitAccess(OwnerEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/git_accesses/{uuid}"
        };
    }
}

// Service to manage searches
service SearchV1 {

    // List searches
    rpc ListSearches(ProjectResourceListRequest) returns (ListSearchesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/searches"
        };
    }

    // Create search
    rpc CreateSearch(SearchBodyRequest) returns (Search) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/searches"
            body: "search"
        };
    }

    // Get search
    rpc GetSearch(ProjectEntityResourceRequest) returns (Search) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/searches/{uuid}"
        };
    }

    // Update search
    rpc UpdateSearch(SearchBodyRequest) returns (Search) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project}/searches/{search.uuid}"
            body: "search"
        };
    }

    // Patch search
    rpc PatchSearch(SearchBodyRequest) returns (Search) {
        option (google.api.http) = {
            patch:  "/api/v1/{owner}/{project}/searches/{search.uuid}"
            body: "search"
        };
    }

    // Delete search
    rpc DeleteSearch(ProjectEntityResourceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/searches/{uuid}"
        };
    }
}

// Service to manage auth
service AuthV1 {
    // Login
    rpc Login(CredsBodyRequest) returns (Auth) {
        option (google.api.http) = {
            post: "/api/v1/users/token"
            body: "*"
        };
    }
}

// Service to get user level infotmation
service UsersV1 {
    // Get current user
    rpc GetUser(google.protobuf.Empty) returns (User) {
        option (google.api.http) = {
            get: "/api/v1/users"
        };
    }

}

// Service to get versions
service VersionsV1 {
    // Get versions
    rpc GetVersions(google.protobuf.Empty) returns (Versions) {
        option (google.api.http) = {
            get: "/api/v1/version"
        };
    }

    // Get log handler
    rpc GetLogHandler(google.protobuf.Empty) returns (LogHandler) {
        option (google.api.http) = {
            get: "/api/v1/log_handler"
        };
    }
}
