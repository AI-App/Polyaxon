#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1EarlyStoppingAllSchemas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "median": "V1MedianStoppingPolicy",
        "average": "V1AverageStoppingPolicy",
        "truncation": "V1TruncationStoppingPolicy",
        "metric": "V1MetricEarlyStopping",
        "failure": "V1FailureEarlyStopping",
    }

    attribute_map = {
        "median": "median",
        "average": "average",
        "truncation": "truncation",
        "metric": "metric",
        "failure": "failure",
    }

    def __init__(
        self, median=None, average=None, truncation=None, metric=None, failure=None
    ):  # noqa: E501
        """V1EarlyStoppingAllSchemas - a model defined in Swagger"""  # noqa: E501

        self._median = None
        self._average = None
        self._truncation = None
        self._metric = None
        self._failure = None
        self.discriminator = None

        if median is not None:
            self.median = median
        if average is not None:
            self.average = average
        if truncation is not None:
            self.truncation = truncation
        if metric is not None:
            self.metric = metric
        if failure is not None:
            self.failure = failure

    @property
    def median(self):
        """Gets the median of this V1EarlyStoppingAllSchemas.  # noqa: E501


        :return: The median of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :rtype: V1MedianStoppingPolicy
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this V1EarlyStoppingAllSchemas.


        :param median: The median of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :type: V1MedianStoppingPolicy
        """

        self._median = median

    @property
    def average(self):
        """Gets the average of this V1EarlyStoppingAllSchemas.  # noqa: E501


        :return: The average of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :rtype: V1AverageStoppingPolicy
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this V1EarlyStoppingAllSchemas.


        :param average: The average of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :type: V1AverageStoppingPolicy
        """

        self._average = average

    @property
    def truncation(self):
        """Gets the truncation of this V1EarlyStoppingAllSchemas.  # noqa: E501


        :return: The truncation of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :rtype: V1TruncationStoppingPolicy
        """
        return self._truncation

    @truncation.setter
    def truncation(self, truncation):
        """Sets the truncation of this V1EarlyStoppingAllSchemas.


        :param truncation: The truncation of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :type: V1TruncationStoppingPolicy
        """

        self._truncation = truncation

    @property
    def metric(self):
        """Gets the metric of this V1EarlyStoppingAllSchemas.  # noqa: E501


        :return: The metric of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :rtype: V1MetricEarlyStopping
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this V1EarlyStoppingAllSchemas.


        :param metric: The metric of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :type: V1MetricEarlyStopping
        """

        self._metric = metric

    @property
    def failure(self):
        """Gets the failure of this V1EarlyStoppingAllSchemas.  # noqa: E501


        :return: The failure of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :rtype: V1FailureEarlyStopping
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this V1EarlyStoppingAllSchemas.


        :param failure: The failure of this V1EarlyStoppingAllSchemas.  # noqa: E501
        :type: V1FailureEarlyStopping
        """

        self._failure = failure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1EarlyStoppingAllSchemas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1EarlyStoppingAllSchemas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
