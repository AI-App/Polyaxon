#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1ContainerEnv(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'image': 'str',
        'image_pull_policy': 'str',
        'sleep_interval': 'int',
        'outputs_sync_interval': 'int',
        'logs_sync_interval': 'int'
    }

    attribute_map = {
        'image': 'image',
        'image_pull_policy': 'image_pull_policy',
        'sleep_interval': 'sleep_interval',
        'outputs_sync_interval': 'outputs_sync_interval',
        'logs_sync_interval': 'logs_sync_interval'
    }

    def __init__(self, image=None, image_pull_policy=None, sleep_interval=None, outputs_sync_interval=None, logs_sync_interval=None):  # noqa: E501
        """V1ContainerEnv - a model defined in Swagger"""  # noqa: E501

        self._image = None
        self._image_pull_policy = None
        self._sleep_interval = None
        self._outputs_sync_interval = None
        self._logs_sync_interval = None
        self.discriminator = None

        if image is not None:
            self.image = image
        if image_pull_policy is not None:
            self.image_pull_policy = image_pull_policy
        if sleep_interval is not None:
            self.sleep_interval = sleep_interval
        if outputs_sync_interval is not None:
            self.outputs_sync_interval = outputs_sync_interval
        if logs_sync_interval is not None:
            self.logs_sync_interval = logs_sync_interval

    @property
    def image(self):
        """Gets the image of this V1ContainerEnv.  # noqa: E501


        :return: The image of this V1ContainerEnv.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this V1ContainerEnv.


        :param image: The image of this V1ContainerEnv.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_pull_policy(self):
        """Gets the image_pull_policy of this V1ContainerEnv.  # noqa: E501


        :return: The image_pull_policy of this V1ContainerEnv.  # noqa: E501
        :rtype: str
        """
        return self._image_pull_policy

    @image_pull_policy.setter
    def image_pull_policy(self, image_pull_policy):
        """Sets the image_pull_policy of this V1ContainerEnv.


        :param image_pull_policy: The image_pull_policy of this V1ContainerEnv.  # noqa: E501
        :type: str
        """

        self._image_pull_policy = image_pull_policy

    @property
    def sleep_interval(self):
        """Gets the sleep_interval of this V1ContainerEnv.  # noqa: E501


        :return: The sleep_interval of this V1ContainerEnv.  # noqa: E501
        :rtype: int
        """
        return self._sleep_interval

    @sleep_interval.setter
    def sleep_interval(self, sleep_interval):
        """Sets the sleep_interval of this V1ContainerEnv.


        :param sleep_interval: The sleep_interval of this V1ContainerEnv.  # noqa: E501
        :type: int
        """

        self._sleep_interval = sleep_interval

    @property
    def outputs_sync_interval(self):
        """Gets the outputs_sync_interval of this V1ContainerEnv.  # noqa: E501


        :return: The outputs_sync_interval of this V1ContainerEnv.  # noqa: E501
        :rtype: int
        """
        return self._outputs_sync_interval

    @outputs_sync_interval.setter
    def outputs_sync_interval(self, outputs_sync_interval):
        """Sets the outputs_sync_interval of this V1ContainerEnv.


        :param outputs_sync_interval: The outputs_sync_interval of this V1ContainerEnv.  # noqa: E501
        :type: int
        """

        self._outputs_sync_interval = outputs_sync_interval

    @property
    def logs_sync_interval(self):
        """Gets the logs_sync_interval of this V1ContainerEnv.  # noqa: E501


        :return: The logs_sync_interval of this V1ContainerEnv.  # noqa: E501
        :rtype: int
        """
        return self._logs_sync_interval

    @logs_sync_interval.setter
    def logs_sync_interval(self, logs_sync_interval):
        """Sets the logs_sync_interval of this V1ContainerEnv.


        :param logs_sync_interval: The logs_sync_interval of this V1ContainerEnv.  # noqa: E501
        :type: int
        """

        self._logs_sync_interval = logs_sync_interval

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1ContainerEnv, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ContainerEnv):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
