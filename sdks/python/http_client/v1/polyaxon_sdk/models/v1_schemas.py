#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Schemas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "op_condition": "V1OpCondition",
        "early_stopping": "V1EarlyStopping",
        "parallel": "V1Parallel",
        "op": "V1Op",
        "run": "V1RunSchema",
        "schedule": "V1Schedule",
        "artifact_format": "V1ArtifactFormat",
        "connection_schema": "V1ConnectionScema",
    }

    attribute_map = {
        "op_condition": "op_condition",
        "early_stopping": "early_stopping",
        "parallel": "parallel",
        "op": "op",
        "run": "run",
        "schedule": "schedule",
        "artifact_format": "artifact_format",
        "connection_schema": "connection_schema",
    }

    def __init__(
        self,
        op_condition=None,
        early_stopping=None,
        parallel=None,
        op=None,
        run=None,
        schedule=None,
        artifact_format=None,
        connection_schema=None,
    ):  # noqa: E501
        """V1Schemas - a model defined in Swagger"""  # noqa: E501

        self._op_condition = None
        self._early_stopping = None
        self._parallel = None
        self._op = None
        self._run = None
        self._schedule = None
        self._artifact_format = None
        self._connection_schema = None
        self.discriminator = None

        if op_condition is not None:
            self.op_condition = op_condition
        if early_stopping is not None:
            self.early_stopping = early_stopping
        if parallel is not None:
            self.parallel = parallel
        if op is not None:
            self.op = op
        if run is not None:
            self.run = run
        if schedule is not None:
            self.schedule = schedule
        if artifact_format is not None:
            self.artifact_format = artifact_format
        if connection_schema is not None:
            self.connection_schema = connection_schema

    @property
    def op_condition(self):
        """Gets the op_condition of this V1Schemas.  # noqa: E501


        :return: The op_condition of this V1Schemas.  # noqa: E501
        :rtype: V1OpCondition
        """
        return self._op_condition

    @op_condition.setter
    def op_condition(self, op_condition):
        """Sets the op_condition of this V1Schemas.


        :param op_condition: The op_condition of this V1Schemas.  # noqa: E501
        :type: V1OpCondition
        """

        self._op_condition = op_condition

    @property
    def early_stopping(self):
        """Gets the early_stopping of this V1Schemas.  # noqa: E501


        :return: The early_stopping of this V1Schemas.  # noqa: E501
        :rtype: V1EarlyStopping
        """
        return self._early_stopping

    @early_stopping.setter
    def early_stopping(self, early_stopping):
        """Sets the early_stopping of this V1Schemas.


        :param early_stopping: The early_stopping of this V1Schemas.  # noqa: E501
        :type: V1EarlyStopping
        """

        self._early_stopping = early_stopping

    @property
    def parallel(self):
        """Gets the parallel of this V1Schemas.  # noqa: E501


        :return: The parallel of this V1Schemas.  # noqa: E501
        :rtype: V1Parallel
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this V1Schemas.


        :param parallel: The parallel of this V1Schemas.  # noqa: E501
        :type: V1Parallel
        """

        self._parallel = parallel

    @property
    def op(self):
        """Gets the op of this V1Schemas.  # noqa: E501


        :return: The op of this V1Schemas.  # noqa: E501
        :rtype: V1Op
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this V1Schemas.


        :param op: The op of this V1Schemas.  # noqa: E501
        :type: V1Op
        """

        self._op = op

    @property
    def run(self):
        """Gets the run of this V1Schemas.  # noqa: E501


        :return: The run of this V1Schemas.  # noqa: E501
        :rtype: V1RunSchema
        """
        return self._run

    @run.setter
    def run(self, run):
        """Sets the run of this V1Schemas.


        :param run: The run of this V1Schemas.  # noqa: E501
        :type: V1RunSchema
        """

        self._run = run

    @property
    def schedule(self):
        """Gets the schedule of this V1Schemas.  # noqa: E501


        :return: The schedule of this V1Schemas.  # noqa: E501
        :rtype: V1Schedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this V1Schemas.


        :param schedule: The schedule of this V1Schemas.  # noqa: E501
        :type: V1Schedule
        """

        self._schedule = schedule

    @property
    def artifact_format(self):
        """Gets the artifact_format of this V1Schemas.  # noqa: E501


        :return: The artifact_format of this V1Schemas.  # noqa: E501
        :rtype: V1ArtifactFormat
        """
        return self._artifact_format

    @artifact_format.setter
    def artifact_format(self, artifact_format):
        """Sets the artifact_format of this V1Schemas.


        :param artifact_format: The artifact_format of this V1Schemas.  # noqa: E501
        :type: V1ArtifactFormat
        """

        self._artifact_format = artifact_format

    @property
    def connection_schema(self):
        """Gets the connection_schema of this V1Schemas.  # noqa: E501


        :return: The connection_schema of this V1Schemas.  # noqa: E501
        :rtype: V1ConnectionScema
        """
        return self._connection_schema

    @connection_schema.setter
    def connection_schema(self, connection_schema):
        """Sets the connection_schema of this V1Schemas.


        :param connection_schema: The connection_schema of this V1Schemas.  # noqa: E501
        :type: V1ConnectionScema
        """

        self._connection_schema = connection_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1Schemas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Schemas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
