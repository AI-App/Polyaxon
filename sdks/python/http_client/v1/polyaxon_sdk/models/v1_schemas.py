#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Schemas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "early_stopping": "V1EarlyStoppingAllSchemas",
        "mount": "V1Mounts",
        "parallel": "V1ParallelAllSchemas",
        "schedule": "V1ScheduleAllSchemas",
        "termination": "V1Termination",
    }

    attribute_map = {
        "early_stopping": "early_stopping",
        "mount": "mount",
        "parallel": "parallel",
        "schedule": "schedule",
        "termination": "termination",
    }

    def __init__(
        self,
        early_stopping=None,
        mount=None,
        parallel=None,
        schedule=None,
        termination=None,
    ):  # noqa: E501
        """V1Schemas - a model defined in Swagger"""  # noqa: E501

        self._early_stopping = None
        self._mount = None
        self._parallel = None
        self._schedule = None
        self._termination = None
        self.discriminator = None

        if early_stopping is not None:
            self.early_stopping = early_stopping
        if mount is not None:
            self.mount = mount
        if parallel is not None:
            self.parallel = parallel
        if schedule is not None:
            self.schedule = schedule
        if termination is not None:
            self.termination = termination

    @property
    def early_stopping(self):
        """Gets the early_stopping of this V1Schemas.  # noqa: E501


        :return: The early_stopping of this V1Schemas.  # noqa: E501
        :rtype: V1EarlyStoppingAllSchemas
        """
        return self._early_stopping

    @early_stopping.setter
    def early_stopping(self, early_stopping):
        """Sets the early_stopping of this V1Schemas.


        :param early_stopping: The early_stopping of this V1Schemas.  # noqa: E501
        :type: V1EarlyStoppingAllSchemas
        """

        self._early_stopping = early_stopping

    @property
    def mount(self):
        """Gets the mount of this V1Schemas.  # noqa: E501


        :return: The mount of this V1Schemas.  # noqa: E501
        :rtype: V1Mounts
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this V1Schemas.


        :param mount: The mount of this V1Schemas.  # noqa: E501
        :type: V1Mounts
        """

        self._mount = mount

    @property
    def parallel(self):
        """Gets the parallel of this V1Schemas.  # noqa: E501


        :return: The parallel of this V1Schemas.  # noqa: E501
        :rtype: V1ParallelAllSchemas
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this V1Schemas.


        :param parallel: The parallel of this V1Schemas.  # noqa: E501
        :type: V1ParallelAllSchemas
        """

        self._parallel = parallel

    @property
    def schedule(self):
        """Gets the schedule of this V1Schemas.  # noqa: E501


        :return: The schedule of this V1Schemas.  # noqa: E501
        :rtype: V1ScheduleAllSchemas
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this V1Schemas.


        :param schedule: The schedule of this V1Schemas.  # noqa: E501
        :type: V1ScheduleAllSchemas
        """

        self._schedule = schedule

    @property
    def termination(self):
        """Gets the termination of this V1Schemas.  # noqa: E501


        :return: The termination of this V1Schemas.  # noqa: E501
        :rtype: V1Termination
        """
        return self._termination

    @termination.setter
    def termination(self, termination):
        """Sets the termination of this V1Schemas.


        :param termination: The termination of this V1Schemas.  # noqa: E501
        :type: V1Termination
        """

        self._termination = termination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1Schemas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Schemas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
