#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Environment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "resources": "V1ResourceRequirements",
        "labels": "dict(str, str)",
        "annotations": "dict(str, str)",
        "node_selector": "dict(str, str)",
        "affinity": "list[object]",
        "tolerations": "list[object]",
        "service_account": "str",
        "image_pull_secrets": "list[str]",
        "env_vars": "list[object]",
        "security_context": "object",
        "log_level": "str",
        "auth": "bool",
        "docker": "bool",
        "shm": "bool",
        "outputs": "bool",
        "logs": "bool",
        "registry": "str",
        "init_container": "V1ContainerEnv",
        "sidecar_container": "V1ContainerEnv",
    }

    attribute_map = {
        "resources": "resources",
        "labels": "labels",
        "annotations": "annotations",
        "node_selector": "node_selector",
        "affinity": "affinity",
        "tolerations": "tolerations",
        "service_account": "service_account",
        "image_pull_secrets": "image_pull_secrets",
        "env_vars": "env_vars",
        "security_context": "security_context",
        "log_level": "log_level",
        "auth": "auth",
        "docker": "docker",
        "shm": "shm",
        "outputs": "outputs",
        "logs": "logs",
        "registry": "registry",
        "init_container": "init_container",
        "sidecar_container": "sidecar_container",
    }

    def __init__(
        self,
        resources=None,
        labels=None,
        annotations=None,
        node_selector=None,
        affinity=None,
        tolerations=None,
        service_account=None,
        image_pull_secrets=None,
        env_vars=None,
        security_context=None,
        log_level=None,
        auth=None,
        docker=None,
        shm=None,
        outputs=None,
        logs=None,
        registry=None,
        init_container=None,
        sidecar_container=None,
    ):  # noqa: E501
        """V1Environment - a model defined in Swagger"""  # noqa: E501

        self._resources = None
        self._labels = None
        self._annotations = None
        self._node_selector = None
        self._affinity = None
        self._tolerations = None
        self._service_account = None
        self._image_pull_secrets = None
        self._env_vars = None
        self._security_context = None
        self._log_level = None
        self._auth = None
        self._docker = None
        self._shm = None
        self._outputs = None
        self._logs = None
        self._registry = None
        self._init_container = None
        self._sidecar_container = None
        self.discriminator = None

        if resources is not None:
            self.resources = resources
        if labels is not None:
            self.labels = labels
        if annotations is not None:
            self.annotations = annotations
        if node_selector is not None:
            self.node_selector = node_selector
        if affinity is not None:
            self.affinity = affinity
        if tolerations is not None:
            self.tolerations = tolerations
        if service_account is not None:
            self.service_account = service_account
        if image_pull_secrets is not None:
            self.image_pull_secrets = image_pull_secrets
        if env_vars is not None:
            self.env_vars = env_vars
        if security_context is not None:
            self.security_context = security_context
        if log_level is not None:
            self.log_level = log_level
        if auth is not None:
            self.auth = auth
        if docker is not None:
            self.docker = docker
        if shm is not None:
            self.shm = shm
        if outputs is not None:
            self.outputs = outputs
        if logs is not None:
            self.logs = logs
        if registry is not None:
            self.registry = registry
        if init_container is not None:
            self.init_container = init_container
        if sidecar_container is not None:
            self.sidecar_container = sidecar_container

    @property
    def resources(self):
        """Gets the resources of this V1Environment.  # noqa: E501


        :return: The resources of this V1Environment.  # noqa: E501
        :rtype: V1ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this V1Environment.


        :param resources: The resources of this V1Environment.  # noqa: E501
        :type: V1ResourceRequirements
        """

        self._resources = resources

    @property
    def labels(self):
        """Gets the labels of this V1Environment.  # noqa: E501


        :return: The labels of this V1Environment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V1Environment.


        :param labels: The labels of this V1Environment.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def annotations(self):
        """Gets the annotations of this V1Environment.  # noqa: E501


        :return: The annotations of this V1Environment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this V1Environment.


        :param annotations: The annotations of this V1Environment.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def node_selector(self):
        """Gets the node_selector of this V1Environment.  # noqa: E501


        :return: The node_selector of this V1Environment.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this V1Environment.


        :param node_selector: The node_selector of this V1Environment.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def affinity(self):
        """Gets the affinity of this V1Environment.  # noqa: E501


        :return: The affinity of this V1Environment.  # noqa: E501
        :rtype: list[object]
        """
        return self._affinity

    @affinity.setter
    def affinity(self, affinity):
        """Sets the affinity of this V1Environment.


        :param affinity: The affinity of this V1Environment.  # noqa: E501
        :type: list[object]
        """

        self._affinity = affinity

    @property
    def tolerations(self):
        """Gets the tolerations of this V1Environment.  # noqa: E501


        :return: The tolerations of this V1Environment.  # noqa: E501
        :rtype: list[object]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this V1Environment.


        :param tolerations: The tolerations of this V1Environment.  # noqa: E501
        :type: list[object]
        """

        self._tolerations = tolerations

    @property
    def service_account(self):
        """Gets the service_account of this V1Environment.  # noqa: E501


        :return: The service_account of this V1Environment.  # noqa: E501
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this V1Environment.


        :param service_account: The service_account of this V1Environment.  # noqa: E501
        :type: str
        """

        self._service_account = service_account

    @property
    def image_pull_secrets(self):
        """Gets the image_pull_secrets of this V1Environment.  # noqa: E501


        :return: The image_pull_secrets of this V1Environment.  # noqa: E501
        :rtype: list[str]
        """
        return self._image_pull_secrets

    @image_pull_secrets.setter
    def image_pull_secrets(self, image_pull_secrets):
        """Sets the image_pull_secrets of this V1Environment.


        :param image_pull_secrets: The image_pull_secrets of this V1Environment.  # noqa: E501
        :type: list[str]
        """

        self._image_pull_secrets = image_pull_secrets

    @property
    def env_vars(self):
        """Gets the env_vars of this V1Environment.  # noqa: E501


        :return: The env_vars of this V1Environment.  # noqa: E501
        :rtype: list[object]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this V1Environment.


        :param env_vars: The env_vars of this V1Environment.  # noqa: E501
        :type: list[object]
        """

        self._env_vars = env_vars

    @property
    def security_context(self):
        """Gets the security_context of this V1Environment.  # noqa: E501


        :return: The security_context of this V1Environment.  # noqa: E501
        :rtype: object
        """
        return self._security_context

    @security_context.setter
    def security_context(self, security_context):
        """Sets the security_context of this V1Environment.


        :param security_context: The security_context of this V1Environment.  # noqa: E501
        :type: object
        """

        self._security_context = security_context

    @property
    def log_level(self):
        """Gets the log_level of this V1Environment.  # noqa: E501


        :return: The log_level of this V1Environment.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this V1Environment.


        :param log_level: The log_level of this V1Environment.  # noqa: E501
        :type: str
        """

        self._log_level = log_level

    @property
    def auth(self):
        """Gets the auth of this V1Environment.  # noqa: E501


        :return: The auth of this V1Environment.  # noqa: E501
        :rtype: bool
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this V1Environment.


        :param auth: The auth of this V1Environment.  # noqa: E501
        :type: bool
        """

        self._auth = auth

    @property
    def docker(self):
        """Gets the docker of this V1Environment.  # noqa: E501


        :return: The docker of this V1Environment.  # noqa: E501
        :rtype: bool
        """
        return self._docker

    @docker.setter
    def docker(self, docker):
        """Sets the docker of this V1Environment.


        :param docker: The docker of this V1Environment.  # noqa: E501
        :type: bool
        """

        self._docker = docker

    @property
    def shm(self):
        """Gets the shm of this V1Environment.  # noqa: E501


        :return: The shm of this V1Environment.  # noqa: E501
        :rtype: bool
        """
        return self._shm

    @shm.setter
    def shm(self, shm):
        """Sets the shm of this V1Environment.


        :param shm: The shm of this V1Environment.  # noqa: E501
        :type: bool
        """

        self._shm = shm

    @property
    def outputs(self):
        """Gets the outputs of this V1Environment.  # noqa: E501


        :return: The outputs of this V1Environment.  # noqa: E501
        :rtype: bool
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this V1Environment.


        :param outputs: The outputs of this V1Environment.  # noqa: E501
        :type: bool
        """

        self._outputs = outputs

    @property
    def logs(self):
        """Gets the logs of this V1Environment.  # noqa: E501


        :return: The logs of this V1Environment.  # noqa: E501
        :rtype: bool
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this V1Environment.


        :param logs: The logs of this V1Environment.  # noqa: E501
        :type: bool
        """

        self._logs = logs

    @property
    def registry(self):
        """Gets the registry of this V1Environment.  # noqa: E501


        :return: The registry of this V1Environment.  # noqa: E501
        :rtype: str
        """
        return self._registry

    @registry.setter
    def registry(self, registry):
        """Sets the registry of this V1Environment.


        :param registry: The registry of this V1Environment.  # noqa: E501
        :type: str
        """

        self._registry = registry

    @property
    def init_container(self):
        """Gets the init_container of this V1Environment.  # noqa: E501


        :return: The init_container of this V1Environment.  # noqa: E501
        :rtype: V1ContainerEnv
        """
        return self._init_container

    @init_container.setter
    def init_container(self, init_container):
        """Sets the init_container of this V1Environment.


        :param init_container: The init_container of this V1Environment.  # noqa: E501
        :type: V1ContainerEnv
        """

        self._init_container = init_container

    @property
    def sidecar_container(self):
        """Gets the sidecar_container of this V1Environment.  # noqa: E501


        :return: The sidecar_container of this V1Environment.  # noqa: E501
        :rtype: V1ContainerEnv
        """
        return self._sidecar_container

    @sidecar_container.setter
    def sidecar_container(self, sidecar_container):
        """Sets the sidecar_container of this V1Environment.


        :param sidecar_container: The sidecar_container of this V1Environment.  # noqa: E501
        :type: V1ContainerEnv
        """

        self._sidecar_container = sidecar_container

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1Environment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
