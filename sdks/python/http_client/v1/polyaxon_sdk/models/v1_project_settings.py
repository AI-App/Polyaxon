#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1ProjectSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "logs_store": "str",
        "outputs_store": "str",
        "connections": "list[str]",
        "git_accesses": "list[str]",
        "registry_accesses": "list[str]",
        "config_resouces": "list[str]",
        "run_profile": "str",
        "run_profiles": "list[str]",
    }

    attribute_map = {
        "logs_store": "logs_store",
        "outputs_store": "outputs_store",
        "connections": "connections",
        "git_accesses": "git_accesses",
        "registry_accesses": "registry_accesses",
        "config_resouces": "config_resouces",
        "run_profile": "run_profile",
        "run_profiles": "run_profiles",
    }

    def __init__(
        self,
        logs_store=None,
        outputs_store=None,
        connections=None,
        git_accesses=None,
        registry_accesses=None,
        config_resouces=None,
        run_profile=None,
        run_profiles=None,
    ):  # noqa: E501
        """V1ProjectSettings - a model defined in Swagger"""  # noqa: E501

        self._logs_store = None
        self._outputs_store = None
        self._connections = None
        self._git_accesses = None
        self._registry_accesses = None
        self._config_resouces = None
        self._run_profile = None
        self._run_profiles = None
        self.discriminator = None

        if logs_store is not None:
            self.logs_store = logs_store
        if outputs_store is not None:
            self.outputs_store = outputs_store
        if connections is not None:
            self.connections = connections
        if git_accesses is not None:
            self.git_accesses = git_accesses
        if registry_accesses is not None:
            self.registry_accesses = registry_accesses
        if config_resouces is not None:
            self.config_resouces = config_resouces
        if run_profile is not None:
            self.run_profile = run_profile
        if run_profiles is not None:
            self.run_profiles = run_profiles

    @property
    def logs_store(self):
        """Gets the logs_store of this V1ProjectSettings.  # noqa: E501


        :return: The logs_store of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._logs_store

    @logs_store.setter
    def logs_store(self, logs_store):
        """Sets the logs_store of this V1ProjectSettings.


        :param logs_store: The logs_store of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._logs_store = logs_store

    @property
    def outputs_store(self):
        """Gets the outputs_store of this V1ProjectSettings.  # noqa: E501


        :return: The outputs_store of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._outputs_store

    @outputs_store.setter
    def outputs_store(self, outputs_store):
        """Sets the outputs_store of this V1ProjectSettings.


        :param outputs_store: The outputs_store of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._outputs_store = outputs_store

    @property
    def connections(self):
        """Gets the connections of this V1ProjectSettings.  # noqa: E501


        :return: The connections of this V1ProjectSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this V1ProjectSettings.


        :param connections: The connections of this V1ProjectSettings.  # noqa: E501
        :type: list[str]
        """

        self._connections = connections

    @property
    def git_accesses(self):
        """Gets the git_accesses of this V1ProjectSettings.  # noqa: E501


        :return: The git_accesses of this V1ProjectSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._git_accesses

    @git_accesses.setter
    def git_accesses(self, git_accesses):
        """Sets the git_accesses of this V1ProjectSettings.


        :param git_accesses: The git_accesses of this V1ProjectSettings.  # noqa: E501
        :type: list[str]
        """

        self._git_accesses = git_accesses

    @property
    def registry_accesses(self):
        """Gets the registry_accesses of this V1ProjectSettings.  # noqa: E501


        :return: The registry_accesses of this V1ProjectSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._registry_accesses

    @registry_accesses.setter
    def registry_accesses(self, registry_accesses):
        """Sets the registry_accesses of this V1ProjectSettings.


        :param registry_accesses: The registry_accesses of this V1ProjectSettings.  # noqa: E501
        :type: list[str]
        """

        self._registry_accesses = registry_accesses

    @property
    def config_resouces(self):
        """Gets the config_resouces of this V1ProjectSettings.  # noqa: E501


        :return: The config_resouces of this V1ProjectSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._config_resouces

    @config_resouces.setter
    def config_resouces(self, config_resouces):
        """Sets the config_resouces of this V1ProjectSettings.


        :param config_resouces: The config_resouces of this V1ProjectSettings.  # noqa: E501
        :type: list[str]
        """

        self._config_resouces = config_resouces

    @property
    def run_profile(self):
        """Gets the run_profile of this V1ProjectSettings.  # noqa: E501


        :return: The run_profile of this V1ProjectSettings.  # noqa: E501
        :rtype: str
        """
        return self._run_profile

    @run_profile.setter
    def run_profile(self, run_profile):
        """Sets the run_profile of this V1ProjectSettings.


        :param run_profile: The run_profile of this V1ProjectSettings.  # noqa: E501
        :type: str
        """

        self._run_profile = run_profile

    @property
    def run_profiles(self):
        """Gets the run_profiles of this V1ProjectSettings.  # noqa: E501


        :return: The run_profiles of this V1ProjectSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._run_profiles

    @run_profiles.setter
    def run_profiles(self, run_profiles):
        """Sets the run_profiles of this V1ProjectSettings.


        :param run_profiles: The run_profiles of this V1ProjectSettings.  # noqa: E501
        :type: list[str]
        """

        self._run_profiles = run_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1ProjectSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ProjectSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
