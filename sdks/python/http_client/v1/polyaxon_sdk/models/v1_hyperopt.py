#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1Hyperopt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "kind": "str",
        "algorithm": "V1HyperoptAlgorithms",
        "matrix": "str",
        "n_runs": "str",
        "seed": "str",
        "concurrency": "str",
        "early_stopping": "list[object]",
    }

    attribute_map = {
        "kind": "kind",
        "algorithm": "algorithm",
        "matrix": "matrix",
        "n_runs": "n_runs",
        "seed": "seed",
        "concurrency": "concurrency",
        "early_stopping": "early_stopping",
    }

    def __init__(
        self,
        kind=None,
        algorithm=None,
        matrix=None,
        n_runs=None,
        seed=None,
        concurrency=None,
        early_stopping=None,
    ):  # noqa: E501
        """V1Hyperopt - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._algorithm = None
        self._matrix = None
        self._n_runs = None
        self._seed = None
        self._concurrency = None
        self._early_stopping = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if algorithm is not None:
            self.algorithm = algorithm
        if matrix is not None:
            self.matrix = matrix
        if n_runs is not None:
            self.n_runs = n_runs
        if seed is not None:
            self.seed = seed
        if concurrency is not None:
            self.concurrency = concurrency
        if early_stopping is not None:
            self.early_stopping = early_stopping

    @property
    def kind(self):
        """Gets the kind of this V1Hyperopt.  # noqa: E501


        :return: The kind of this V1Hyperopt.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1Hyperopt.


        :param kind: The kind of this V1Hyperopt.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def algorithm(self):
        """Gets the algorithm of this V1Hyperopt.  # noqa: E501


        :return: The algorithm of this V1Hyperopt.  # noqa: E501
        :rtype: V1HyperoptAlgorithms
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this V1Hyperopt.


        :param algorithm: The algorithm of this V1Hyperopt.  # noqa: E501
        :type: V1HyperoptAlgorithms
        """

        self._algorithm = algorithm

    @property
    def matrix(self):
        """Gets the matrix of this V1Hyperopt.  # noqa: E501


        :return: The matrix of this V1Hyperopt.  # noqa: E501
        :rtype: str
        """
        return self._matrix

    @matrix.setter
    def matrix(self, matrix):
        """Sets the matrix of this V1Hyperopt.


        :param matrix: The matrix of this V1Hyperopt.  # noqa: E501
        :type: str
        """

        self._matrix = matrix

    @property
    def n_runs(self):
        """Gets the n_runs of this V1Hyperopt.  # noqa: E501


        :return: The n_runs of this V1Hyperopt.  # noqa: E501
        :rtype: str
        """
        return self._n_runs

    @n_runs.setter
    def n_runs(self, n_runs):
        """Sets the n_runs of this V1Hyperopt.


        :param n_runs: The n_runs of this V1Hyperopt.  # noqa: E501
        :type: str
        """

        self._n_runs = n_runs

    @property
    def seed(self):
        """Gets the seed of this V1Hyperopt.  # noqa: E501


        :return: The seed of this V1Hyperopt.  # noqa: E501
        :rtype: str
        """
        return self._seed

    @seed.setter
    def seed(self, seed):
        """Sets the seed of this V1Hyperopt.


        :param seed: The seed of this V1Hyperopt.  # noqa: E501
        :type: str
        """

        self._seed = seed

    @property
    def concurrency(self):
        """Gets the concurrency of this V1Hyperopt.  # noqa: E501


        :return: The concurrency of this V1Hyperopt.  # noqa: E501
        :rtype: str
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this V1Hyperopt.


        :param concurrency: The concurrency of this V1Hyperopt.  # noqa: E501
        :type: str
        """

        self._concurrency = concurrency

    @property
    def early_stopping(self):
        """Gets the early_stopping of this V1Hyperopt.  # noqa: E501


        :return: The early_stopping of this V1Hyperopt.  # noqa: E501
        :rtype: list[object]
        """
        return self._early_stopping

    @early_stopping.setter
    def early_stopping(self, early_stopping):
        """Sets the early_stopping of this V1Hyperopt.


        :param early_stopping: The early_stopping of this V1Hyperopt.  # noqa: E501
        :type: list[object]
        """

        self._early_stopping = early_stopping

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1Hyperopt, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1Hyperopt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
