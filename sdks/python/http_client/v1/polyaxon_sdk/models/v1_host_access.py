#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1HostAccess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'description': 'str',
        'readme': 'str',
        'tags': 'list[str]',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'frozen': 'bool',
        'disabled': 'bool',
        'insecure': 'bool',
        'deleted': 'bool',
        'k8s_secret': 'str',
        'url': 'str'
    }

    attribute_map = {
        'uuid': 'uuid',
        'name': 'name',
        'description': 'description',
        'readme': 'readme',
        'tags': 'tags',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'frozen': 'frozen',
        'disabled': 'disabled',
        'insecure': 'insecure',
        'deleted': 'deleted',
        'k8s_secret': 'k8s_secret',
        'url': 'url'
    }

    def __init__(self, uuid=None, name=None, description=None, readme=None, tags=None, created_at=None, updated_at=None, frozen=None, disabled=None, insecure=None, deleted=None, k8s_secret=None, url=None):  # noqa: E501
        """V1HostAccess - a model defined in Swagger"""  # noqa: E501

        self._uuid = None
        self._name = None
        self._description = None
        self._readme = None
        self._tags = None
        self._created_at = None
        self._updated_at = None
        self._frozen = None
        self._disabled = None
        self._insecure = None
        self._deleted = None
        self._k8s_secret = None
        self._url = None
        self.discriminator = None

        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if readme is not None:
            self.readme = readme
        if tags is not None:
            self.tags = tags
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if frozen is not None:
            self.frozen = frozen
        if disabled is not None:
            self.disabled = disabled
        if insecure is not None:
            self.insecure = insecure
        if deleted is not None:
            self.deleted = deleted
        if k8s_secret is not None:
            self.k8s_secret = k8s_secret
        if url is not None:
            self.url = url

    @property
    def uuid(self):
        """Gets the uuid of this V1HostAccess.  # noqa: E501


        :return: The uuid of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this V1HostAccess.


        :param uuid: The uuid of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this V1HostAccess.  # noqa: E501


        :return: The name of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V1HostAccess.


        :param name: The name of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this V1HostAccess.  # noqa: E501


        :return: The description of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this V1HostAccess.


        :param description: The description of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def readme(self):
        """Gets the readme of this V1HostAccess.  # noqa: E501


        :return: The readme of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._readme

    @readme.setter
    def readme(self, readme):
        """Sets the readme of this V1HostAccess.


        :param readme: The readme of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._readme = readme

    @property
    def tags(self):
        """Gets the tags of this V1HostAccess.  # noqa: E501


        :return: The tags of this V1HostAccess.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this V1HostAccess.


        :param tags: The tags of this V1HostAccess.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def created_at(self):
        """Gets the created_at of this V1HostAccess.  # noqa: E501


        :return: The created_at of this V1HostAccess.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this V1HostAccess.


        :param created_at: The created_at of this V1HostAccess.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this V1HostAccess.  # noqa: E501


        :return: The updated_at of this V1HostAccess.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this V1HostAccess.


        :param updated_at: The updated_at of this V1HostAccess.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def frozen(self):
        """Gets the frozen of this V1HostAccess.  # noqa: E501


        :return: The frozen of this V1HostAccess.  # noqa: E501
        :rtype: bool
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this V1HostAccess.


        :param frozen: The frozen of this V1HostAccess.  # noqa: E501
        :type: bool
        """

        self._frozen = frozen

    @property
    def disabled(self):
        """Gets the disabled of this V1HostAccess.  # noqa: E501


        :return: The disabled of this V1HostAccess.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this V1HostAccess.


        :param disabled: The disabled of this V1HostAccess.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def insecure(self):
        """Gets the insecure of this V1HostAccess.  # noqa: E501


        :return: The insecure of this V1HostAccess.  # noqa: E501
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """Sets the insecure of this V1HostAccess.


        :param insecure: The insecure of this V1HostAccess.  # noqa: E501
        :type: bool
        """

        self._insecure = insecure

    @property
    def deleted(self):
        """Gets the deleted of this V1HostAccess.  # noqa: E501


        :return: The deleted of this V1HostAccess.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this V1HostAccess.


        :param deleted: The deleted of this V1HostAccess.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def k8s_secret(self):
        """Gets the k8s_secret of this V1HostAccess.  # noqa: E501


        :return: The k8s_secret of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._k8s_secret

    @k8s_secret.setter
    def k8s_secret(self, k8s_secret):
        """Sets the k8s_secret of this V1HostAccess.


        :param k8s_secret: The k8s_secret of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._k8s_secret = k8s_secret

    @property
    def url(self):
        """Gets the url of this V1HostAccess.  # noqa: E501


        :return: The url of this V1HostAccess.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this V1HostAccess.


        :param url: The url of this V1HostAccess.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1HostAccess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1HostAccess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
