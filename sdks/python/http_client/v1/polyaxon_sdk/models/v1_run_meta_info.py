#!/usr/bin/python
#
# Copyright 2019 Polyaxon, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Polyaxon SDKs and REST API specification.

    Polyaxon SDKs and REST API specification.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: contact@polyaxon.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class V1RunMetaInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "service": "bool",
        "concurrency": "int",
        "parallel_kind": "str",
        "run_kind": "str",
    }

    attribute_map = {
        "service": "service",
        "concurrency": "concurrency",
        "parallel_kind": "parallel_kind",
        "run_kind": "run_kind",
    }

    def __init__(
        self, service=None, concurrency=None, parallel_kind=None, run_kind=None
    ):  # noqa: E501
        """V1RunMetaInfo - a model defined in Swagger"""  # noqa: E501

        self._service = None
        self._concurrency = None
        self._parallel_kind = None
        self._run_kind = None
        self.discriminator = None

        if service is not None:
            self.service = service
        if concurrency is not None:
            self.concurrency = concurrency
        if parallel_kind is not None:
            self.parallel_kind = parallel_kind
        if run_kind is not None:
            self.run_kind = run_kind

    @property
    def service(self):
        """Gets the service of this V1RunMetaInfo.  # noqa: E501


        :return: The service of this V1RunMetaInfo.  # noqa: E501
        :rtype: bool
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this V1RunMetaInfo.


        :param service: The service of this V1RunMetaInfo.  # noqa: E501
        :type: bool
        """

        self._service = service

    @property
    def concurrency(self):
        """Gets the concurrency of this V1RunMetaInfo.  # noqa: E501


        :return: The concurrency of this V1RunMetaInfo.  # noqa: E501
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this V1RunMetaInfo.


        :param concurrency: The concurrency of this V1RunMetaInfo.  # noqa: E501
        :type: int
        """

        self._concurrency = concurrency

    @property
    def parallel_kind(self):
        """Gets the parallel_kind of this V1RunMetaInfo.  # noqa: E501


        :return: The parallel_kind of this V1RunMetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._parallel_kind

    @parallel_kind.setter
    def parallel_kind(self, parallel_kind):
        """Sets the parallel_kind of this V1RunMetaInfo.


        :param parallel_kind: The parallel_kind of this V1RunMetaInfo.  # noqa: E501
        :type: str
        """

        self._parallel_kind = parallel_kind

    @property
    def run_kind(self):
        """Gets the run_kind of this V1RunMetaInfo.  # noqa: E501


        :return: The run_kind of this V1RunMetaInfo.  # noqa: E501
        :rtype: str
        """
        return self._run_kind

    @run_kind.setter
    def run_kind(self, run_kind):
        """Sets the run_kind of this V1RunMetaInfo.


        :param run_kind: The run_kind of this V1RunMetaInfo.  # noqa: E501
        :type: str
        """

        self._run_kind = run_kind

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1RunMetaInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1RunMetaInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
