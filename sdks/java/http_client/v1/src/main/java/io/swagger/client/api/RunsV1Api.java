// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.72
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RuntimeError;
import io.swagger.client.model.V1ArtifactTree;
import io.swagger.client.model.V1Auth;
import io.swagger.client.model.V1EntityNotificationBody;
import io.swagger.client.model.V1EntityStatusBodyRequest;
import io.swagger.client.model.V1EventsResponse;
import io.swagger.client.model.V1ListRunArtifactsResponse;
import io.swagger.client.model.V1ListRunsResponse;
import io.swagger.client.model.V1Logs;
import io.swagger.client.model.V1OperationBody;
import io.swagger.client.model.V1ProjectEntityResourceRequest;
import io.swagger.client.model.V1Run;
import io.swagger.client.model.V1RunArtifact;
import io.swagger.client.model.V1RunArtifacts;
import io.swagger.client.model.V1RunSettings;
import io.swagger.client.model.V1Status;
import io.swagger.client.model.V1Uuids;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RunsV1Api {
    private ApiClient apiClient;

    public RunsV1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public RunsV1Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getRunArtifact
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param stream Whether to stream the file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunArtifactCall(String namespace, String owner, String project, String uuid, String path, Boolean stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (stream != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("stream", stream));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunArtifactValidateBeforeCall(String namespace, String owner, String project, String uuid, String path, Boolean stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getRunArtifact(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getRunArtifact(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getRunArtifact(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getRunArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = getRunArtifactCall(namespace, owner, project, uuid, path, stream, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifact
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param stream Whether to stream the file. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getRunArtifact(String namespace, String owner, String project, String uuid, String path, Boolean stream) throws ApiException {
        ApiResponse<String> resp = getRunArtifactWithHttpInfo(namespace, owner, project, uuid, path, stream);
        return resp.getData();
    }

    /**
     * Get run artifact
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param stream Whether to stream the file. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getRunArtifactWithHttpInfo(String namespace, String owner, String project, String uuid, String path, Boolean stream) throws ApiException {
        com.squareup.okhttp.Call call = getRunArtifactValidateBeforeCall(namespace, owner, project, uuid, path, stream, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifact (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param stream Whether to stream the file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRunArtifactAsync(String namespace, String owner, String project, String uuid, String path, Boolean stream, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunArtifactValidateBeforeCall(namespace, owner, project, uuid, path, stream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRunArtifacts
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRunArtifactsCall(String namespace, String owner, String project, String uuid, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRunArtifactsValidateBeforeCall(String namespace, String owner, String project, String uuid, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling getRunArtifacts(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling getRunArtifacts(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling getRunArtifacts(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getRunArtifacts(Async)");
        }
        

        com.squareup.okhttp.Call call = getRunArtifactsCall(namespace, owner, project, uuid, path, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifacts
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getRunArtifacts(String namespace, String owner, String project, String uuid, String path) throws ApiException {
        ApiResponse<String> resp = getRunArtifactsWithHttpInfo(namespace, owner, project, uuid, path);
        return resp.getData();
    }

    /**
     * Get run artifacts
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getRunArtifactsWithHttpInfo(String namespace, String owner, String project, String uuid, String path) throws ApiException {
        com.squareup.okhttp.Call call = getRunArtifactsValidateBeforeCall(namespace, owner, project, uuid, path, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifacts (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the experiement will be assigned (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param path Artifact filepath. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRunArtifactsAsync(String namespace, String owner, String project, String uuid, String path, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRunArtifactsValidateBeforeCall(namespace, owner, project, uuid, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1ArchiveRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ArchiveRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/archive"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ArchiveRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1ArchiveRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1ArchiveRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1ArchiveRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ArchiveRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1ArchiveRun(String owner, String project, String uuid) throws ApiException {
        runsV1ArchiveRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Archive run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1ArchiveRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ArchiveRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Archive run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ArchiveRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ArchiveRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1BookmarkRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1BookmarkRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/bookmark"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1BookmarkRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1BookmarkRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1BookmarkRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1BookmarkRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1BookmarkRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bookmark run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1BookmarkRun(String owner, String project, String uuid) throws ApiException {
        runsV1BookmarkRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Bookmark run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1BookmarkRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1BookmarkRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Bookmark run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1BookmarkRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1BookmarkRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1BookmarkRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1BookmarkRunsCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/bookmark"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1BookmarkRunsValidateBeforeCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1BookmarkRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1BookmarkRuns(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1BookmarkRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1BookmarkRunsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Bookmark runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1BookmarkRuns(String owner, String project, V1Uuids body) throws ApiException {
        runsV1BookmarkRunsWithHttpInfo(owner, project, body);
    }

    /**
     * Bookmark runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1BookmarkRunsWithHttpInfo(String owner, String project, V1Uuids body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1BookmarkRunsValidateBeforeCall(owner, project, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Bookmark runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1BookmarkRunsAsync(String owner, String project, V1Uuids body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1BookmarkRunsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1CollectRunLogs
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1CollectRunLogsCall(String namespace, String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/_internal/{owner}/{project}/runs/{uuid}/logs"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1CollectRunLogsValidateBeforeCall(String namespace, String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1CollectRunLogs(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1CollectRunLogs(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1CollectRunLogs(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1CollectRunLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1CollectRunLogsCall(namespace, owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Collect run logs
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1CollectRunLogs(String namespace, String owner, String project, String uuid) throws ApiException {
        runsV1CollectRunLogsWithHttpInfo(namespace, owner, project, uuid);
    }

    /**
     * Collect run logs
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1CollectRunLogsWithHttpInfo(String namespace, String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1CollectRunLogsValidateBeforeCall(namespace, owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Collect run logs (asynchronously)
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1CollectRunLogsAsync(String namespace, String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1CollectRunLogsValidateBeforeCall(namespace, owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1CopyRun
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1CopyRunCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/copy"
            .replaceAll("\\{" + "entity.owner" + "\\}", apiClient.escapeString(entityOwner.toString()))
            .replaceAll("\\{" + "entity.project" + "\\}", apiClient.escapeString(entityProject.toString()))
            .replaceAll("\\{" + "entity.uuid" + "\\}", apiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1CopyRunValidateBeforeCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityOwner' is set
        if (entityOwner == null) {
            throw new ApiException("Missing the required parameter 'entityOwner' when calling runsV1CopyRun(Async)");
        }
        
        // verify the required parameter 'entityProject' is set
        if (entityProject == null) {
            throw new ApiException("Missing the required parameter 'entityProject' when calling runsV1CopyRun(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling runsV1CopyRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1CopyRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1CopyRunCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restart run with copy
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1CopyRun(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1CopyRunWithHttpInfo(entityOwner, entityProject, entityUuid, body);
        return resp.getData();
    }

    /**
     * Restart run with copy
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1CopyRunWithHttpInfo(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1CopyRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart run with copy (asynchronously)
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1CopyRunAsync(String entityOwner, String entityProject, String entityUuid, V1Run body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1CopyRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1CreateRun
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param body operation object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunCall(String owner, String project, V1OperationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1CreateRunValidateBeforeCall(String owner, String project, V1OperationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1CreateRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1CreateRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1CreateRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1CreateRunCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param body operation object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1CreateRun(String owner, String project, V1OperationBody body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1CreateRunWithHttpInfo(owner, project, body);
        return resp.getData();
    }

    /**
     * Create new run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param body operation object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1CreateRunWithHttpInfo(String owner, String project, V1OperationBody body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1CreateRunValidateBeforeCall(owner, project, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param body operation object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunAsync(String owner, String project, V1OperationBody body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1CreateRunValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1CreateRunArtifactsLineage
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body Run Artifacts (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunArtifactsLineageCall(String owner, String project, String uuid, V1RunArtifacts body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1CreateRunArtifactsLineageValidateBeforeCall(String owner, String project, String uuid, V1RunArtifacts body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1CreateRunArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1CreateRunArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1CreateRunArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1CreateRunArtifactsLineage(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1CreateRunArtifactsLineageCall(owner, project, uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create bulk run run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body Run Artifacts (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1CreateRunArtifactsLineage(String owner, String project, String uuid, V1RunArtifacts body) throws ApiException {
        runsV1CreateRunArtifactsLineageWithHttpInfo(owner, project, uuid, body);
    }

    /**
     * Create bulk run run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body Run Artifacts (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1CreateRunArtifactsLineageWithHttpInfo(String owner, String project, String uuid, V1RunArtifacts body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1CreateRunArtifactsLineageValidateBeforeCall(owner, project, uuid, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create bulk run run artifacts lineage (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body Run Artifacts (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunArtifactsLineageAsync(String owner, String project, String uuid, V1RunArtifacts body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1CreateRunArtifactsLineageValidateBeforeCall(owner, project, uuid, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1CreateRunStatus
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunStatusCall(String owner, String project, String uuid, V1EntityStatusBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/statuses"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1CreateRunStatusValidateBeforeCall(String owner, String project, String uuid, V1EntityStatusBodyRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1CreateRunStatus(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1CreateRunStatus(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1CreateRunStatus(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1CreateRunStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1CreateRunStatusCall(owner, project, uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new run status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @return V1Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Status runsV1CreateRunStatus(String owner, String project, String uuid, V1EntityStatusBodyRequest body) throws ApiException {
        ApiResponse<V1Status> resp = runsV1CreateRunStatusWithHttpInfo(owner, project, uuid, body);
        return resp.getData();
    }

    /**
     * Create new run status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;V1Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Status> runsV1CreateRunStatusWithHttpInfo(String owner, String project, String uuid, V1EntityStatusBodyRequest body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1CreateRunStatusValidateBeforeCall(owner, project, uuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Status>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new run status (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1CreateRunStatusAsync(String owner, String project, String uuid, V1EntityStatusBodyRequest body, final ApiCallback<V1Status> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1CreateRunStatusValidateBeforeCall(owner, project, uuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Status>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1DeleteRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1DeleteRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1DeleteRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1DeleteRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1DeleteRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1DeleteRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1DeleteRun(String owner, String project, String uuid) throws ApiException {
        runsV1DeleteRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Delete run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1DeleteRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1DeleteRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1DeleteRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1DeleteRunArtifactLineage
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunArtifactLineageCall(String owner, String project, String uuid, String name, String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (namespace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1DeleteRunArtifactLineageValidateBeforeCall(String owner, String project, String uuid, String name, String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1DeleteRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1DeleteRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1DeleteRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling runsV1DeleteRunArtifactLineage(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1DeleteRunArtifactLineageCall(owner, project, uuid, name, namespace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete run artifact lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1DeleteRunArtifactLineage(String owner, String project, String uuid, String name, String namespace) throws ApiException {
        runsV1DeleteRunArtifactLineageWithHttpInfo(owner, project, uuid, name, namespace);
    }

    /**
     * Delete run artifact lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1DeleteRunArtifactLineageWithHttpInfo(String owner, String project, String uuid, String name, String namespace) throws ApiException {
        com.squareup.okhttp.Call call = runsV1DeleteRunArtifactLineageValidateBeforeCall(owner, project, uuid, name, namespace, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete run artifact lineage (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunArtifactLineageAsync(String owner, String project, String uuid, String name, String namespace, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1DeleteRunArtifactLineageValidateBeforeCall(owner, project, uuid, name, namespace, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1DeleteRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunsCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/delete"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1DeleteRunsValidateBeforeCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1DeleteRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1DeleteRuns(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1DeleteRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1DeleteRunsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1DeleteRuns(String owner, String project, V1Uuids body) throws ApiException {
        runsV1DeleteRunsWithHttpInfo(owner, project, body);
    }

    /**
     * Delete runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1DeleteRunsWithHttpInfo(String owner, String project, V1Uuids body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1DeleteRunsValidateBeforeCall(owner, project, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1DeleteRunsAsync(String owner, String project, V1Uuids body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1DeleteRunsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1GetMultiRunEvents
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param runs Runs query param. (optional)
     * @param orient Orient query param. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetMultiRunEventsCall(String namespace, String owner, String project, String kind, String names, String runs, String orient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "kind" + "\\}", apiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (names != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("names", names));
        if (runs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("runs", runs));
        if (orient != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orient", orient));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetMultiRunEventsValidateBeforeCall(String namespace, String owner, String project, String kind, String names, String runs, String orient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1GetMultiRunEvents(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetMultiRunEvents(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetMultiRunEvents(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling runsV1GetMultiRunEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetMultiRunEventsCall(namespace, owner, project, kind, names, runs, orient, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get multi runs events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param runs Runs query param. (optional)
     * @param orient Orient query param. (optional)
     * @return V1EventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1EventsResponse runsV1GetMultiRunEvents(String namespace, String owner, String project, String kind, String names, String runs, String orient) throws ApiException {
        ApiResponse<V1EventsResponse> resp = runsV1GetMultiRunEventsWithHttpInfo(namespace, owner, project, kind, names, runs, orient);
        return resp.getData();
    }

    /**
     * Get multi runs events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param runs Runs query param. (optional)
     * @param orient Orient query param. (optional)
     * @return ApiResponse&lt;V1EventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1EventsResponse> runsV1GetMultiRunEventsWithHttpInfo(String namespace, String owner, String project, String kind, String names, String runs, String orient) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetMultiRunEventsValidateBeforeCall(namespace, owner, project, kind, names, runs, orient, null, null);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get multi runs events (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param runs Runs query param. (optional)
     * @param orient Orient query param. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetMultiRunEventsAsync(String namespace, String owner, String project, String kind, String names, String runs, String orient, final ApiCallback<V1EventsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetMultiRunEventsValidateBeforeCall(namespace, owner, project, kind, names, runs, orient, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1GetRun(String owner, String project, String uuid) throws ApiException {
        ApiResponse<V1Run> resp = runsV1GetRunWithHttpInfo(owner, project, uuid);
        return resp.getData();
    }

    /**
     * Get run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1GetRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunValidateBeforeCall(owner, project, uuid, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunAsync(String owner, String project, String uuid, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunArtifactLineage
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactLineageCall(String owner, String project, String uuid, String name, String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (namespace != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("namespace", namespace));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunArtifactLineageValidateBeforeCall(String owner, String project, String uuid, String name, String namespace, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactLineage(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling runsV1GetRunArtifactLineage(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunArtifactLineageCall(owner, project, uuid, name, namespace, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @return V1RunArtifact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1RunArtifact runsV1GetRunArtifactLineage(String owner, String project, String uuid, String name, String namespace) throws ApiException {
        ApiResponse<V1RunArtifact> resp = runsV1GetRunArtifactLineageWithHttpInfo(owner, project, uuid, name, namespace);
        return resp.getData();
    }

    /**
     * Get run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @return ApiResponse&lt;V1RunArtifact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1RunArtifact> runsV1GetRunArtifactLineageWithHttpInfo(String owner, String project, String uuid, String name, String namespace) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunArtifactLineageValidateBeforeCall(owner, project, uuid, name, namespace, null, null);
        Type localVarReturnType = new TypeToken<V1RunArtifact>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifacts lineage (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param name Artifact name (required)
     * @param namespace namespace. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactLineageAsync(String owner, String project, String uuid, String name, String namespace, final ApiCallback<V1RunArtifact> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunArtifactLineageValidateBeforeCall(owner, project, uuid, name, namespace, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1RunArtifact>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunArtifactsLineage
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsLineageCall(String owner, String project, String uuid, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunArtifactsLineageValidateBeforeCall(String owner, String project, String uuid, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsLineage(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageCall(owner, project, uuid, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunArtifactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunArtifactsResponse runsV1GetRunArtifactsLineage(String owner, String project, String uuid, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunArtifactsResponse> resp = runsV1GetRunArtifactsLineageWithHttpInfo(owner, project, uuid, limit, sort, query);
        return resp.getData();
    }

    /**
     * Get run artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunArtifactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunArtifactsResponse> runsV1GetRunArtifactsLineageWithHttpInfo(String owner, String project, String uuid, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageValidateBeforeCall(owner, project, uuid, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunArtifactsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifacts lineage (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsLineageAsync(String owner, String project, String uuid, Integer limit, String sort, String query, final ApiCallback<V1ListRunArtifactsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageValidateBeforeCall(owner, project, uuid, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunArtifactsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunArtifactsLineageNames
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsLineageNamesCall(String owner, String project, String uuid, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/names"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunArtifactsLineageNamesValidateBeforeCall(String owner, String project, String uuid, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsLineageNames(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunArtifactsLineageNames(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsLineageNames(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageNamesCall(owner, project, uuid, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifacts lineage names
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunArtifactsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunArtifactsResponse runsV1GetRunArtifactsLineageNames(String owner, String project, String uuid, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunArtifactsResponse> resp = runsV1GetRunArtifactsLineageNamesWithHttpInfo(owner, project, uuid, limit, sort, query);
        return resp.getData();
    }

    /**
     * Get run artifacts lineage names
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunArtifactsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunArtifactsResponse> runsV1GetRunArtifactsLineageNamesWithHttpInfo(String owner, String project, String uuid, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageNamesValidateBeforeCall(owner, project, uuid, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunArtifactsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifacts lineage names (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsLineageNamesAsync(String owner, String project, String uuid, Integer limit, String sort, String query, final ApiCallback<V1ListRunArtifactsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsLineageNamesValidateBeforeCall(owner, project, uuid, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunArtifactsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunArtifactsTree
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param path Path query param. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsTreeCall(String namespace, String owner, String project, String uuid, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunArtifactsTreeValidateBeforeCall(String namespace, String owner, String project, String uuid, String path, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1GetRunArtifactsTree(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunArtifactsTree(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunArtifactsTree(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunArtifactsTree(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsTreeCall(namespace, owner, project, uuid, path, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run artifacts tree
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param path Path query param. (optional)
     * @return V1ArtifactTree
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ArtifactTree runsV1GetRunArtifactsTree(String namespace, String owner, String project, String uuid, String path) throws ApiException {
        ApiResponse<V1ArtifactTree> resp = runsV1GetRunArtifactsTreeWithHttpInfo(namespace, owner, project, uuid, path);
        return resp.getData();
    }

    /**
     * Get run artifacts tree
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param path Path query param. (optional)
     * @return ApiResponse&lt;V1ArtifactTree&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ArtifactTree> runsV1GetRunArtifactsTreeWithHttpInfo(String namespace, String owner, String project, String uuid, String path) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunArtifactsTreeValidateBeforeCall(namespace, owner, project, uuid, path, null, null);
        Type localVarReturnType = new TypeToken<V1ArtifactTree>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run artifacts tree (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param path Path query param. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunArtifactsTreeAsync(String namespace, String owner, String project, String uuid, String path, final ApiCallback<V1ArtifactTree> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunArtifactsTreeValidateBeforeCall(namespace, owner, project, uuid, path, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ArtifactTree>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunEvents
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param orient Orient query param. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunEventsCall(String namespace, String owner, String project, String uuid, String kind, String names, String orient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()))
            .replaceAll("\\{" + "kind" + "\\}", apiClient.escapeString(kind.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (names != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("names", names));
        if (orient != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orient", orient));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunEventsValidateBeforeCall(String namespace, String owner, String project, String uuid, String kind, String names, String orient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1GetRunEvents(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunEvents(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunEvents(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunEvents(Async)");
        }
        
        // verify the required parameter 'kind' is set
        if (kind == null) {
            throw new ApiException("Missing the required parameter 'kind' when calling runsV1GetRunEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunEventsCall(namespace, owner, project, uuid, kind, names, orient, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param orient Orient query param. (optional)
     * @return V1EventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1EventsResponse runsV1GetRunEvents(String namespace, String owner, String project, String uuid, String kind, String names, String orient) throws ApiException {
        ApiResponse<V1EventsResponse> resp = runsV1GetRunEventsWithHttpInfo(namespace, owner, project, uuid, kind, names, orient);
        return resp.getData();
    }

    /**
     * Get run events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param orient Orient query param. (optional)
     * @return ApiResponse&lt;V1EventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1EventsResponse> runsV1GetRunEventsWithHttpInfo(String namespace, String owner, String project, String uuid, String kind, String names, String orient) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunEventsValidateBeforeCall(namespace, owner, project, uuid, kind, names, orient, null, null);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run events (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param kind The artifact kind (required)
     * @param names Names query param. (optional)
     * @param orient Orient query param. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunEventsAsync(String namespace, String owner, String project, String uuid, String kind, String names, String orient, final ApiCallback<V1EventsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunEventsValidateBeforeCall(namespace, owner, project, uuid, kind, names, orient, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunLogs
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param lastTime last time. (optional)
     * @param lastFile last file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunLogsCall(String namespace, String owner, String project, String uuid, OffsetDateTime lastTime, String lastFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lastTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_time", lastTime));
        if (lastFile != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("last_file", lastFile));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunLogsValidateBeforeCall(String namespace, String owner, String project, String uuid, OffsetDateTime lastTime, String lastFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1GetRunLogs(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunLogs(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunLogs(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunLogsCall(namespace, owner, project, uuid, lastTime, lastFile, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run logs
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param lastTime last time. (optional)
     * @param lastFile last file. (optional)
     * @return V1Logs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Logs runsV1GetRunLogs(String namespace, String owner, String project, String uuid, OffsetDateTime lastTime, String lastFile) throws ApiException {
        ApiResponse<V1Logs> resp = runsV1GetRunLogsWithHttpInfo(namespace, owner, project, uuid, lastTime, lastFile);
        return resp.getData();
    }

    /**
     * Get run logs
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param lastTime last time. (optional)
     * @param lastFile last file. (optional)
     * @return ApiResponse&lt;V1Logs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Logs> runsV1GetRunLogsWithHttpInfo(String namespace, String owner, String project, String uuid, OffsetDateTime lastTime, String lastFile) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunLogsValidateBeforeCall(namespace, owner, project, uuid, lastTime, lastFile, null, null);
        Type localVarReturnType = new TypeToken<V1Logs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run logs (asynchronously)
     * 
     * @param namespace  (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param lastTime last time. (optional)
     * @param lastFile last file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunLogsAsync(String namespace, String owner, String project, String uuid, OffsetDateTime lastTime, String lastFile, final ApiCallback<V1Logs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunLogsValidateBeforeCall(namespace, owner, project, uuid, lastTime, lastFile, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Logs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunNamespace
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunNamespaceCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/namespace"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunNamespaceValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunNamespace(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunNamespace(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunNamespace(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunNamespaceCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Run namespace
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return V1RunSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1RunSettings runsV1GetRunNamespace(String owner, String project, String uuid) throws ApiException {
        ApiResponse<V1RunSettings> resp = runsV1GetRunNamespaceWithHttpInfo(owner, project, uuid);
        return resp.getData();
    }

    /**
     * Get Run namespace
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;V1RunSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1RunSettings> runsV1GetRunNamespaceWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunNamespaceValidateBeforeCall(owner, project, uuid, null, null);
        Type localVarReturnType = new TypeToken<V1RunSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Run namespace (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunNamespaceAsync(String owner, String project, String uuid, final ApiCallback<V1RunSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunNamespaceValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1RunSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunResources
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param names Names query param. (optional)
     * @param tail Query param flag to tail the values. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunResourcesCall(String namespace, String owner, String project, String uuid, String names, Boolean tail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/resources"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (names != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("names", names));
        if (tail != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tail", tail));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunResourcesValidateBeforeCall(String namespace, String owner, String project, String uuid, String names, Boolean tail, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1GetRunResources(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunResources(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunResources(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunResources(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunResourcesCall(namespace, owner, project, uuid, names, tail, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run resources events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param names Names query param. (optional)
     * @param tail Query param flag to tail the values. (optional)
     * @return V1EventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1EventsResponse runsV1GetRunResources(String namespace, String owner, String project, String uuid, String names, Boolean tail) throws ApiException {
        ApiResponse<V1EventsResponse> resp = runsV1GetRunResourcesWithHttpInfo(namespace, owner, project, uuid, names, tail);
        return resp.getData();
    }

    /**
     * Get run resources events
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param names Names query param. (optional)
     * @param tail Query param flag to tail the values. (optional)
     * @return ApiResponse&lt;V1EventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1EventsResponse> runsV1GetRunResourcesWithHttpInfo(String namespace, String owner, String project, String uuid, String names, Boolean tail) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunResourcesValidateBeforeCall(namespace, owner, project, uuid, names, tail, null, null);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run resources events (asynchronously)
     * 
     * @param namespace namespace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param names Names query param. (optional)
     * @param tail Query param flag to tail the values. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunResourcesAsync(String namespace, String owner, String project, String uuid, String names, Boolean tail, final ApiCallback<V1EventsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunResourcesValidateBeforeCall(namespace, owner, project, uuid, names, tail, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1EventsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunSettings
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunSettingsCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/settings"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunSettingsValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunSettings(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunSettings(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunSettings(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunSettingsCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Run settings
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return V1RunSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1RunSettings runsV1GetRunSettings(String owner, String project, String uuid) throws ApiException {
        ApiResponse<V1RunSettings> resp = runsV1GetRunSettingsWithHttpInfo(owner, project, uuid);
        return resp.getData();
    }

    /**
     * Get Run settings
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;V1RunSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1RunSettings> runsV1GetRunSettingsWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunSettingsValidateBeforeCall(owner, project, uuid, null, null);
        Type localVarReturnType = new TypeToken<V1RunSettings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Run settings (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunSettingsAsync(String owner, String project, String uuid, final ApiCallback<V1RunSettings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunSettingsValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1RunSettings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunStatuses
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunStatusesCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/statuses"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunStatusesValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunStatuses(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunStatuses(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1GetRunStatuses(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunStatusesCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get run status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return V1Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Status runsV1GetRunStatuses(String owner, String project, String uuid) throws ApiException {
        ApiResponse<V1Status> resp = runsV1GetRunStatusesWithHttpInfo(owner, project, uuid);
        return resp.getData();
    }

    /**
     * Get run status
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;V1Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Status> runsV1GetRunStatusesWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunStatusesValidateBeforeCall(owner, project, uuid, null, null);
        Type localVarReturnType = new TypeToken<V1Status>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get run status (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunStatusesAsync(String owner, String project, String uuid, final ApiCallback<V1Status> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunStatusesValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Status>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1GetRunsArtifactsLineage
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunsArtifactsLineageCall(String owner, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/artifacts_lineage"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1GetRunsArtifactsLineageValidateBeforeCall(String owner, String project, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1GetRunsArtifactsLineage(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1GetRunsArtifactsLineage(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1GetRunsArtifactsLineageCall(owner, project, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get runs artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1GetRunsArtifactsLineage(String owner, String project) throws ApiException {
        runsV1GetRunsArtifactsLineageWithHttpInfo(owner, project);
    }

    /**
     * Get runs artifacts lineage
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1GetRunsArtifactsLineageWithHttpInfo(String owner, String project) throws ApiException {
        com.squareup.okhttp.Call call = runsV1GetRunsArtifactsLineageValidateBeforeCall(owner, project, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get runs artifacts lineage (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1GetRunsArtifactsLineageAsync(String owner, String project, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1GetRunsArtifactsLineageValidateBeforeCall(owner, project, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1ImpersonateToken
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ImpersonateTokenCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/impersonate"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ImpersonateTokenValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1ImpersonateToken(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1ImpersonateToken(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1ImpersonateToken(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ImpersonateTokenCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Impersonate run token
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return V1Auth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Auth runsV1ImpersonateToken(String owner, String project, String uuid) throws ApiException {
        ApiResponse<V1Auth> resp = runsV1ImpersonateTokenWithHttpInfo(owner, project, uuid);
        return resp.getData();
    }

    /**
     * Impersonate run token
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;V1Auth&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Auth> runsV1ImpersonateTokenWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ImpersonateTokenValidateBeforeCall(owner, project, uuid, null, null);
        Type localVarReturnType = new TypeToken<V1Auth>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Impersonate run token (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ImpersonateTokenAsync(String owner, String project, String uuid, final ApiCallback<V1Auth> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ImpersonateTokenValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Auth>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1InvalidateRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1InvalidateRunCall(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/invalidate"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1InvalidateRunValidateBeforeCall(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1InvalidateRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1InvalidateRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1InvalidateRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1InvalidateRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1InvalidateRunCall(owner, project, uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Invalidate run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1InvalidateRun(String owner, String project, String uuid, V1ProjectEntityResourceRequest body) throws ApiException {
        runsV1InvalidateRunWithHttpInfo(owner, project, uuid, body);
    }

    /**
     * Invalidate run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1InvalidateRunWithHttpInfo(String owner, String project, String uuid, V1ProjectEntityResourceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1InvalidateRunValidateBeforeCall(owner, project, uuid, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Invalidate run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1InvalidateRunAsync(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1InvalidateRunValidateBeforeCall(owner, project, uuid, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1InvalidateRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1InvalidateRunsCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/invalidate"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1InvalidateRunsValidateBeforeCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1InvalidateRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1InvalidateRuns(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1InvalidateRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1InvalidateRunsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Invalidate runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1InvalidateRuns(String owner, String project, V1Uuids body) throws ApiException {
        runsV1InvalidateRunsWithHttpInfo(owner, project, body);
    }

    /**
     * Invalidate runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1InvalidateRunsWithHttpInfo(String owner, String project, V1Uuids body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1InvalidateRunsValidateBeforeCall(owner, project, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Invalidate runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1InvalidateRunsAsync(String owner, String project, V1Uuids body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1InvalidateRunsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1ListArchivedRuns
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ListArchivedRunsCall(String user, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/archives/{user}/runs"
            .replaceAll("\\{" + "user" + "\\}", apiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ListArchivedRunsValidateBeforeCall(String user, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling runsV1ListArchivedRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ListArchivedRunsCall(user, offset, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List archived runs for user
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunsResponse runsV1ListArchivedRuns(String user, Integer offset, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunsResponse> resp = runsV1ListArchivedRunsWithHttpInfo(user, offset, limit, sort, query);
        return resp.getData();
    }

    /**
     * List archived runs for user
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunsResponse> runsV1ListArchivedRunsWithHttpInfo(String user, Integer offset, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ListArchivedRunsValidateBeforeCall(user, offset, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List archived runs for user (asynchronously)
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ListArchivedRunsAsync(String user, Integer offset, Integer limit, String sort, String query, final ApiCallback<V1ListRunsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ListArchivedRunsValidateBeforeCall(user, offset, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1ListBookmarkedRuns
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ListBookmarkedRunsCall(String user, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/bookmarks/{user}/runs"
            .replaceAll("\\{" + "user" + "\\}", apiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ListBookmarkedRunsValidateBeforeCall(String user, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling runsV1ListBookmarkedRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ListBookmarkedRunsCall(user, offset, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List bookmarked runs for user
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunsResponse runsV1ListBookmarkedRuns(String user, Integer offset, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunsResponse> resp = runsV1ListBookmarkedRunsWithHttpInfo(user, offset, limit, sort, query);
        return resp.getData();
    }

    /**
     * List bookmarked runs for user
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunsResponse> runsV1ListBookmarkedRunsWithHttpInfo(String user, Integer offset, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ListBookmarkedRunsValidateBeforeCall(user, offset, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List bookmarked runs for user (asynchronously)
     * 
     * @param user User (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ListBookmarkedRunsAsync(String user, Integer offset, Integer limit, String sort, String query, final ApiCallback<V1ListRunsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ListBookmarkedRunsValidateBeforeCall(user, offset, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1ListRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ListRunsCall(String owner, String project, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ListRunsValidateBeforeCall(String owner, String project, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1ListRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1ListRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ListRunsCall(owner, project, offset, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunsResponse runsV1ListRuns(String owner, String project, Integer offset, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunsResponse> resp = runsV1ListRunsWithHttpInfo(owner, project, offset, limit, sort, query);
        return resp.getData();
    }

    /**
     * List runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunsResponse> runsV1ListRunsWithHttpInfo(String owner, String project, Integer offset, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ListRunsValidateBeforeCall(owner, project, offset, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ListRunsAsync(String owner, String project, Integer offset, Integer limit, String sort, String query, final ApiCallback<V1ListRunsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ListRunsValidateBeforeCall(owner, project, offset, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1ListRunsIo
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ListRunsIoCall(String owner, String project, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/io"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ListRunsIoValidateBeforeCall(String owner, String project, Integer offset, Integer limit, String sort, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1ListRunsIo(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1ListRunsIo(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ListRunsIoCall(owner, project, offset, limit, sort, query, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List runs io
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return V1ListRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1ListRunsResponse runsV1ListRunsIo(String owner, String project, Integer offset, Integer limit, String sort, String query) throws ApiException {
        ApiResponse<V1ListRunsResponse> resp = runsV1ListRunsIoWithHttpInfo(owner, project, offset, limit, sort, query);
        return resp.getData();
    }

    /**
     * List runs io
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @return ApiResponse&lt;V1ListRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1ListRunsResponse> runsV1ListRunsIoWithHttpInfo(String owner, String project, Integer offset, Integer limit, String sort, String query) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ListRunsIoValidateBeforeCall(owner, project, offset, limit, sort, query, null, null);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List runs io (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param offset Pagination offset. (optional)
     * @param limit Limit size. (optional)
     * @param sort Sort to order the search. (optional)
     * @param query Query filter the search search. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ListRunsIoAsync(String owner, String project, Integer offset, Integer limit, String sort, String query, final ApiCallback<V1ListRunsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ListRunsIoValidateBeforeCall(owner, project, offset, limit, sort, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1ListRunsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1NotifyRunStatus
     * @param namespace Na,espace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1NotifyRunStatusCall(String namespace, String owner, String project, String uuid, V1EntityNotificationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/notify"
            .replaceAll("\\{" + "namespace" + "\\}", apiClient.escapeString(namespace.toString()))
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1NotifyRunStatusValidateBeforeCall(String namespace, String owner, String project, String uuid, V1EntityNotificationBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespace' is set
        if (namespace == null) {
            throw new ApiException("Missing the required parameter 'namespace' when calling runsV1NotifyRunStatus(Async)");
        }
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1NotifyRunStatus(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1NotifyRunStatus(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1NotifyRunStatus(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1NotifyRunStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1NotifyRunStatusCall(namespace, owner, project, uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Notify run status
     * 
     * @param namespace Na,espace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1NotifyRunStatus(String namespace, String owner, String project, String uuid, V1EntityNotificationBody body) throws ApiException {
        runsV1NotifyRunStatusWithHttpInfo(namespace, owner, project, uuid, body);
    }

    /**
     * Notify run status
     * 
     * @param namespace Na,espace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1NotifyRunStatusWithHttpInfo(String namespace, String owner, String project, String uuid, V1EntityNotificationBody body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1NotifyRunStatusValidateBeforeCall(namespace, owner, project, uuid, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Notify run status (asynchronously)
     * 
     * @param namespace Na,espace (required)
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1NotifyRunStatusAsync(String namespace, String owner, String project, String uuid, V1EntityNotificationBody body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1NotifyRunStatusValidateBeforeCall(namespace, owner, project, uuid, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1PatchRun
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1PatchRunCall(String owner, String project, String runUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{run.uuid}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "run.uuid" + "\\}", apiClient.escapeString(runUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1PatchRunValidateBeforeCall(String owner, String project, String runUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1PatchRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1PatchRun(Async)");
        }
        
        // verify the required parameter 'runUuid' is set
        if (runUuid == null) {
            throw new ApiException("Missing the required parameter 'runUuid' when calling runsV1PatchRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1PatchRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1PatchRunCall(owner, project, runUuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Patch run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1PatchRun(String owner, String project, String runUuid, V1Run body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1PatchRunWithHttpInfo(owner, project, runUuid, body);
        return resp.getData();
    }

    /**
     * Patch run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1PatchRunWithHttpInfo(String owner, String project, String runUuid, V1Run body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1PatchRunValidateBeforeCall(owner, project, runUuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Patch run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1PatchRunAsync(String owner, String project, String runUuid, V1Run body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1PatchRunValidateBeforeCall(owner, project, runUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1RestartRun
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1RestartRunCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/restart"
            .replaceAll("\\{" + "entity.owner" + "\\}", apiClient.escapeString(entityOwner.toString()))
            .replaceAll("\\{" + "entity.project" + "\\}", apiClient.escapeString(entityProject.toString()))
            .replaceAll("\\{" + "entity.uuid" + "\\}", apiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1RestartRunValidateBeforeCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityOwner' is set
        if (entityOwner == null) {
            throw new ApiException("Missing the required parameter 'entityOwner' when calling runsV1RestartRun(Async)");
        }
        
        // verify the required parameter 'entityProject' is set
        if (entityProject == null) {
            throw new ApiException("Missing the required parameter 'entityProject' when calling runsV1RestartRun(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling runsV1RestartRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1RestartRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1RestartRunCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restart run
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1RestartRun(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1RestartRunWithHttpInfo(entityOwner, entityProject, entityUuid, body);
        return resp.getData();
    }

    /**
     * Restart run
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1RestartRunWithHttpInfo(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1RestartRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart run (asynchronously)
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1RestartRunAsync(String entityOwner, String entityProject, String entityUuid, V1Run body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1RestartRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1RestoreRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1RestoreRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/restore"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1RestoreRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1RestoreRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1RestoreRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1RestoreRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1RestoreRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restore run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1RestoreRun(String owner, String project, String uuid) throws ApiException {
        runsV1RestoreRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Restore run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1RestoreRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1RestoreRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Restore run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1RestoreRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1RestoreRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1ResumeRun
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1ResumeRunCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/resume"
            .replaceAll("\\{" + "entity.owner" + "\\}", apiClient.escapeString(entityOwner.toString()))
            .replaceAll("\\{" + "entity.project" + "\\}", apiClient.escapeString(entityProject.toString()))
            .replaceAll("\\{" + "entity.uuid" + "\\}", apiClient.escapeString(entityUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1ResumeRunValidateBeforeCall(String entityOwner, String entityProject, String entityUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'entityOwner' is set
        if (entityOwner == null) {
            throw new ApiException("Missing the required parameter 'entityOwner' when calling runsV1ResumeRun(Async)");
        }
        
        // verify the required parameter 'entityProject' is set
        if (entityProject == null) {
            throw new ApiException("Missing the required parameter 'entityProject' when calling runsV1ResumeRun(Async)");
        }
        
        // verify the required parameter 'entityUuid' is set
        if (entityUuid == null) {
            throw new ApiException("Missing the required parameter 'entityUuid' when calling runsV1ResumeRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1ResumeRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1ResumeRunCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Resume run
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1ResumeRun(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1ResumeRunWithHttpInfo(entityOwner, entityProject, entityUuid, body);
        return resp.getData();
    }

    /**
     * Resume run
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1ResumeRunWithHttpInfo(String entityOwner, String entityProject, String entityUuid, V1Run body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1ResumeRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resume run (asynchronously)
     * 
     * @param entityOwner Owner of the namespace (required)
     * @param entityProject Project (required)
     * @param entityUuid Uuid identifier of the entity (required)
     * @param body Run object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1ResumeRunAsync(String entityOwner, String entityProject, String entityUuid, V1Run body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1ResumeRunValidateBeforeCall(entityOwner, entityProject, entityUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for runsV1StartRunTensorboard
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1StartRunTensorboardCall(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/start"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1StartRunTensorboardValidateBeforeCall(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1StartRunTensorboard(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1StartRunTensorboard(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1StartRunTensorboard(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1StartRunTensorboard(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1StartRunTensorboardCall(owner, project, uuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start run tensorboard
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1StartRunTensorboard(String owner, String project, String uuid, V1ProjectEntityResourceRequest body) throws ApiException {
        runsV1StartRunTensorboardWithHttpInfo(owner, project, uuid, body);
    }

    /**
     * Start run tensorboard
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1StartRunTensorboardWithHttpInfo(String owner, String project, String uuid, V1ProjectEntityResourceRequest body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1StartRunTensorboardValidateBeforeCall(owner, project, uuid, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Start run tensorboard (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1StartRunTensorboardAsync(String owner, String project, String uuid, V1ProjectEntityResourceRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1StartRunTensorboardValidateBeforeCall(owner, project, uuid, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1StopRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1StopRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1StopRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1StopRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1StopRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1StopRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1StopRun(String owner, String project, String uuid) throws ApiException {
        runsV1StopRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Stop run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1StopRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1StopRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1StopRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1StopRunTensorboard
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunTensorboardCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1StopRunTensorboardValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1StopRunTensorboard(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1StopRunTensorboard(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1StopRunTensorboard(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1StopRunTensorboardCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop run tensorboard
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1StopRunTensorboard(String owner, String project, String uuid) throws ApiException {
        runsV1StopRunTensorboardWithHttpInfo(owner, project, uuid);
    }

    /**
     * Stop run tensorboard
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1StopRunTensorboardWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1StopRunTensorboardValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop run tensorboard (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunTensorboardAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1StopRunTensorboardValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1StopRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunsCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/stop"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1StopRunsValidateBeforeCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1StopRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1StopRuns(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1StopRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1StopRunsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1StopRuns(String owner, String project, V1Uuids body) throws ApiException {
        runsV1StopRunsWithHttpInfo(owner, project, body);
    }

    /**
     * Stop runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1StopRunsWithHttpInfo(String owner, String project, V1Uuids body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1StopRunsValidateBeforeCall(owner, project, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Stop runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1StopRunsAsync(String owner, String project, V1Uuids body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1StopRunsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1TagRuns
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1TagRunsCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/tag"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1TagRunsValidateBeforeCall(String owner, String project, V1Uuids body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1TagRuns(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1TagRuns(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1TagRuns(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1TagRunsCall(owner, project, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Tag runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1TagRuns(String owner, String project, V1Uuids body) throws ApiException {
        runsV1TagRunsWithHttpInfo(owner, project, body);
    }

    /**
     * Tag runs
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1TagRunsWithHttpInfo(String owner, String project, V1Uuids body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1TagRunsValidateBeforeCall(owner, project, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Tag runs (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project under namesapce (required)
     * @param body Uuids of the entities (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1TagRunsAsync(String owner, String project, V1Uuids body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1TagRunsValidateBeforeCall(owner, project, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1UnbookmarkRun
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1UnbookmarkRunCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/unbookmark"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1UnbookmarkRunValidateBeforeCall(String owner, String project, String uuid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1UnbookmarkRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1UnbookmarkRun(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling runsV1UnbookmarkRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1UnbookmarkRunCall(owner, project, uuid, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Unbookmark run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void runsV1UnbookmarkRun(String owner, String project, String uuid) throws ApiException {
        runsV1UnbookmarkRunWithHttpInfo(owner, project, uuid);
    }

    /**
     * Unbookmark run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> runsV1UnbookmarkRunWithHttpInfo(String owner, String project, String uuid) throws ApiException {
        com.squareup.okhttp.Call call = runsV1UnbookmarkRunValidateBeforeCall(owner, project, uuid, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unbookmark run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project (required)
     * @param uuid Uuid identifier of the entity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1UnbookmarkRunAsync(String owner, String project, String uuid, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1UnbookmarkRunValidateBeforeCall(owner, project, uuid, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for runsV1UpdateRun
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call runsV1UpdateRunCall(String owner, String project, String runUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{run.uuid}"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "run.uuid" + "\\}", apiClient.escapeString(runUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call runsV1UpdateRunValidateBeforeCall(String owner, String project, String runUuid, V1Run body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling runsV1UpdateRun(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling runsV1UpdateRun(Async)");
        }
        
        // verify the required parameter 'runUuid' is set
        if (runUuid == null) {
            throw new ApiException("Missing the required parameter 'runUuid' when calling runsV1UpdateRun(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling runsV1UpdateRun(Async)");
        }
        

        com.squareup.okhttp.Call call = runsV1UpdateRunCall(owner, project, runUuid, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @return V1Run
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public V1Run runsV1UpdateRun(String owner, String project, String runUuid, V1Run body) throws ApiException {
        ApiResponse<V1Run> resp = runsV1UpdateRunWithHttpInfo(owner, project, runUuid, body);
        return resp.getData();
    }

    /**
     * Update run
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @return ApiResponse&lt;V1Run&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<V1Run> runsV1UpdateRunWithHttpInfo(String owner, String project, String runUuid, V1Run body) throws ApiException {
        com.squareup.okhttp.Call call = runsV1UpdateRunValidateBeforeCall(owner, project, runUuid, body, null, null);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update run (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project where the run will be assigned (required)
     * @param runUuid UUID (required)
     * @param body Run object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call runsV1UpdateRunAsync(String owner, String project, String runUuid, V1Run body, final ApiCallback<V1Run> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = runsV1UpdateRunValidateBeforeCall(owner, project, runUuid, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<V1Run>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadRunArtifact
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadRunArtifactCall(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/artifacts/upload"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("overwrite", overwrite));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (uploadfile != null)
        localVarFormParams.put("uploadfile", uploadfile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadRunArtifactValidateBeforeCall(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling uploadRunArtifact(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling uploadRunArtifact(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling uploadRunArtifact(Async)");
        }
        
        // verify the required parameter 'uploadfile' is set
        if (uploadfile == null) {
            throw new ApiException("Missing the required parameter 'uploadfile' when calling uploadRunArtifact(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadRunArtifactCall(owner, project, uuid, uploadfile, path, overwrite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload an artifact file to a store via run access
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadRunArtifact(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite) throws ApiException {
        uploadRunArtifactWithHttpInfo(owner, project, uuid, uploadfile, path, overwrite);
    }

    /**
     * Upload an artifact file to a store via run access
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadRunArtifactWithHttpInfo(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite) throws ApiException {
        com.squareup.okhttp.Call call = uploadRunArtifactValidateBeforeCall(owner, project, uuid, uploadfile, path, overwrite, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload an artifact file to a store via run access (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadRunArtifactAsync(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadRunArtifactValidateBeforeCall(owner, project, uuid, uploadfile, path, overwrite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadRunLogs
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadRunLogsCall(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/{owner}/{project}/runs/{uuid}/logs/upload"
            .replaceAll("\\{" + "owner" + "\\}", apiClient.escapeString(owner.toString()))
            .replaceAll("\\{" + "project" + "\\}", apiClient.escapeString(project.toString()))
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (path != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("path", path));
        if (overwrite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("overwrite", overwrite));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (uploadfile != null)
        localVarFormParams.put("uploadfile", uploadfile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadRunLogsValidateBeforeCall(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'owner' is set
        if (owner == null) {
            throw new ApiException("Missing the required parameter 'owner' when calling uploadRunLogs(Async)");
        }
        
        // verify the required parameter 'project' is set
        if (project == null) {
            throw new ApiException("Missing the required parameter 'project' when calling uploadRunLogs(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling uploadRunLogs(Async)");
        }
        
        // verify the required parameter 'uploadfile' is set
        if (uploadfile == null) {
            throw new ApiException("Missing the required parameter 'uploadfile' when calling uploadRunLogs(Async)");
        }
        

        com.squareup.okhttp.Call call = uploadRunLogsCall(owner, project, uuid, uploadfile, path, overwrite, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Upload a logs file to a store via run access
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadRunLogs(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite) throws ApiException {
        uploadRunLogsWithHttpInfo(owner, project, uuid, uploadfile, path, overwrite);
    }

    /**
     * Upload a logs file to a store via run access
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadRunLogsWithHttpInfo(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite) throws ApiException {
        com.squareup.okhttp.Call call = uploadRunLogsValidateBeforeCall(owner, project, uuid, uploadfile, path, overwrite, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload a logs file to a store via run access (asynchronously)
     * 
     * @param owner Owner of the namespace (required)
     * @param project Project having access to the store (required)
     * @param uuid Unique integer identifier of the entity (required)
     * @param uploadfile The file to upload. (required)
     * @param path File path query params. (optional)
     * @param overwrite File path query params. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadRunLogsAsync(String owner, String project, String uuid, File uploadfile, String path, Boolean overwrite, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadRunLogsValidateBeforeCall(owner, project, uuid, uploadfile, path, overwrite, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
