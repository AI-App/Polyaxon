// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * V1BuildContext
 */

public class V1BuildContext {
  @SerializedName("image")
  private String image = null;

  @SerializedName("env")
  private List<Object> env = null;

  @SerializedName("path")
  private List<Object> path = null;

  @SerializedName("copy")
  private List<Object> copy = null;

  @SerializedName("run")
  private List<Object> run = null;

  @SerializedName("lang_env")
  private String langEnv = null;

  @SerializedName("uid")
  private Integer uid = null;

  @SerializedName("gid")
  private Integer gid = null;

  @SerializedName("filename")
  private String filename = null;

  @SerializedName("workdir")
  private String workdir = null;

  @SerializedName("workdir_path")
  private String workdirPath = null;

  @SerializedName("shell")
  private String shell = null;

  public V1BuildContext image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @ApiModelProperty(value = "")
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }

  public V1BuildContext env(List<Object> env) {
    this.env = env;
    return this;
  }

  public V1BuildContext addEnvItem(Object envItem) {
    if (this.env == null) {
      this.env = new ArrayList<Object>();
    }
    this.env.add(envItem);
    return this;
  }

   /**
   * Get env
   * @return env
  **/
  @ApiModelProperty(value = "")
  public List<Object> getEnv() {
    return env;
  }

  public void setEnv(List<Object> env) {
    this.env = env;
  }

  public V1BuildContext path(List<Object> path) {
    this.path = path;
    return this;
  }

  public V1BuildContext addPathItem(Object pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<Object>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @ApiModelProperty(value = "")
  public List<Object> getPath() {
    return path;
  }

  public void setPath(List<Object> path) {
    this.path = path;
  }

  public V1BuildContext copy(List<Object> copy) {
    this.copy = copy;
    return this;
  }

  public V1BuildContext addCopyItem(Object copyItem) {
    if (this.copy == null) {
      this.copy = new ArrayList<Object>();
    }
    this.copy.add(copyItem);
    return this;
  }

   /**
   * Get copy
   * @return copy
  **/
  @ApiModelProperty(value = "")
  public List<Object> getCopy() {
    return copy;
  }

  public void setCopy(List<Object> copy) {
    this.copy = copy;
  }

  public V1BuildContext run(List<Object> run) {
    this.run = run;
    return this;
  }

  public V1BuildContext addRunItem(Object runItem) {
    if (this.run == null) {
      this.run = new ArrayList<Object>();
    }
    this.run.add(runItem);
    return this;
  }

   /**
   * Get run
   * @return run
  **/
  @ApiModelProperty(value = "")
  public List<Object> getRun() {
    return run;
  }

  public void setRun(List<Object> run) {
    this.run = run;
  }

  public V1BuildContext langEnv(String langEnv) {
    this.langEnv = langEnv;
    return this;
  }

   /**
   * Get langEnv
   * @return langEnv
  **/
  @ApiModelProperty(value = "")
  public String getLangEnv() {
    return langEnv;
  }

  public void setLangEnv(String langEnv) {
    this.langEnv = langEnv;
  }

  public V1BuildContext uid(Integer uid) {
    this.uid = uid;
    return this;
  }

   /**
   * Get uid
   * @return uid
  **/
  @ApiModelProperty(value = "")
  public Integer getUid() {
    return uid;
  }

  public void setUid(Integer uid) {
    this.uid = uid;
  }

  public V1BuildContext gid(Integer gid) {
    this.gid = gid;
    return this;
  }

   /**
   * Get gid
   * @return gid
  **/
  @ApiModelProperty(value = "")
  public Integer getGid() {
    return gid;
  }

  public void setGid(Integer gid) {
    this.gid = gid;
  }

  public V1BuildContext filename(String filename) {
    this.filename = filename;
    return this;
  }

   /**
   * Get filename
   * @return filename
  **/
  @ApiModelProperty(value = "")
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public V1BuildContext workdir(String workdir) {
    this.workdir = workdir;
    return this;
  }

   /**
   * Get workdir
   * @return workdir
  **/
  @ApiModelProperty(value = "")
  public String getWorkdir() {
    return workdir;
  }

  public void setWorkdir(String workdir) {
    this.workdir = workdir;
  }

  public V1BuildContext workdirPath(String workdirPath) {
    this.workdirPath = workdirPath;
    return this;
  }

   /**
   * Get workdirPath
   * @return workdirPath
  **/
  @ApiModelProperty(value = "")
  public String getWorkdirPath() {
    return workdirPath;
  }

  public void setWorkdirPath(String workdirPath) {
    this.workdirPath = workdirPath;
  }

  public V1BuildContext shell(String shell) {
    this.shell = shell;
    return this;
  }

   /**
   * Get shell
   * @return shell
  **/
  @ApiModelProperty(value = "")
  public String getShell() {
    return shell;
  }

  public void setShell(String shell) {
    this.shell = shell;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1BuildContext v1BuildContext = (V1BuildContext) o;
    return Objects.equals(this.image, v1BuildContext.image) &&
        Objects.equals(this.env, v1BuildContext.env) &&
        Objects.equals(this.path, v1BuildContext.path) &&
        Objects.equals(this.copy, v1BuildContext.copy) &&
        Objects.equals(this.run, v1BuildContext.run) &&
        Objects.equals(this.langEnv, v1BuildContext.langEnv) &&
        Objects.equals(this.uid, v1BuildContext.uid) &&
        Objects.equals(this.gid, v1BuildContext.gid) &&
        Objects.equals(this.filename, v1BuildContext.filename) &&
        Objects.equals(this.workdir, v1BuildContext.workdir) &&
        Objects.equals(this.workdirPath, v1BuildContext.workdirPath) &&
        Objects.equals(this.shell, v1BuildContext.shell);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, env, path, copy, run, langEnv, uid, gid, filename, workdir, workdirPath, shell);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1BuildContext {\n");
    
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    copy: ").append(toIndentedString(copy)).append("\n");
    sb.append("    run: ").append(toIndentedString(run)).append("\n");
    sb.append("    langEnv: ").append(toIndentedString(langEnv)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    workdir: ").append(toIndentedString(workdir)).append("\n");
    sb.append("    workdirPath: ").append(toIndentedString(workdirPath)).append("\n");
    sb.append("    shell: ").append(toIndentedString(shell)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

