// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.V1Container;
import io.swagger.client.model.V1Dag;
import io.swagger.client.model.V1Dask;
import io.swagger.client.model.V1Flink;
import io.swagger.client.model.V1MpiJob;
import io.swagger.client.model.V1PytorchJob;
import io.swagger.client.model.V1Spark;
import io.swagger.client.model.V1TFJob;
import java.io.IOException;

/**
 * V1RunSchema
 */

public class V1RunSchema {
  @SerializedName("container")
  private V1Container container = null;

  @SerializedName("dag")
  private V1Dag dag = null;

  @SerializedName("tf_job")
  private V1TFJob tfJob = null;

  @SerializedName("pytorch_job")
  private V1PytorchJob pytorchJob = null;

  @SerializedName("mpi_job")
  private V1MpiJob mpiJob = null;

  @SerializedName("dask")
  private V1Dask dask = null;

  @SerializedName("spark")
  private V1Spark spark = null;

  @SerializedName("flink")
  private V1Flink flink = null;

  public V1RunSchema container(V1Container container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @ApiModelProperty(value = "")
  public V1Container getContainer() {
    return container;
  }

  public void setContainer(V1Container container) {
    this.container = container;
  }

  public V1RunSchema dag(V1Dag dag) {
    this.dag = dag;
    return this;
  }

   /**
   * Get dag
   * @return dag
  **/
  @ApiModelProperty(value = "")
  public V1Dag getDag() {
    return dag;
  }

  public void setDag(V1Dag dag) {
    this.dag = dag;
  }

  public V1RunSchema tfJob(V1TFJob tfJob) {
    this.tfJob = tfJob;
    return this;
  }

   /**
   * Get tfJob
   * @return tfJob
  **/
  @ApiModelProperty(value = "")
  public V1TFJob getTfJob() {
    return tfJob;
  }

  public void setTfJob(V1TFJob tfJob) {
    this.tfJob = tfJob;
  }

  public V1RunSchema pytorchJob(V1PytorchJob pytorchJob) {
    this.pytorchJob = pytorchJob;
    return this;
  }

   /**
   * Get pytorchJob
   * @return pytorchJob
  **/
  @ApiModelProperty(value = "")
  public V1PytorchJob getPytorchJob() {
    return pytorchJob;
  }

  public void setPytorchJob(V1PytorchJob pytorchJob) {
    this.pytorchJob = pytorchJob;
  }

  public V1RunSchema mpiJob(V1MpiJob mpiJob) {
    this.mpiJob = mpiJob;
    return this;
  }

   /**
   * Get mpiJob
   * @return mpiJob
  **/
  @ApiModelProperty(value = "")
  public V1MpiJob getMpiJob() {
    return mpiJob;
  }

  public void setMpiJob(V1MpiJob mpiJob) {
    this.mpiJob = mpiJob;
  }

  public V1RunSchema dask(V1Dask dask) {
    this.dask = dask;
    return this;
  }

   /**
   * Get dask
   * @return dask
  **/
  @ApiModelProperty(value = "")
  public V1Dask getDask() {
    return dask;
  }

  public void setDask(V1Dask dask) {
    this.dask = dask;
  }

  public V1RunSchema spark(V1Spark spark) {
    this.spark = spark;
    return this;
  }

   /**
   * Get spark
   * @return spark
  **/
  @ApiModelProperty(value = "")
  public V1Spark getSpark() {
    return spark;
  }

  public void setSpark(V1Spark spark) {
    this.spark = spark;
  }

  public V1RunSchema flink(V1Flink flink) {
    this.flink = flink;
    return this;
  }

   /**
   * Get flink
   * @return flink
  **/
  @ApiModelProperty(value = "")
  public V1Flink getFlink() {
    return flink;
  }

  public void setFlink(V1Flink flink) {
    this.flink = flink;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1RunSchema v1RunSchema = (V1RunSchema) o;
    return Objects.equals(this.container, v1RunSchema.container) &&
        Objects.equals(this.dag, v1RunSchema.dag) &&
        Objects.equals(this.tfJob, v1RunSchema.tfJob) &&
        Objects.equals(this.pytorchJob, v1RunSchema.pytorchJob) &&
        Objects.equals(this.mpiJob, v1RunSchema.mpiJob) &&
        Objects.equals(this.dask, v1RunSchema.dask) &&
        Objects.equals(this.spark, v1RunSchema.spark) &&
        Objects.equals(this.flink, v1RunSchema.flink);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, dag, tfJob, pytorchJob, mpiJob, dask, spark, flink);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1RunSchema {\n");
    
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    dag: ").append(toIndentedString(dag)).append("\n");
    sb.append("    tfJob: ").append(toIndentedString(tfJob)).append("\n");
    sb.append("    pytorchJob: ").append(toIndentedString(pytorchJob)).append("\n");
    sb.append("    mpiJob: ").append(toIndentedString(mpiJob)).append("\n");
    sb.append("    dask: ").append(toIndentedString(dask)).append("\n");
    sb.append("    spark: ").append(toIndentedString(spark)).append("\n");
    sb.append("    flink: ").append(toIndentedString(flink)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

