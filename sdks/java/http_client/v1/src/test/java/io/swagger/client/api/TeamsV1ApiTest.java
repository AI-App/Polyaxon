// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.72
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.RuntimeError;
import io.swagger.client.model.V1ListTeamMembersResponse;
import io.swagger.client.model.V1ListTeamsResponse;
import io.swagger.client.model.V1Team;
import io.swagger.client.model.V1TeamMember;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsV1Api
 */
@Ignore
public class TeamsV1ApiTest {

    private final TeamsV1Api api = new TeamsV1Api();

    
    /**
     * Create organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1CreateTeamTest() throws ApiException {
        String owner = null;
        V1Team body = null;
        V1Team response = api.teamsV1CreateTeam(owner, body);

        // TODO: test validations
    }
    
    /**
     * Create organization member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1CreateTeamMemberTest() throws ApiException {
        String owner = null;
        String team = null;
        V1TeamMember body = null;
        V1TeamMember response = api.teamsV1CreateTeamMember(owner, team, body);

        // TODO: test validations
    }
    
    /**
     * Delete organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1DeleteTeamTest() throws ApiException {
        String owner = null;
        String team = null;
        api.teamsV1DeleteTeam(owner, team);

        // TODO: test validations
    }
    
    /**
     * Delete organization member details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1DeleteTeamMemberTest() throws ApiException {
        String owner = null;
        String team = null;
        String user = null;
        api.teamsV1DeleteTeamMember(owner, team, user);

        // TODO: test validations
    }
    
    /**
     * Get organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1GetTeamTest() throws ApiException {
        String owner = null;
        String team = null;
        V1Team response = api.teamsV1GetTeam(owner, team);

        // TODO: test validations
    }
    
    /**
     * Get organization member details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1GetTeamMemberTest() throws ApiException {
        String owner = null;
        String team = null;
        String user = null;
        V1TeamMember response = api.teamsV1GetTeamMember(owner, team, user);

        // TODO: test validations
    }
    
    /**
     * Get organization members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1ListTeamMembersTest() throws ApiException {
        String owner = null;
        String team = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListTeamMembersResponse response = api.teamsV1ListTeamMembers(owner, team, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * List organizations names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1ListTeamNamesTest() throws ApiException {
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListTeamsResponse response = api.teamsV1ListTeamNames(owner, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * List organizations
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1ListTeamsTest() throws ApiException {
        String owner = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListTeamsResponse response = api.teamsV1ListTeams(owner, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * Patch organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1PatchTeamTest() throws ApiException {
        String owner = null;
        String teamName = null;
        V1Team body = null;
        V1Team response = api.teamsV1PatchTeam(owner, teamName, body);

        // TODO: test validations
    }
    
    /**
     * Patch organization member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1PatchTeamMemberTest() throws ApiException {
        String owner = null;
        String team = null;
        String memberUser = null;
        V1TeamMember body = null;
        V1TeamMember response = api.teamsV1PatchTeamMember(owner, team, memberUser, body);

        // TODO: test validations
    }
    
    /**
     * Update organization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1UpdateTeamTest() throws ApiException {
        String owner = null;
        String teamName = null;
        V1Team body = null;
        V1Team response = api.teamsV1UpdateTeam(owner, teamName, body);

        // TODO: test validations
    }
    
    /**
     * Update organization member
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void teamsV1UpdateTeamMemberTest() throws ApiException {
        String owner = null;
        String team = null;
        String memberUser = null;
        V1TeamMember body = null;
        V1TeamMember response = api.teamsV1UpdateTeamMember(owner, team, memberUser, body);

        // TODO: test validations
    }
    
}
