// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Polyaxon SDKs and REST API specification.
 * Polyaxon SDKs and REST API specification.
 *
 * OpenAPI spec version: 1.0.71
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import java.io.File;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.RuntimeError;
import io.swagger.client.model.V1ArtifactTree;
import io.swagger.client.model.V1Auth;
import io.swagger.client.model.V1EntityNotificationBody;
import io.swagger.client.model.V1EntityStatusBodyRequest;
import io.swagger.client.model.V1EventsResponse;
import io.swagger.client.model.V1ListRunArtifactsResponse;
import io.swagger.client.model.V1ListRunsResponse;
import io.swagger.client.model.V1Logs;
import io.swagger.client.model.V1OperationBody;
import io.swagger.client.model.V1ProjectEntityResourceRequest;
import io.swagger.client.model.V1Run;
import io.swagger.client.model.V1RunArtifact;
import io.swagger.client.model.V1RunArtifacts;
import io.swagger.client.model.V1RunSettings;
import io.swagger.client.model.V1Status;
import io.swagger.client.model.V1Uuids;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RunsV1Api
 */
@Ignore
public class RunsV1ApiTest {

    private final RunsV1Api api = new RunsV1Api();

    
    /**
     * Get run artifact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunArtifactTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        String path = null;
        Boolean stream = null;
        String response = api.getRunArtifact(namespace, owner, project, uuid, path, stream);

        // TODO: test validations
    }
    
    /**
     * Get run artifacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRunArtifactsTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        String path = null;
        String response = api.getRunArtifacts(namespace, owner, project, uuid, path);

        // TODO: test validations
    }
    
    /**
     * Archive run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ArchiveRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1ArchiveRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Bookmark run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1BookmarkRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1BookmarkRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Bookmark runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1BookmarkRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1Uuids body = null;
        api.runsV1BookmarkRuns(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Collect run logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1CollectRunLogsTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1CollectRunLogs(namespace, owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Restart run with copy
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1CopyRunTest() throws ApiException {
        String entityOwner = null;
        String entityProject = null;
        String entityUuid = null;
        V1Run body = null;
        V1Run response = api.runsV1CopyRun(entityOwner, entityProject, entityUuid, body);

        // TODO: test validations
    }
    
    /**
     * Create new run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1CreateRunTest() throws ApiException {
        String owner = null;
        String project = null;
        V1OperationBody body = null;
        V1Run response = api.runsV1CreateRun(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Create bulk run run artifacts lineage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1CreateRunArtifactsLineageTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1RunArtifacts body = null;
        api.runsV1CreateRunArtifactsLineage(owner, project, uuid, body);

        // TODO: test validations
    }
    
    /**
     * Create new run status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1CreateRunStatusTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1EntityStatusBodyRequest body = null;
        V1Status response = api.runsV1CreateRunStatus(owner, project, uuid, body);

        // TODO: test validations
    }
    
    /**
     * Delete run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1DeleteRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1DeleteRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Delete run artifact lineage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1DeleteRunArtifactLineageTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        String name = null;
        String namespace = null;
        api.runsV1DeleteRunArtifactLineage(owner, project, uuid, name, namespace);

        // TODO: test validations
    }
    
    /**
     * Delete runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1DeleteRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1Uuids body = null;
        api.runsV1DeleteRuns(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Get multi runs events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetMultiRunEventsTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String kind = null;
        String names = null;
        String runs = null;
        String orient = null;
        V1EventsResponse response = api.runsV1GetMultiRunEvents(namespace, owner, project, kind, names, runs, orient);

        // TODO: test validations
    }
    
    /**
     * Get run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1Run response = api.runsV1GetRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Get run artifacts lineage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunArtifactLineageTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        String name = null;
        String namespace = null;
        V1RunArtifact response = api.runsV1GetRunArtifactLineage(owner, project, uuid, name, namespace);

        // TODO: test validations
    }
    
    /**
     * Get run artifacts lineage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunArtifactsLineageTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunArtifactsResponse response = api.runsV1GetRunArtifactsLineage(owner, project, uuid, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * Get run artifacts lineage names
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunArtifactsLineageNamesTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunArtifactsResponse response = api.runsV1GetRunArtifactsLineageNames(owner, project, uuid, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * Get run artifacts tree
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunArtifactsTreeTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        String path = null;
        V1ArtifactTree response = api.runsV1GetRunArtifactsTree(namespace, owner, project, uuid, path);

        // TODO: test validations
    }
    
    /**
     * Get run events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunEventsTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        String kind = null;
        String names = null;
        String orient = null;
        V1EventsResponse response = api.runsV1GetRunEvents(namespace, owner, project, uuid, kind, names, orient);

        // TODO: test validations
    }
    
    /**
     * Get run logs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunLogsTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        OffsetDateTime lastTime = null;
        String lastFile = null;
        V1Logs response = api.runsV1GetRunLogs(namespace, owner, project, uuid, lastTime, lastFile);

        // TODO: test validations
    }
    
    /**
     * Get Run namespace
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunNamespaceTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1RunSettings response = api.runsV1GetRunNamespace(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Get run resources events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunResourcesTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        String names = null;
        Boolean tail = null;
        V1EventsResponse response = api.runsV1GetRunResources(namespace, owner, project, uuid, names, tail);

        // TODO: test validations
    }
    
    /**
     * Get Run settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunSettingsTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1RunSettings response = api.runsV1GetRunSettings(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Get run status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunStatusesTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1Status response = api.runsV1GetRunStatuses(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Get runs artifacts lineage
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1GetRunsArtifactsLineageTest() throws ApiException {
        String owner = null;
        String project = null;
        api.runsV1GetRunsArtifactsLineage(owner, project);

        // TODO: test validations
    }
    
    /**
     * Impersonate run token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ImpersonateTokenTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1Auth response = api.runsV1ImpersonateToken(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Invalidate run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1InvalidateRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1ProjectEntityResourceRequest body = null;
        api.runsV1InvalidateRun(owner, project, uuid, body);

        // TODO: test validations
    }
    
    /**
     * Invalidate runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1InvalidateRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1Uuids body = null;
        api.runsV1InvalidateRuns(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * List archived runs for user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ListArchivedRunsTest() throws ApiException {
        String user = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunsResponse response = api.runsV1ListArchivedRuns(user, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * List bookmarked runs for user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ListBookmarkedRunsTest() throws ApiException {
        String user = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunsResponse response = api.runsV1ListBookmarkedRuns(user, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * List runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ListRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunsResponse response = api.runsV1ListRuns(owner, project, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * List runs io
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ListRunsIoTest() throws ApiException {
        String owner = null;
        String project = null;
        Integer offset = null;
        Integer limit = null;
        String sort = null;
        String query = null;
        V1ListRunsResponse response = api.runsV1ListRunsIo(owner, project, offset, limit, sort, query);

        // TODO: test validations
    }
    
    /**
     * Notify run status
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1NotifyRunStatusTest() throws ApiException {
        String namespace = null;
        String owner = null;
        String project = null;
        String uuid = null;
        V1EntityNotificationBody body = null;
        api.runsV1NotifyRunStatus(namespace, owner, project, uuid, body);

        // TODO: test validations
    }
    
    /**
     * Patch run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1PatchRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String runUuid = null;
        V1Run body = null;
        V1Run response = api.runsV1PatchRun(owner, project, runUuid, body);

        // TODO: test validations
    }
    
    /**
     * Restart run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1RestartRunTest() throws ApiException {
        String entityOwner = null;
        String entityProject = null;
        String entityUuid = null;
        V1Run body = null;
        V1Run response = api.runsV1RestartRun(entityOwner, entityProject, entityUuid, body);

        // TODO: test validations
    }
    
    /**
     * Restore run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1RestoreRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1RestoreRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Resume run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1ResumeRunTest() throws ApiException {
        String entityOwner = null;
        String entityProject = null;
        String entityUuid = null;
        V1Run body = null;
        V1Run response = api.runsV1ResumeRun(entityOwner, entityProject, entityUuid, body);

        // TODO: test validations
    }
    
    /**
     * Start run tensorboard
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1StartRunTensorboardTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        V1ProjectEntityResourceRequest body = null;
        api.runsV1StartRunTensorboard(owner, project, uuid, body);

        // TODO: test validations
    }
    
    /**
     * Stop run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1StopRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1StopRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Stop run tensorboard
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1StopRunTensorboardTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1StopRunTensorboard(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Stop runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1StopRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1Uuids body = null;
        api.runsV1StopRuns(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Tag runs
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1TagRunsTest() throws ApiException {
        String owner = null;
        String project = null;
        V1Uuids body = null;
        api.runsV1TagRuns(owner, project, body);

        // TODO: test validations
    }
    
    /**
     * Unbookmark run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1UnbookmarkRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        api.runsV1UnbookmarkRun(owner, project, uuid);

        // TODO: test validations
    }
    
    /**
     * Update run
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runsV1UpdateRunTest() throws ApiException {
        String owner = null;
        String project = null;
        String runUuid = null;
        V1Run body = null;
        V1Run response = api.runsV1UpdateRun(owner, project, runUuid, body);

        // TODO: test validations
    }
    
    /**
     * Upload an artifact file to a store via run access
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadRunArtifactTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        File uploadfile = null;
        String path = null;
        Boolean overwrite = null;
        api.uploadRunArtifact(owner, project, uuid, uploadfile, path, overwrite);

        // TODO: test validations
    }
    
    /**
     * Upload a logs file to a store via run access
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadRunLogsTest() throws ApiException {
        String owner = null;
        String project = null;
        String uuid = null;
        File uploadfile = null;
        String path = null;
        Boolean overwrite = null;
        api.uploadRunLogs(owner, project, uuid, uploadfile, path, overwrite);

        // TODO: test validations
    }
    
}
