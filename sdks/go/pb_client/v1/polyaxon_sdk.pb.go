// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/polyaxon_sdk.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("v1/polyaxon_sdk.proto", fileDescriptor_5f2d65d1ab5d9ce0) }

var fileDescriptor_5f2d65d1ab5d9ce0 = []byte{
	// 2545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x9a, 0x5d, 0x73, 0xdb, 0xc6,
	0xd5, 0xc7, 0x1f, 0x2a, 0x63, 0x49, 0x3e, 0xa2, 0x44, 0x69, 0x25, 0x27, 0x0e, 0xfd, 0x46, 0xc3,
	0x4e, 0x1c, 0x33, 0x36, 0x21, 0xc2, 0x8a, 0xa3, 0x87, 0xcd, 0x24, 0x91, 0x64, 0x57, 0x76, 0xad,
	0x38, 0x2e, 0x65, 0x79, 0xda, 0xdc, 0xa8, 0x10, 0xb9, 0x22, 0x61, 0x51, 0x58, 0x1a, 0xbb, 0xa0,
	0x4d, 0x2b, 0xae, 0xf3, 0x52, 0xd7, 0x17, 0xe9, 0xf4, 0xa2, 0xb9, 0x49, 0xbe, 0x43, 0x67, 0xda,
	0x99, 0x5e, 0xf6, 0x63, 0xb4, 0xf7, 0xbd, 0x68, 0x3f, 0x47, 0xa7, 0xb3, 0x6f, 0x20, 0x48, 0x09,
	0x02, 0x28, 0xa8, 0xbd, 0x92, 0xb0, 0x00, 0xcf, 0xef, 0x7f, 0xce, 0x9e, 0xb3, 0x2f, 0xc0, 0xc2,
	0xa9, 0x4e, 0xd9, 0x6c, 0x93, 0x56, 0xd7, 0x7e, 0x46, 0xdc, 0x4d, 0x5a, 0xdf, 0x29, 0xb5, 0x3d,
	0xc2, 0x08, 0x1a, 0xe9, 0x94, 0xf3, 0x67, 0x1b, 0x84, 0x34, 0x5a, 0xd8, 0xb4, 0xdb, 0x8e, 0x69,
	0xbb, 0x2e, 0x61, 0x36, 0x73, 0x88, 0x4b, 0xe5, 0x13, 0xf9, 0x33, 0xea, 0xae, 0xb8, 0xda, 0xf2,
	0xb7, 0x4d, 0xbc, 0xdb, 0x66, 0x5d, 0x75, 0xf3, 0x9a, 0xf8, 0x53, 0xbb, 0xde, 0xc0, 0xee, 0x75,
	0xfa, 0xd4, 0x6e, 0x34, 0xb0, 0x67, 0x92, 0xb6, 0xf8, 0xf9, 0x01, 0xa6, 0x4e, 0x77, 0xca, 0xa6,
	0xed, 0x31, 0x67, 0xdb, 0xae, 0x31, 0xba, 0x49, 0x19, 0xf1, 0xb0, 0xba, 0x33, 0xd7, 0x29, 0x9b,
	0x4d, 0x42, 0xd9, 0xa6, 0x5d, 0xab, 0x61, 0xaa, 0x9f, 0xe7, 0x9a, 0x77, 0x16, 0xe9, 0xa6, 0x87,
	0x29, 0xf1, 0xbd, 0x9a, 0x7e, 0x78, 0xb2, 0x53, 0x36, 0xb7, 0x6c, 0xaa, 0x2f, 0x67, 0x3a, 0x65,
	0xb3, 0x46, 0xea, 0x78, 0xd3, 0xc3, 0xdb, 0xaa, 0x29, 0xdb, 0x29, 0x9b, 0x9e, 0xef, 0xaa, 0xab,
	0x69, 0xee, 0xba, 0x47, 0x1e, 0xe3, 0x1a, 0x0b, 0xb5, 0x74, 0xb0, 0x47, 0x1d, 0xe2, 0x86, 0x6c,
	0xda, 0x3e, 0x6b, 0x86, 0x2e, 0x7d, 0x8a, 0x3d, 0x75, 0x99, 0xeb, 0x94, 0x4d, 0x8a, 0x6d, 0xaf,
	0xd6, 0x0c, 0x37, 0x30, 0x9b, 0xf9, 0x4a, 0xaa, 0xf5, 0xfa, 0x2c, 0x8c, 0x56, 0x7d, 0x97, 0x3e,
	0x2a, 0xa3, 0x5d, 0x40, 0x6b, 0x0e, 0x65, 0xcb, 0x84, 0xec, 0xec, 0xda, 0xde, 0x0e, 0xae, 0xf3,
	0x76, 0x94, 0x2f, 0x75, 0xca, 0xa5, 0x0d, 0x8a, 0xbd, 0x2a, 0x77, 0xa6, 0x86, 0xf9, 0x23, 0x55,
	0xfc, 0xc4, 0xc7, 0x94, 0xe5, 0xe7, 0xf8, 0x3d, 0xd1, 0xe0, 0xbb, 0xb4, 0x8a, 0x69, 0x9b, 0xb8,
	0x14, 0x1b, 0xef, 0x7c, 0xf3, 0xb7, 0x7f, 0x7d, 0x3f, 0x72, 0x01, 0x9d, 0x13, 0x1d, 0xc3, 0x7d,
	0x56, 0x16, 0xa9, 0xb9, 0xc7, 0xb5, 0xbd, 0xe0, 0x2e, 0x52, 0xf4, 0x18, 0xa6, 0xf9, 0x4f, 0x97,
	0xbc, 0x5a, 0xd3, 0xe9, 0x1c, 0x19, 0x76, 0x59, 0xc0, 0xce, 0xa3, 0xb3, 0x1a, 0x66, 0x4b, 0x7b,
	0xfd, 0xac, 0x26, 0x8c, 0xeb, 0x5f, 0xa2, 0xf3, 0xdc, 0xce, 0x03, 0x19, 0xd6, 0xaa, 0xea, 0xa0,
	0x78, 0xce, 0xbb, 0x82, 0x53, 0x40, 0xe7, 0x35, 0x67, 0x8f, 0x3c, 0x75, 0xb9, 0xfd, 0x3d, 0xd5,
	0x43, 0x8a, 0xb4, 0x01, 0x27, 0x57, 0x3c, 0x6c, 0x33, 0x5c, 0xf5, 0x5d, 0x84, 0xb8, 0xa9, 0xaa,
	0xef, 0x2e, 0x93, 0x7a, 0x57, 0x9b, 0x1f, 0x53, 0x6d, 0xc6, 0xfb, 0xc2, 0xe2, 0x3b, 0x46, 0x8c,
	0xc5, 0xca, 0x1b, 0x9e, 0xef, 0xa2, 0x2d, 0x18, 0x5d, 0xc5, 0x5c, 0x11, 0x2a, 0x84, 0xe4, 0xdf,
	0x76, 0x99, 0xc3, 0xba, 0xda, 0x89, 0x7d, 0x84, 0xeb, 0x82, 0x70, 0x05, 0xbd, 0x73, 0x38, 0xc1,
	0xdc, 0xf3, 0x7d, 0xa7, 0xfe, 0x02, 0xfd, 0x0a, 0x4e, 0x6e, 0xb4, 0xeb, 0x49, 0xa4, 0xdf, 0x14,
	0x86, 0xe7, 0xf3, 0x57, 0xe3, 0x0c, 0xf3, 0x5c, 0x16, 0xc6, 0xa5, 0x17, 0x9b, 0x30, 0xfe, 0xc0,
	0x66, 0xb5, 0x66, 0x52, 0x80, 0x35, 0x2c, 0x80, 0xc1, 0xc9, 0x5b, 0xb8, 0x85, 0xa5, 0x0b, 0xf1,
	0x91, 0x7a, 0xb3, 0x24, 0xc7, 0x88, 0x92, 0x1e, 0x23, 0x4a, 0xb7, 0xf9, 0x18, 0xa1, 0x03, 0x57,
	0x4c, 0x18, 0xb8, 0x97, 0x00, 0x01, 0x95, 0xa2, 0x4b, 0x07, 0xe4, 0xd7, 0x86, 0xef, 0xd4, 0x69,
	0xd8, 0xd3, 0x28, 0xf2, 0x82, 0x20, 0x97, 0x62, 0xc9, 0x75, 0xc1, 0xab, 0x9c, 0xe0, 0x02, 0x28,
	0x7a, 0x0a, 0x63, 0xeb, 0x8c, 0xb4, 0xd3, 0x39, 0x6d, 0x09, 0xf4, 0x35, 0xa3, 0x98, 0xc8, 0x69,
	0x93, 0x32, 0xd2, 0x46, 0x7b, 0x30, 0xae, 0xc0, 0x29, 0xfd, 0xd6, 0xf0, 0x4b, 0x31, 0x70, 0x4e,
	0xd5, 0x5e, 0xff, 0x36, 0x03, 0x93, 0x77, 0xdd, 0x8e, 0xdd, 0x72, 0x74, 0xd2, 0x1e, 0xdd, 0xf9,
	0x9f, 0x08, 0xfe, 0x07, 0xc6, 0x7c, 0x32, 0xe7, 0x9d, 0x00, 0x5b, 0xc9, 0x14, 0xd1, 0xeb, 0x0c,
	0x4c, 0xf5, 0x09, 0x49, 0x19, 0x8c, 0x45, 0x21, 0xc6, 0x32, 0xe2, 0xb2, 0x3f, 0xa4, 0x42, 0x85,
	0xe4, 0x39, 0x8c, 0xad, 0x90, 0x76, 0x97, 0xc7, 0xe2, 0x34, 0x57, 0xa0, 0x82, 0x10, 0x51, 0x65,
	0x6b, 0x82, 0xf3, 0x53, 0xe3, 0x93, 0x80, 0x83, 0xc5, 0xf3, 0x25, 0x8d, 0x53, 0x97, 0x03, 0x21,
	0x50, 0xad, 0x32, 0x12, 0x35, 0xd2, 0xee, 0xca, 0xda, 0xfb, 0x2a, 0x03, 0x50, 0xc5, 0x94, 0xd9,
	0x1e, 0x4b, 0xc8, 0xff, 0x5c, 0xf0, 0xef, 0x1a, 0xcb, 0x29, 0xf8, 0x9e, 0x24, 0x4a, 0x09, 0xbf,
	0x86, 0x93, 0x55, 0x4c, 0xfd, 0x5d, 0x9c, 0x50, 0xc0, 0x7d, 0x21, 0xe0, 0x8e, 0xb1, 0x94, 0x4e,
	0x80, 0xbf, 0x8b, 0x25, 0xff, 0x05, 0x80, 0x9a, 0xce, 0xd2, 0x65, 0xe3, 0x07, 0x42, 0x97, 0x69,
	0x5c, 0x4f, 0x96, 0x8d, 0x6a, 0xca, 0xe3, 0x78, 0xde, 0x01, 0xc4, 0xfb, 0xdf, 0xe2, 0x3d, 0xc9,
	0x44, 0x2f, 0x61, 0x42, 0xaf, 0x1d, 0xd2, 0xf1, 0xd5, 0xe8, 0x6f, 0x94, 0x92, 0xf1, 0xf5, 0xf2,
	0x02, 0x7d, 0x9b, 0x81, 0xc9, 0x0d, 0x77, 0xeb, 0x58, 0x34, 0xa8, 0x1a, 0x2c, 0x26, 0x1c, 0x10,
	0xfc, 0x00, 0x8b, 0xbe, 0xcf, 0xc0, 0xec, 0xba, 0xaa, 0x82, 0x87, 0xd8, 0xa5, 0xc4, 0xdb, 0x22,
	0xb6, 0x57, 0x4f, 0xa1, 0x65, 0x59, 0x68, 0xf9, 0xc8, 0xf8, 0x30, 0x99, 0x16, 0xd6, 0x83, 0x9a,
	0xb2, 0x38, 0x32, 0x45, 0xf4, 0xfb, 0x0c, 0x20, 0x35, 0x54, 0x1f, 0x8f, 0xa8, 0x8f, 0x85, 0xa8,
	0x45, 0xe3, 0xe6, 0x51, 0x44, 0x91, 0x36, 0xea, 0xc0, 0x94, 0x5c, 0xd1, 0xac, 0x8b, 0xe5, 0x28,
	0xa6, 0x09, 0xb4, 0x00, 0x7f, 0x42, 0x3e, 0xaf, 0x93, 0x04, 0x95, 0x92, 0x4e, 0x57, 0x8a, 0xe2,
	0x43, 0x2e, 0x58, 0xa0, 0x49, 0x53, 0xe8, 0x4c, 0x6f, 0xa4, 0x90, 0x2d, 0xe1, 0xc1, 0x22, 0xcc,
	0xfc, 0x7f, 0xc1, 0xbc, 0x61, 0x0c, 0xc9, 0xe4, 0xf1, 0xff, 0x36, 0xa3, 0xfd, 0x5d, 0x21, 0x75,
	0x5c, 0xc5, 0xdb, 0x49, 0xfc, 0x3d, 0xad, 0x97, 0xa2, 0xfa, 0x37, 0xc1, 0x72, 0x54, 0x95, 0x28,
	0x4a, 0x58, 0xa2, 0x7c, 0x9b, 0xe1, 0xe1, 0x6d, 0xf4, 0x63, 0x06, 0xa6, 0x03, 0xef, 0x95, 0x51,
	0xf4, 0x26, 0xa7, 0xa8, 0x8b, 0xb0, 0xe7, 0x33, 0xa1, 0x76, 0xec, 0x61, 0xb7, 0x86, 0x8d, 0x2f,
	0x04, 0xf6, 0x61, 0xaa, 0x11, 0x5b, 0x69, 0xa9, 0x4c, 0xe9, 0xbd, 0x8f, 0xb4, 0x8d, 0xba, 0x30,
	0x7d, 0x77, 0xb7, 0x8d, 0x3d, 0x4a, 0x5c, 0x9b, 0xe1, 0x87, 0x64, 0x07, 0x27, 0xa9, 0xdf, 0x71,
	0xfe, 0xc4, 0x92, 0xcf, 0x9a, 0x41, 0xe7, 0x94, 0x13, 0x4e, 0xe1, 0x3d, 0x16, 0xda, 0xd3, 0x7d,
	0xb3, 0x46, 0x1a, 0xf4, 0xa1, 0x87, 0xb1, 0x8c, 0x49, 0xd5, 0x77, 0x97, 0xd4, 0xae, 0xaf, 0xaf,
	0x47, 0x74, 0x23, 0x7f, 0x32, 0xe8, 0x91, 0x0f, 0x05, 0xbe, 0x8c, 0xcc, 0x64, 0xf8, 0x16, 0x69,
	0x50, 0x93, 0x71, 0xd4, 0xab, 0x0c, 0xcc, 0x4a, 0xba, 0xb6, 0x7b, 0x54, 0x09, 0x1f, 0x09, 0x09,
	0x37, 0xd1, 0x42, 0xd2, 0x69, 0x43, 0xe1, 0x84, 0x0e, 0xeb, 0xdf, 0x59, 0x00, 0x15, 0x6a, 0xbe,
	0x1b, 0x6c, 0x41, 0x96, 0x67, 0x9e, 0x6e, 0x91, 0x45, 0xf2, 0x39, 0xb7, 0x77, 0xc0, 0xde, 0x2c,
	0x48, 0x54, 0xfd, 0x78, 0xf4, 0x66, 0x50, 0x6b, 0x52, 0x92, 0xa8, 0xd9, 0x72, 0x28, 0x43, 0xdb,
	0x30, 0x29, 0xf3, 0x52, 0x19, 0x90, 0xde, 0xab, 0x8b, 0x70, 0x52, 0x4e, 0x84, 0xda, 0x8d, 0x79,
	0x61, 0xbc, 0x68, 0x5c, 0x88, 0x34, 0x5e, 0x13, 0x46, 0x2b, 0x63, 0xaa, 0x01, 0x3d, 0x91, 0x9b,
	0x4e, 0x65, 0xe0, 0xbe, 0xbd, 0x8b, 0x8f, 0xec, 0x59, 0xe4, 0x8e, 0x30, 0x80, 0xbb, 0xc2, 0x7c,
	0x17, 0xde, 0xec, 0xdf, 0x56, 0x07, 0x21, 0x3d, 0x6c, 0xb7, 0x1b, 0xcd, 0xbd, 0x2a, 0xb8, 0x97,
	0xd0, 0xc5, 0xc8, 0xed, 0xb5, 0x16, 0x80, 0x3a, 0x30, 0x17, 0xde, 0x62, 0xa7, 0x04, 0xbf, 0x27,
	0xc0, 0x06, 0x2a, 0x44, 0x6d, 0xb5, 0x03, 0xee, 0x2f, 0x00, 0x56, 0xb1, 0x36, 0x20, 0x69, 0x03,
	0x6b, 0xe1, 0x03, 0xbb, 0xf3, 0xa2, 0x00, 0x9c, 0x41, 0x6f, 0x47, 0xe6, 0x2f, 0xc2, 0x30, 0x29,
	0xf7, 0xa8, 0x43, 0xe5, 0x89, 0x29, 0x0c, 0x5f, 0xcd, 0x47, 0x6e, 0xb5, 0x4b, 0xbc, 0xab, 0x5e,
	0xf4, 0xd2, 0xa4, 0x0e, 0x59, 0xb1, 0x51, 0x3d, 0x0a, 0xc5, 0x4a, 0x4c, 0xd9, 0x86, 0x49, 0xb9,
	0x6f, 0x4c, 0x12, 0xa9, 0xa8, 0x79, 0x58, 0x05, 0xad, 0x78, 0x48, 0xd0, 0x08, 0x4c, 0xa9, 0x14,
	0x48, 0x03, 0x52, 0x79, 0x67, 0x5c, 0x8c, 0x1e, 0x5d, 0xf4, 0x42, 0x94, 0xc0, 0x94, 0x5a, 0x88,
	0xfe, 0x97, 0x81, 0x7a, 0xe9, 0xf9, 0x04, 0x72, 0xba, 0xbe, 0xd2, 0x10, 0x8b, 0x82, 0x78, 0xd9,
	0x30, 0xa2, 0x89, 0xc1, 0x32, 0xcf, 0x87, 0x99, 0xde, 0x5a, 0x33, 0x0d, 0xf4, 0x9a, 0x80, 0xbe,
	0x5b, 0xbc, 0x1c, 0x0d, 0x0d, 0xad, 0x2e, 0x77, 0x20, 0x77, 0xdb, 0xb5, 0xb7, 0x5a, 0x3a, 0xb2,
	0x2b, 0x77, 0x8f, 0x04, 0x55, 0xaf, 0xcd, 0x8c, 0xb3, 0xd1, 0xd0, 0x9a, 0x83, 0x5a, 0x30, 0x7d,
	0xcb, 0xa1, 0xc7, 0x46, 0x2b, 0x1e, 0x4a, 0xb3, 0xfe, 0x3e, 0x06, 0x33, 0xc1, 0x14, 0xb8, 0xce,
	0xfb, 0x95, 0xcf, 0x43, 0xaf, 0x33, 0xf0, 0x96, 0x1c, 0xc4, 0xc2, 0x77, 0x12, 0x8c, 0xdc, 0x17,
	0xf4, 0x40, 0x36, 0x60, 0x33, 0x18, 0xcf, 0x4a, 0x42, 0xd5, 0x7b, 0xe8, 0xdd, 0x41, 0x55, 0x03,
	0xaf, 0x7a, 0xf5, 0x40, 0xfe, 0x02, 0x66, 0x0f, 0x30, 0x97, 0x52, 0xc4, 0xbe, 0x41, 0x35, 0x4a,
	0x04, 0x5f, 0x41, 0xce, 0xc9, 0x39, 0xb2, 0xdf, 0x16, 0x3a, 0x17, 0x5e, 0x10, 0xc8, 0xb6, 0xf0,
	0x18, 0x85, 0xf6, 0xdf, 0x0e, 0xde, 0x30, 0xc4, 0x52, 0x2b, 0x53, 0xba, 0x45, 0x36, 0xa0, 0x67,
	0x30, 0xb3, 0x8a, 0x07, 0xbc, 0x91, 0xaf, 0x54, 0x45, 0x08, 0x0e, 0x5e, 0xa4, 0x1d, 0x24, 0x41,
	0x8d, 0x96, 0xe8, 0x4a, 0x6c, 0xf4, 0xd5, 0x5b, 0xb6, 0x1f, 0x33, 0x30, 0x27, 0xc7, 0xfe, 0xf4,
	0xfe, 0xab, 0x8d, 0x7f, 0xfe, 0x66, 0x3c, 0xbc, 0xdf, 0x7f, 0xf5, 0xb2, 0x71, 0x30, 0x2a, 0x3f,
	0x64, 0x60, 0x56, 0x4c, 0x18, 0xc7, 0x26, 0xcd, 0x3a, 0x2e, 0x69, 0x2f, 0x61, 0x4e, 0x4e, 0x32,
	0x43, 0xf6, 0x59, 0x54, 0x2d, 0xab, 0x7e, 0x2b, 0x26, 0xed, 0x37, 0xeb, 0x87, 0x31, 0xc8, 0xdd,
	0x5b, 0xa4, 0x2b, 0xc4, 0xdd, 0x76, 0x1a, 0x9f, 0xd9, 0x6d, 0x5e, 0xd4, 0x5f, 0x67, 0xe0, 0x14,
	0xaf, 0x8a, 0x70, 0x7b, 0x82, 0x92, 0x3e, 0xab, 0xab, 0xe9, 0xde, 0x22, 0xd5, 0x7a, 0x7b, 0xa5,
	0x14, 0xf9, 0xba, 0x7b, 0x67, 0x91, 0x6e, 0xd6, 0x04, 0x66, 0x73, 0xd7, 0x6e, 0xeb, 0x72, 0x7e,
	0x0a, 0x33, 0x83, 0x12, 0x52, 0xe1, 0xaf, 0x08, 0xfc, 0x45, 0x74, 0x21, 0x06, 0x8f, 0xba, 0x30,
	0x2b, 0xeb, 0xb8, 0x1f, 0x2d, 0x06, 0xd6, 0x90, 0xe5, 0x70, 0xa2, 0xe4, 0x06, 0xee, 0x05, 0xaf,
	0x68, 0xe2, 0x60, 0x95, 0x6c, 0xf8, 0x3b, 0x14, 0xf2, 0x20, 0xb7, 0x8a, 0xfb, 0x5c, 0x8e, 0xcd,
	0x83, 0x7d, 0xe8, 0xc8, 0x61, 0x73, 0x30, 0xcc, 0xaa, 0x6e, 0x7f, 0x97, 0x01, 0x24, 0xeb, 0xb6,
	0x8f, 0x3b, 0x94, 0xbb, 0x77, 0x05, 0x73, 0x25, 0x7f, 0x23, 0x96, 0xd9, 0xf7, 0xd9, 0x4d, 0x56,
	0x44, 0x7f, 0x08, 0xbe, 0xcb, 0xc0, 0x8c, 0x28, 0xd5, 0xd4, 0x6a, 0xac, 0x63, 0x50, 0xf3, 0x25,
	0x20, 0x59, 0x9d, 0x43, 0xf5, 0x49, 0x54, 0x6d, 0xaa, 0xae, 0x29, 0x26, 0xec, 0x1a, 0xeb, 0x9f,
	0xa3, 0x90, 0xbd, 0xb7, 0x48, 0xd7, 0x71, 0xcd, 0xc3, 0x62, 0xd3, 0xf7, 0x5c, 0x7e, 0x02, 0x0c,
	0xda, 0x52, 0xd7, 0xe4, 0xbe, 0xcd, 0x4a, 0x58, 0x11, 0x95, 0x5c, 0x55, 0x8f, 0x6d, 0x98, 0xea,
	0x63, 0xa7, 0xe2, 0x5e, 0x12, 0xdc, 0x73, 0xe8, 0xcc, 0x21, 0x5c, 0xe4, 0xe9, 0x97, 0x21, 0x21,
	0xe6, 0x50, 0x89, 0x50, 0x16, 0x94, 0xf7, 0x8d, 0xc3, 0x28, 0x03, 0x1d, 0xbe, 0x03, 0x59, 0x59,
	0x81, 0x12, 0x38, 0x7c, 0xf9, 0xa9, 0x35, 0x2a, 0x32, 0x0e, 0x8b, 0xa8, 0x2a, 0xbd, 0x57, 0x19,
	0xc8, 0x05, 0xa5, 0xa7, 0x80, 0x43, 0x39, 0x78, 0x5b, 0xc0, 0x3e, 0xc9, 0x9b, 0x87, 0xc2, 0x62,
	0xb3, 0xfc, 0x37, 0x19, 0x98, 0xd2, 0x35, 0x97, 0x42, 0x86, 0x95, 0x52, 0x86, 0x0f, 0xb9, 0xa0,
	0xd8, 0x12, 0x86, 0x3f, 0x66, 0xa7, 0x50, 0x4c, 0xd0, 0x0b, 0xd6, 0x1f, 0xc7, 0x00, 0x55, 0x71,
	0xc3, 0xa1, 0xcc, 0xeb, 0x2e, 0x89, 0x63, 0x02, 0x62, 0x61, 0xfb, 0x4a, 0x2d, 0x6c, 0xfb, 0x6f,
	0x0d, 0x53, 0x71, 0x77, 0x08, 0x65, 0xda, 0x60, 0x90, 0xf9, 0x91, 0xeb, 0x2a, 0x4f, 0x71, 0xd4,
	0x51, 0x85, 0x60, 0x59, 0xfb, 0xa5, 0x7c, 0x49, 0x30, 0xa8, 0x30, 0x8d, 0x86, 0xc8, 0xaa, 0xdf,
	0xa7, 0x01, 0x75, 0xf5, 0xa2, 0xb6, 0x9f, 0x8f, 0xde, 0xe6, 0x80, 0x9e, 0xf1, 0x70, 0x7a, 0x4c,
	0xf5, 0xdf, 0x0a, 0x3e, 0x17, 0xc4, 0xd3, 0x2a, 0x13, 0xa1, 0xb3, 0x1a, 0x7c, 0x07, 0xb7, 0x8a,
	0x07, 0xfc, 0x8e, 0x4d, 0x88, 0x41, 0xb8, 0x7a, 0x05, 0x85, 0xde, 0x8b, 0x0f, 0x77, 0x6f, 0x3e,
	0x54, 0xeb, 0xd8, 0xa3, 0xbb, 0xac, 0xe7, 0xc3, 0x85, 0x04, 0xd4, 0xf0, 0xf1, 0x14, 0x59, 0x15,
	0x7d, 0x51, 0xf8, 0x4e, 0x2f, 0x5d, 0x53, 0xab, 0xb1, 0x8e, 0x41, 0xcd, 0x57, 0x19, 0xbd, 0x5c,
	0x1d, 0xb2, 0x5f, 0xa2, 0x0a, 0x55, 0xf5, 0x4f, 0x31, 0x71, 0xff, 0x58, 0xff, 0x18, 0x85, 0xc9,
	0x55, 0x87, 0x85, 0x2a, 0x75, 0x4f, 0xce, 0x8a, 0x41, 0x63, 0xea, 0x1a, 0x8d, 0x1c, 0xc3, 0x1b,
	0x0e, 0x1b, 0x2c, 0x4f, 0x0f, 0x72, 0x7d, 0xf0, 0x74, 0xe4, 0x7d, 0xc7, 0x65, 0x0e, 0x22, 0x23,
	0xa2, 0xbf, 0x91, 0x04, 0xd4, 0x61, 0xd2, 0x41, 0xcf, 0x8a, 0x87, 0x32, 0xfa, 0xbb, 0x5d, 0xce,
	0x8a, 0x3d, 0xda, 0xb0, 0x55, 0xa8, 0xce, 0xd2, 0xa0, 0x4b, 0x87, 0x06, 0x54, 0x15, 0xe0, 0x37,
	0xc1, 0xac, 0x78, 0x24, 0xf7, 0x6e, 0x09, 0xd6, 0xc7, 0xfb, 0xe7, 0xc4, 0x7e, 0x56, 0x4c, 0xa2,
	0x7f, 0xad, 0xa7, 0xc4, 0x34, 0x1a, 0xac, 0x74, 0x1a, 0x3a, 0x7a, 0x3e, 0x4c, 0x1e, 0xf8, 0xa8,
	0x32, 0x53, 0x1d, 0x50, 0x4c, 0xd2, 0x01, 0xd6, 0x5f, 0x4f, 0xc0, 0xf8, 0xba, 0x38, 0x95, 0xf6,
	0xa8, 0x8c, 0x98, 0xfc, 0xce, 0x20, 0xaf, 0x71, 0xfc, 0xf1, 0xac, 0xe0, 0xfd, 0xb4, 0xfe, 0x45,
	0x7c, 0x55, 0xf5, 0xde, 0x32, 0x51, 0x4d, 0xc1, 0x90, 0x95, 0x19, 0x2e, 0xad, 0xa0, 0x53, 0xe2,
	0x2b, 0x9f, 0xf8, 0x7f, 0xff, 0xc7, 0x3f, 0xd1, 0x1c, 0x1c, 0x51, 0x49, 0x60, 0xbe, 0x32, 0x2a,
	0xff, 0x43, 0x2d, 0x38, 0xb9, 0x8a, 0x95, 0xd2, 0xc4, 0xdf, 0x37, 0x25, 0x4e, 0x55, 0x11, 0xba,
	0x1a, 0x8f, 0xd3, 0x89, 0x4d, 0x21, 0x2b, 0xf3, 0x3a, 0xb9, 0x53, 0x9f, 0x0a, 0x4a, 0x25, 0x3f,
	0x9f, 0x84, 0xa2, 0x4e, 0x12, 0xca, 0x4c, 0xd2, 0x2e, 0x7a, 0x30, 0x21, 0xf2, 0x78, 0x68, 0xa6,
	0x75, 0x74, 0xe6, 0x1e, 0x64, 0x65, 0xe2, 0x26, 0x8e, 0x6c, 0x54, 0xde, 0xaa, 0x28, 0x17, 0x93,
	0x47, 0xd9, 0xfa, 0x39, 0x8c, 0x2e, 0xf9, 0x8c, 0xa7, 0xee, 0x2a, 0x9c, 0x58, 0x23, 0x0d, 0xc7,
	0x45, 0xe2, 0xc8, 0xe0, 0x8a, 0x87, 0xfb, 0x8f, 0xf7, 0xf4, 0x3e, 0x4d, 0x9e, 0x17, 0x94, 0xd3,
	0xc6, 0xac, 0xa6, 0xf8, 0x14, 0x7b, 0xd4, 0x64, 0x64, 0x07, 0xbb, 0x95, 0x4c, 0xd1, 0xfa, 0x0c,
	0xc6, 0x36, 0x78, 0xcb, 0xa3, 0x32, 0x5a, 0x86, 0xb1, 0x55, 0xcc, 0xf8, 0x15, 0x8a, 0xd0, 0x2c,
	0xed, 0xf2, 0x27, 0x8c, 0x53, 0xc2, 0x6e, 0x0e, 0x4d, 0xf6, 0xd9, 0xb5, 0xfe, 0x9c, 0x01, 0x78,
	0x24, 0x4f, 0x89, 0x72, 0x93, 0x6b, 0x30, 0xb1, 0x8a, 0x99, 0x6e, 0x88, 0x34, 0x9b, 0xe5, 0x66,
	0xf5, 0x53, 0xc6, 0x5b, 0xc2, 0xf4, 0x0c, 0xca, 0x69, 0xd3, 0xea, 0xd8, 0x29, 0x7a, 0x08, 0x93,
	0xab, 0x98, 0xad, 0x91, 0xc6, 0x1d, 0xdb, 0xad, 0xb7, 0x0e, 0x91, 0x29, 0xc6, 0xac, 0xde, 0x73,
	0xc6, 0x19, 0x61, 0xf1, 0x14, 0x0a, 0x82, 0xd0, 0x22, 0x8d, 0xcd, 0xa6, 0xbc, 0xb9, 0xfc, 0x97,
	0x91, 0x3f, 0x2c, 0xfd, 0x69, 0x04, 0xd9, 0x90, 0x7d, 0xa0, 0xce, 0xfa, 0x16, 0x68, 0x7d, 0xc7,
	0xf8, 0x59, 0xff, 0x35, 0xba, 0xdc, 0x64, 0xac, 0x4d, 0x2b, 0x26, 0x1f, 0x56, 0x9a, 0xfe, 0x56,
	0xa9, 0x46, 0x76, 0x83, 0xc3, 0xc1, 0xc1, 0x3f, 0xf9, 0xb9, 0x1a, 0x71, 0x99, 0x5d, 0x63, 0x9f,
	0xea, 0x16, 0xfe, 0x9c, 0x75, 0xa2, 0x5c, 0x9a, 0x2f, 0xcd, 0x17, 0x47, 0x32, 0x23, 0xd6, 0xb4,
	0xdd, 0x6e, 0xb7, 0x9c, 0x9a, 0x38, 0xe3, 0x6b, 0x3e, 0xa6, 0xc4, 0xad, 0xec, 0x6b, 0xa9, 0xce,
	0xc1, 0x1b, 0xd6, 0xfc, 0x02, 0x9a, 0x84, 0x89, 0xfb, 0xa4, 0xc0, 0x0d, 0x62, 0x97, 0x95, 0xaa,
	0x15, 0x78, 0x63, 0x61, 0xfe, 0x06, 0xba, 0x01, 0xe5, 0x5f, 0x12, 0xbf, 0x50, 0x27, 0xee, 0x15,
	0x56, 0x68, 0xda, 0x1d, 0x5c, 0x68, 0x63, 0x6f, 0xd7, 0xa1, 0x3c, 0x42, 0x05, 0x46, 0x0a, 0x72,
	0xc4, 0x2b, 0xb0, 0x26, 0x2e, 0x04, 0x3b, 0x92, 0xea, 0x45, 0xfe, 0xdb, 0x05, 0x94, 0x87, 0xd3,
	0x3a, 0x3b, 0x0b, 0x75, 0x82, 0x69, 0xc1, 0x25, 0xac, 0x80, 0x9f, 0x39, 0x94, 0x95, 0xbe, 0xb8,
	0x00, 0xe7, 0x60, 0x74, 0xa9, 0xed, 0xdc, 0xc3, 0x5d, 0x34, 0x3b, 0x3e, 0x92, 0x9f, 0xe4, 0xe9,
	0x43, 0x3c, 0xe7, 0xb9, 0x10, 0x56, 0x18, 0xd9, 0xca, 0x02, 0x04, 0x0f, 0xfc, 0xdf, 0xd6, 0xa8,
	0x08, 0xf9, 0x8d, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x4c, 0x8a, 0x6a, 0x04, 0x24, 0x2d, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunsV1Client is the client API for RunsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunsV1Client interface {
	// List bookmarked runs for user
	ListBookmarkedRuns(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List runs
	ListRuns(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// Create new run
	CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Get run
	GetRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Run, error)
	// Update run
	UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Patch run
	PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Delete run
	DeleteRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run
	StopRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop runs
	StopRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Invalidate run
	InvalidateRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Restart run
	RestartRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Resume run
	ResumeRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Archive run
	ArchiveRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore run
	RestoreRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unbookmark run
	UnbookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Status, error)
	// Create new run status
	CreateRunStatus(ctx context.Context, in *EntityStatusBodyRequest, opts ...grpc.CallOption) (*Status, error)
	// Get run code ref
	GetRunCodeRefs(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*ListCodeRefsResponse, error)
	// Get run code ref
	CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*CodeReference, error)
	// Impersonate run token
	ImpersonateToken(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Auth, error)
	// Get run logs list
	GetRunLogsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error)
	// Get run artifacts list
	GetRunArtifactsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error)
}

type runsV1Client struct {
	cc *grpc.ClientConn
}

func NewRunsV1Client(cc *grpc.ClientConn) RunsV1Client {
	return &runsV1Client{cc}
}

func (c *runsV1Client) ListBookmarkedRuns(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListBookmarkedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ListArchivedRuns(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListArchivedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ListRuns(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/UpdateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/PatchRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) DeleteRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/DeleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) DeleteRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/DeleteRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) InvalidateRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/InvalidateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) InvalidateRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/InvalidateRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CopyRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CopyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) RestartRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/RestartRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ResumeRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ResumeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ArchiveRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ArchiveRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) RestoreRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/RestoreRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) BookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/BookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) UnbookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/UnbookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StartRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StartRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunStatuses(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRunStatus(ctx context.Context, in *EntityStatusBodyRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRunStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunCodeRefs(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*ListCodeRefsResponse, error) {
	out := new(ListCodeRefsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunCodeRefs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*CodeReference, error) {
	out := new(CodeReference)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRunCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ImpersonateToken(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ImpersonateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunLogsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error) {
	out := new(ArtifactTreeResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunLogsTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunArtifactsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error) {
	out := new(ArtifactTreeResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunArtifactsTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunsV1Server is the server API for RunsV1 service.
type RunsV1Server interface {
	// List bookmarked runs for user
	ListBookmarkedRuns(context.Context, *UserResouceListRequest) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(context.Context, *UserResouceListRequest) (*ListRunsResponse, error)
	// List runs
	ListRuns(context.Context, *ProjectResourceListRequest) (*ListRunsResponse, error)
	// Create new run
	CreateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Get run
	GetRun(context.Context, *ProjectEntityResourceRequest) (*Run, error)
	// Update run
	UpdateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Patch run
	PatchRun(context.Context, *RunBodyRequest) (*Run, error)
	// Delete run
	DeleteRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Stop run
	StopRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Stop runs
	StopRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Invalidate run
	InvalidateRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Restart run
	RestartRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Resume run
	ResumeRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Archive run
	ArchiveRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Restore run
	RestoreRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Unbookmark run
	UnbookmarkRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(context.Context, *ProjectEntityResourceRequest) (*Status, error)
	// Create new run status
	CreateRunStatus(context.Context, *EntityStatusBodyRequest) (*Status, error)
	// Get run code ref
	GetRunCodeRefs(context.Context, *ProjectEntityResourceRequest) (*ListCodeRefsResponse, error)
	// Get run code ref
	CreateRunCodeRef(context.Context, *CodeRefBodyRequest) (*CodeReference, error)
	// Impersonate run token
	ImpersonateToken(context.Context, *ProjectEntityResourceRequest) (*Auth, error)
	// Get run logs list
	GetRunLogsTree(context.Context, *RunArtifactRequest) (*ArtifactTreeResponse, error)
	// Get run artifacts list
	GetRunArtifactsTree(context.Context, *RunArtifactRequest) (*ArtifactTreeResponse, error)
}

// UnimplementedRunsV1Server can be embedded to have forward compatible implementations.
type UnimplementedRunsV1Server struct {
}

func (*UnimplementedRunsV1Server) ListBookmarkedRuns(ctx context.Context, req *UserResouceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedRuns not implemented")
}
func (*UnimplementedRunsV1Server) ListArchivedRuns(ctx context.Context, req *UserResouceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedRuns not implemented")
}
func (*UnimplementedRunsV1Server) ListRuns(ctx context.Context, req *ProjectResourceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (*UnimplementedRunsV1Server) CreateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (*UnimplementedRunsV1Server) GetRun(ctx context.Context, req *ProjectEntityResourceRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedRunsV1Server) UpdateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRun not implemented")
}
func (*UnimplementedRunsV1Server) PatchRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRun not implemented")
}
func (*UnimplementedRunsV1Server) DeleteRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (*UnimplementedRunsV1Server) DeleteRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuns not implemented")
}
func (*UnimplementedRunsV1Server) StopRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRun not implemented")
}
func (*UnimplementedRunsV1Server) StopRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRuns not implemented")
}
func (*UnimplementedRunsV1Server) InvalidateRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRun not implemented")
}
func (*UnimplementedRunsV1Server) InvalidateRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRuns not implemented")
}
func (*UnimplementedRunsV1Server) CopyRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRun not implemented")
}
func (*UnimplementedRunsV1Server) RestartRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRun not implemented")
}
func (*UnimplementedRunsV1Server) ResumeRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRun not implemented")
}
func (*UnimplementedRunsV1Server) ArchiveRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRun not implemented")
}
func (*UnimplementedRunsV1Server) RestoreRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRun not implemented")
}
func (*UnimplementedRunsV1Server) BookmarkRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkRun not implemented")
}
func (*UnimplementedRunsV1Server) UnbookmarkRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookmarkRun not implemented")
}
func (*UnimplementedRunsV1Server) StartRunTensorboard(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRunTensorboard not implemented")
}
func (*UnimplementedRunsV1Server) StopRunTensorboard(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRunTensorboard not implemented")
}
func (*UnimplementedRunsV1Server) GetRunStatuses(ctx context.Context, req *ProjectEntityResourceRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunStatuses not implemented")
}
func (*UnimplementedRunsV1Server) CreateRunStatus(ctx context.Context, req *EntityStatusBodyRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunStatus not implemented")
}
func (*UnimplementedRunsV1Server) GetRunCodeRefs(ctx context.Context, req *ProjectEntityResourceRequest) (*ListCodeRefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunCodeRefs not implemented")
}
func (*UnimplementedRunsV1Server) CreateRunCodeRef(ctx context.Context, req *CodeRefBodyRequest) (*CodeReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunCodeRef not implemented")
}
func (*UnimplementedRunsV1Server) ImpersonateToken(ctx context.Context, req *ProjectEntityResourceRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImpersonateToken not implemented")
}
func (*UnimplementedRunsV1Server) GetRunLogsTree(ctx context.Context, req *RunArtifactRequest) (*ArtifactTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunLogsTree not implemented")
}
func (*UnimplementedRunsV1Server) GetRunArtifactsTree(ctx context.Context, req *RunArtifactRequest) (*ArtifactTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunArtifactsTree not implemented")
}

func RegisterRunsV1Server(s *grpc.Server, srv RunsV1Server) {
	s.RegisterService(&_RunsV1_serviceDesc, srv)
}

func _RunsV1_ListBookmarkedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListBookmarkedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListBookmarkedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListBookmarkedRuns(ctx, req.(*UserResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ListArchivedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListArchivedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListArchivedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListArchivedRuns(ctx, req.(*UserResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListRuns(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_UpdateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).UpdateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/UpdateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).UpdateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_PatchRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).PatchRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/PatchRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).PatchRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/DeleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).DeleteRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_DeleteRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).DeleteRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/DeleteRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).DeleteRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_InvalidateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).InvalidateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/InvalidateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).InvalidateRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_InvalidateRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).InvalidateRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/InvalidateRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).InvalidateRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CopyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CopyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CopyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CopyRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_RestartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).RestartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/RestartRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).RestartRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ResumeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ResumeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ResumeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ResumeRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ArchiveRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ArchiveRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ArchiveRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ArchiveRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_RestoreRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).RestoreRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/RestoreRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).RestoreRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_BookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).BookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/BookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).BookmarkRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_UnbookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).UnbookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/UnbookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).UnbookmarkRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StartRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StartRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StartRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StartRunTensorboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRunTensorboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunStatuses(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRunStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityStatusBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRunStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRunStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRunStatus(ctx, req.(*EntityStatusBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunCodeRefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunCodeRefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunCodeRefs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunCodeRefs(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRunCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRefBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRunCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRunCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRunCodeRef(ctx, req.(*CodeRefBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ImpersonateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ImpersonateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ImpersonateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ImpersonateToken(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunLogsTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunLogsTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunLogsTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunLogsTree(ctx, req.(*RunArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunArtifactsTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunArtifactsTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunArtifactsTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunArtifactsTree(ctx, req.(*RunArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RunsV1",
	HandlerType: (*RunsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBookmarkedRuns",
			Handler:    _RunsV1_ListBookmarkedRuns_Handler,
		},
		{
			MethodName: "ListArchivedRuns",
			Handler:    _RunsV1_ListArchivedRuns_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _RunsV1_ListRuns_Handler,
		},
		{
			MethodName: "CreateRun",
			Handler:    _RunsV1_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _RunsV1_GetRun_Handler,
		},
		{
			MethodName: "UpdateRun",
			Handler:    _RunsV1_UpdateRun_Handler,
		},
		{
			MethodName: "PatchRun",
			Handler:    _RunsV1_PatchRun_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _RunsV1_DeleteRun_Handler,
		},
		{
			MethodName: "DeleteRuns",
			Handler:    _RunsV1_DeleteRuns_Handler,
		},
		{
			MethodName: "StopRun",
			Handler:    _RunsV1_StopRun_Handler,
		},
		{
			MethodName: "StopRuns",
			Handler:    _RunsV1_StopRuns_Handler,
		},
		{
			MethodName: "InvalidateRun",
			Handler:    _RunsV1_InvalidateRun_Handler,
		},
		{
			MethodName: "InvalidateRuns",
			Handler:    _RunsV1_InvalidateRuns_Handler,
		},
		{
			MethodName: "CopyRun",
			Handler:    _RunsV1_CopyRun_Handler,
		},
		{
			MethodName: "RestartRun",
			Handler:    _RunsV1_RestartRun_Handler,
		},
		{
			MethodName: "ResumeRun",
			Handler:    _RunsV1_ResumeRun_Handler,
		},
		{
			MethodName: "ArchiveRun",
			Handler:    _RunsV1_ArchiveRun_Handler,
		},
		{
			MethodName: "RestoreRun",
			Handler:    _RunsV1_RestoreRun_Handler,
		},
		{
			MethodName: "BookmarkRun",
			Handler:    _RunsV1_BookmarkRun_Handler,
		},
		{
			MethodName: "UnbookmarkRun",
			Handler:    _RunsV1_UnbookmarkRun_Handler,
		},
		{
			MethodName: "StartRunTensorboard",
			Handler:    _RunsV1_StartRunTensorboard_Handler,
		},
		{
			MethodName: "StopRunTensorboard",
			Handler:    _RunsV1_StopRunTensorboard_Handler,
		},
		{
			MethodName: "GetRunStatuses",
			Handler:    _RunsV1_GetRunStatuses_Handler,
		},
		{
			MethodName: "CreateRunStatus",
			Handler:    _RunsV1_CreateRunStatus_Handler,
		},
		{
			MethodName: "GetRunCodeRefs",
			Handler:    _RunsV1_GetRunCodeRefs_Handler,
		},
		{
			MethodName: "CreateRunCodeRef",
			Handler:    _RunsV1_CreateRunCodeRef_Handler,
		},
		{
			MethodName: "ImpersonateToken",
			Handler:    _RunsV1_ImpersonateToken_Handler,
		},
		{
			MethodName: "GetRunLogsTree",
			Handler:    _RunsV1_GetRunLogsTree_Handler,
		},
		{
			MethodName: "GetRunArtifactsTree",
			Handler:    _RunsV1_GetRunArtifactsTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ProjectsV1Client is the client API for ProjectsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsV1Client interface {
	// List projects
	ListProjects(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// List project namess
	ListProjectNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Get project
	GetProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*Project, error)
	// Update project
	UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Patch project
	PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Delete project
	DeleteProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Archive project
	ArchiveProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore project
	RestoreProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unbookmark project
	UnbookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enable project CI
	EnableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Disbale project CI
	DisableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type projectsV1Client struct {
	cc *grpc.ClientConn
}

func NewProjectsV1Client(cc *grpc.ClientConn) ProjectsV1Client {
	return &projectsV1Client{cc}
}

func (c *projectsV1Client) ListProjects(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) CreateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListProjectNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListProjectNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListBookmarkedProjects(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListBookmarkedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListArchivedProjects(ctx context.Context, in *UserResouceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListArchivedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) GetProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/PatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) DeleteProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ArchiveProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) RestoreProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/RestoreProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) BookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/BookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UnbookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UnbookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) EnableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/EnableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) DisableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/DisableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsV1Server is the server API for ProjectsV1 service.
type ProjectsV1Server interface {
	// List projects
	ListProjects(context.Context, *OwnerResouceListRequest) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// List project namess
	ListProjectNames(context.Context, *OwnerResouceListRequest) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(context.Context, *UserResouceListRequest) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(context.Context, *UserResouceListRequest) (*ListProjectsResponse, error)
	// Get project
	GetProject(context.Context, *ProjectResourceRequest) (*Project, error)
	// Update project
	UpdateProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Patch project
	PatchProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Delete project
	DeleteProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Archive project
	ArchiveProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Restore project
	RestoreProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Unbookmark project
	UnbookmarkProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Enable project CI
	EnableProjectCI(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Disbale project CI
	DisableProjectCI(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
}

// UnimplementedProjectsV1Server can be embedded to have forward compatible implementations.
type UnimplementedProjectsV1Server struct {
}

func (*UnimplementedProjectsV1Server) ListProjects(ctx context.Context, req *OwnerResouceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedProjectsV1Server) CreateProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectsV1Server) ListProjectNames(ctx context.Context, req *OwnerResouceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectNames not implemented")
}
func (*UnimplementedProjectsV1Server) ListBookmarkedProjects(ctx context.Context, req *UserResouceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedProjects not implemented")
}
func (*UnimplementedProjectsV1Server) ListArchivedProjects(ctx context.Context, req *UserResouceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedProjects not implemented")
}
func (*UnimplementedProjectsV1Server) GetProject(ctx context.Context, req *ProjectResourceRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedProjectsV1Server) UpdateProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedProjectsV1Server) PatchProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProject not implemented")
}
func (*UnimplementedProjectsV1Server) DeleteProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedProjectsV1Server) ArchiveProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (*UnimplementedProjectsV1Server) RestoreProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProject not implemented")
}
func (*UnimplementedProjectsV1Server) BookmarkProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkProject not implemented")
}
func (*UnimplementedProjectsV1Server) UnbookmarkProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookmarkProject not implemented")
}
func (*UnimplementedProjectsV1Server) EnableProjectCI(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProjectCI not implemented")
}
func (*UnimplementedProjectsV1Server) DisableProjectCI(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProjectCI not implemented")
}

func RegisterProjectsV1Server(s *grpc.Server, srv ProjectsV1Server) {
	s.RegisterService(&_ProjectsV1_serviceDesc, srv)
}

func _ProjectsV1_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListProjects(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).CreateProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListProjectNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListProjectNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListBookmarkedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListBookmarkedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListBookmarkedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListBookmarkedProjects(ctx, req.(*UserResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListArchivedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListArchivedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListArchivedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListArchivedProjects(ctx, req.(*UserResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).GetProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UpdateProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).PatchProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).DeleteProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ArchiveProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_RestoreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).RestoreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/RestoreProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).RestoreProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_BookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).BookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/BookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).BookmarkProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UnbookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UnbookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UnbookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UnbookmarkProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_EnableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).EnableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/EnableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).EnableProjectCI(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_DisableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).DisableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/DisableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).DisableProjectCI(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProjectsV1",
	HandlerType: (*ProjectsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _ProjectsV1_ListProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectsV1_CreateProject_Handler,
		},
		{
			MethodName: "ListProjectNames",
			Handler:    _ProjectsV1_ListProjectNames_Handler,
		},
		{
			MethodName: "ListBookmarkedProjects",
			Handler:    _ProjectsV1_ListBookmarkedProjects_Handler,
		},
		{
			MethodName: "ListArchivedProjects",
			Handler:    _ProjectsV1_ListArchivedProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectsV1_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectsV1_UpdateProject_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _ProjectsV1_PatchProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectsV1_DeleteProject_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _ProjectsV1_ArchiveProject_Handler,
		},
		{
			MethodName: "RestoreProject",
			Handler:    _ProjectsV1_RestoreProject_Handler,
		},
		{
			MethodName: "BookmarkProject",
			Handler:    _ProjectsV1_BookmarkProject_Handler,
		},
		{
			MethodName: "UnbookmarkProject",
			Handler:    _ProjectsV1_UnbookmarkProject_Handler,
		},
		{
			MethodName: "EnableProjectCI",
			Handler:    _ProjectsV1_EnableProjectCI_Handler,
		},
		{
			MethodName: "DisableProjectCI",
			Handler:    _ProjectsV1_DisableProjectCI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ArtifactsStoresV1Client is the client API for ArtifactsStoresV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArtifactsStoresV1Client interface {
	// List artifact stores namess
	ListArtifactsStoreNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error)
	// List artifact stores
	ListArtifactsStores(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error)
	// Create artifact store
	CreateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Get artifact store
	GetArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Update artifact store
	UpdateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Patch artifact store
	PatchArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Delete artifact store
	DeleteArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type artifactsStoresV1Client struct {
	cc *grpc.ClientConn
}

func NewArtifactsStoresV1Client(cc *grpc.ClientConn) ArtifactsStoresV1Client {
	return &artifactsStoresV1Client{cc}
}

func (c *artifactsStoresV1Client) ListArtifactsStoreNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error) {
	out := new(ListArtifactsStoresResponse)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/ListArtifactsStoreNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) ListArtifactsStores(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error) {
	out := new(ListArtifactsStoresResponse)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/ListArtifactsStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) CreateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/CreateArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) GetArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/GetArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) UpdateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/UpdateArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) PatchArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/PatchArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) DeleteArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/DeleteArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactsStoresV1Server is the server API for ArtifactsStoresV1 service.
type ArtifactsStoresV1Server interface {
	// List artifact stores namess
	ListArtifactsStoreNames(context.Context, *OwnerResouceListRequest) (*ListArtifactsStoresResponse, error)
	// List artifact stores
	ListArtifactsStores(context.Context, *OwnerResouceListRequest) (*ListArtifactsStoresResponse, error)
	// Create artifact store
	CreateArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Get artifact store
	GetArtifactsStore(context.Context, *OwnerEntityResourceRequest) (*ArtifactsStore, error)
	// Update artifact store
	UpdateArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Patch artifact store
	PatchArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Delete artifact store
	DeleteArtifactsStore(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedArtifactsStoresV1Server can be embedded to have forward compatible implementations.
type UnimplementedArtifactsStoresV1Server struct {
}

func (*UnimplementedArtifactsStoresV1Server) ListArtifactsStoreNames(ctx context.Context, req *OwnerResouceListRequest) (*ListArtifactsStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifactsStoreNames not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) ListArtifactsStores(ctx context.Context, req *OwnerResouceListRequest) (*ListArtifactsStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifactsStores not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) CreateArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) GetArtifactsStore(ctx context.Context, req *OwnerEntityResourceRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) UpdateArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) PatchArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) DeleteArtifactsStore(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactsStore not implemented")
}

func RegisterArtifactsStoresV1Server(s *grpc.Server, srv ArtifactsStoresV1Server) {
	s.RegisterService(&_ArtifactsStoresV1_serviceDesc, srv)
}

func _ArtifactsStoresV1_ListArtifactsStoreNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStoreNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/ListArtifactsStoreNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStoreNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_ListArtifactsStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/ListArtifactsStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStores(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_CreateArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).CreateArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/CreateArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).CreateArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_GetArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).GetArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/GetArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).GetArtifactsStore(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_UpdateArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).UpdateArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/UpdateArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).UpdateArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_PatchArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).PatchArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/PatchArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).PatchArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_DeleteArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).DeleteArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/DeleteArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).DeleteArtifactsStore(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArtifactsStoresV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ArtifactsStoresV1",
	HandlerType: (*ArtifactsStoresV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArtifactsStoreNames",
			Handler:    _ArtifactsStoresV1_ListArtifactsStoreNames_Handler,
		},
		{
			MethodName: "ListArtifactsStores",
			Handler:    _ArtifactsStoresV1_ListArtifactsStores_Handler,
		},
		{
			MethodName: "CreateArtifactsStore",
			Handler:    _ArtifactsStoresV1_CreateArtifactsStore_Handler,
		},
		{
			MethodName: "GetArtifactsStore",
			Handler:    _ArtifactsStoresV1_GetArtifactsStore_Handler,
		},
		{
			MethodName: "UpdateArtifactsStore",
			Handler:    _ArtifactsStoresV1_UpdateArtifactsStore_Handler,
		},
		{
			MethodName: "PatchArtifactsStore",
			Handler:    _ArtifactsStoresV1_PatchArtifactsStore_Handler,
		},
		{
			MethodName: "DeleteArtifactsStore",
			Handler:    _ArtifactsStoresV1_DeleteArtifactsStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// K8SConfigMapsV1Client is the client API for K8SConfigMapsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type K8SConfigMapsV1Client interface {
	// List k8s config map namess
	ListK8SConfigMapNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// List k8s config maps
	ListK8SConfigMaps(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// Create k8s config map
	CreateK8SConfigMaps(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Get k8s config map
	GetK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Update k8s config map
	UpdateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Patch k8s config map
	PatchK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type k8SConfigMapsV1Client struct {
	cc *grpc.ClientConn
}

func NewK8SConfigMapsV1Client(cc *grpc.ClientConn) K8SConfigMapsV1Client {
	return &k8SConfigMapsV1Client{cc}
}

func (c *k8SConfigMapsV1Client) ListK8SConfigMapNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/ListK8sConfigMapNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) ListK8SConfigMaps(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/ListK8sConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) CreateK8SConfigMaps(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/CreateK8sConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) GetK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/GetK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) UpdateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/UpdateK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) PatchK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/PatchK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) DeleteK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/DeleteK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SConfigMapsV1Server is the server API for K8SConfigMapsV1 service.
type K8SConfigMapsV1Server interface {
	// List k8s config map namess
	ListK8SConfigMapNames(context.Context, *OwnerResouceListRequest) (*ListK8SResourcesResponse, error)
	// List k8s config maps
	ListK8SConfigMaps(context.Context, *OwnerResouceListRequest) (*ListK8SResourcesResponse, error)
	// Create k8s config map
	CreateK8SConfigMaps(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Get k8s config map
	GetK8SConfigMap(context.Context, *OwnerEntityResourceRequest) (*K8SResource, error)
	// Update k8s config map
	UpdateK8SConfigMap(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Patch k8s config map
	PatchK8SConfigMap(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SConfigMap(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedK8SConfigMapsV1Server can be embedded to have forward compatible implementations.
type UnimplementedK8SConfigMapsV1Server struct {
}

func (*UnimplementedK8SConfigMapsV1Server) ListK8SConfigMapNames(ctx context.Context, req *OwnerResouceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SConfigMapNames not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) ListK8SConfigMaps(ctx context.Context, req *OwnerResouceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SConfigMaps not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) CreateK8SConfigMaps(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SConfigMaps not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) GetK8SConfigMap(ctx context.Context, req *OwnerEntityResourceRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) UpdateK8SConfigMap(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) PatchK8SConfigMap(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) DeleteK8SConfigMap(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SConfigMap not implemented")
}

func RegisterK8SConfigMapsV1Server(s *grpc.Server, srv K8SConfigMapsV1Server) {
	s.RegisterService(&_K8SConfigMapsV1_serviceDesc, srv)
}

func _K8SConfigMapsV1_ListK8SConfigMapNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMapNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/ListK8SConfigMapNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMapNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_ListK8SConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/ListK8SConfigMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMaps(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_CreateK8SConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).CreateK8SConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/CreateK8SConfigMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).CreateK8SConfigMaps(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_GetK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).GetK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/GetK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).GetK8SConfigMap(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_UpdateK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).UpdateK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/UpdateK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).UpdateK8SConfigMap(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_PatchK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).PatchK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/PatchK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).PatchK8SConfigMap(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_DeleteK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).DeleteK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/DeleteK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).DeleteK8SConfigMap(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _K8SConfigMapsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.K8sConfigMapsV1",
	HandlerType: (*K8SConfigMapsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListK8sConfigMapNames",
			Handler:    _K8SConfigMapsV1_ListK8SConfigMapNames_Handler,
		},
		{
			MethodName: "ListK8sConfigMaps",
			Handler:    _K8SConfigMapsV1_ListK8SConfigMaps_Handler,
		},
		{
			MethodName: "CreateK8sConfigMaps",
			Handler:    _K8SConfigMapsV1_CreateK8SConfigMaps_Handler,
		},
		{
			MethodName: "GetK8sConfigMap",
			Handler:    _K8SConfigMapsV1_GetK8SConfigMap_Handler,
		},
		{
			MethodName: "UpdateK8sConfigMap",
			Handler:    _K8SConfigMapsV1_UpdateK8SConfigMap_Handler,
		},
		{
			MethodName: "PatchK8sConfigMap",
			Handler:    _K8SConfigMapsV1_PatchK8SConfigMap_Handler,
		},
		{
			MethodName: "DeleteK8sConfigMap",
			Handler:    _K8SConfigMapsV1_DeleteK8SConfigMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// K8SSecretsV1Client is the client API for K8SSecretsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type K8SSecretsV1Client interface {
	// List k8s secret namess
	ListK8SSecretNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// List k8s secrets
	ListK8SSecrets(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// Create k8s secret
	CreateK8SSecrets(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Get k8s secret
	GetK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Update k8s secret
	UpdateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Patch k8s secret
	PatchK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type k8SSecretsV1Client struct {
	cc *grpc.ClientConn
}

func NewK8SSecretsV1Client(cc *grpc.ClientConn) K8SSecretsV1Client {
	return &k8SSecretsV1Client{cc}
}

func (c *k8SSecretsV1Client) ListK8SSecretNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/ListK8sSecretNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) ListK8SSecrets(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/ListK8sSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) CreateK8SSecrets(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/CreateK8sSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) GetK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/GetK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) UpdateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/UpdateK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) PatchK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/PatchK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) DeleteK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/DeleteK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SSecretsV1Server is the server API for K8SSecretsV1 service.
type K8SSecretsV1Server interface {
	// List k8s secret namess
	ListK8SSecretNames(context.Context, *OwnerResouceListRequest) (*ListK8SResourcesResponse, error)
	// List k8s secrets
	ListK8SSecrets(context.Context, *OwnerResouceListRequest) (*ListK8SResourcesResponse, error)
	// Create k8s secret
	CreateK8SSecrets(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Get k8s secret
	GetK8SSecret(context.Context, *OwnerEntityResourceRequest) (*K8SResource, error)
	// Update k8s secret
	UpdateK8SSecret(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Patch k8s secret
	PatchK8SSecret(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SSecret(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedK8SSecretsV1Server can be embedded to have forward compatible implementations.
type UnimplementedK8SSecretsV1Server struct {
}

func (*UnimplementedK8SSecretsV1Server) ListK8SSecretNames(ctx context.Context, req *OwnerResouceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SSecretNames not implemented")
}
func (*UnimplementedK8SSecretsV1Server) ListK8SSecrets(ctx context.Context, req *OwnerResouceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SSecrets not implemented")
}
func (*UnimplementedK8SSecretsV1Server) CreateK8SSecrets(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SSecrets not implemented")
}
func (*UnimplementedK8SSecretsV1Server) GetK8SSecret(ctx context.Context, req *OwnerEntityResourceRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) UpdateK8SSecret(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) PatchK8SSecret(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) DeleteK8SSecret(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SSecret not implemented")
}

func RegisterK8SSecretsV1Server(s *grpc.Server, srv K8SSecretsV1Server) {
	s.RegisterService(&_K8SSecretsV1_serviceDesc, srv)
}

func _K8SSecretsV1_ListK8SSecretNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).ListK8SSecretNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/ListK8SSecretNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).ListK8SSecretNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_ListK8SSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).ListK8SSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/ListK8SSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).ListK8SSecrets(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_CreateK8SSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).CreateK8SSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/CreateK8SSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).CreateK8SSecrets(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_GetK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).GetK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/GetK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).GetK8SSecret(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_UpdateK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).UpdateK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/UpdateK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).UpdateK8SSecret(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_PatchK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).PatchK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/PatchK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).PatchK8SSecret(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_DeleteK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).DeleteK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/DeleteK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).DeleteK8SSecret(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _K8SSecretsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.K8sSecretsV1",
	HandlerType: (*K8SSecretsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListK8sSecretNames",
			Handler:    _K8SSecretsV1_ListK8SSecretNames_Handler,
		},
		{
			MethodName: "ListK8sSecrets",
			Handler:    _K8SSecretsV1_ListK8SSecrets_Handler,
		},
		{
			MethodName: "CreateK8sSecrets",
			Handler:    _K8SSecretsV1_CreateK8SSecrets_Handler,
		},
		{
			MethodName: "GetK8sSecret",
			Handler:    _K8SSecretsV1_GetK8SSecret_Handler,
		},
		{
			MethodName: "UpdateK8sSecret",
			Handler:    _K8SSecretsV1_UpdateK8SSecret_Handler,
		},
		{
			MethodName: "PatchK8sSecret",
			Handler:    _K8SSecretsV1_PatchK8SSecret_Handler,
		},
		{
			MethodName: "DeleteK8sSecret",
			Handler:    _K8SSecretsV1_DeleteK8SSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// RegistryAccessesV1Client is the client API for RegistryAccessesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryAccessesV1Client interface {
	// List registry access names
	ListRegistryAccessNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// List registry access
	ListRegistryAccesses(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// Create registry access
	CreateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Get registry access
	GetRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Update registry access
	UpdateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Patch registry access
	PatchRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Delete registry access
	DeleteRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type registryAccessesV1Client struct {
	cc *grpc.ClientConn
}

func NewRegistryAccessesV1Client(cc *grpc.ClientConn) RegistryAccessesV1Client {
	return &registryAccessesV1Client{cc}
}

func (c *registryAccessesV1Client) ListRegistryAccessNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/ListRegistryAccessNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) ListRegistryAccesses(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/ListRegistryAccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) CreateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/CreateRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) GetRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/GetRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) UpdateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/UpdateRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) PatchRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/PatchRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) DeleteRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/DeleteRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryAccessesV1Server is the server API for RegistryAccessesV1 service.
type RegistryAccessesV1Server interface {
	// List registry access names
	ListRegistryAccessNames(context.Context, *OwnerResouceListRequest) (*ListHostAccessesResponse, error)
	// List registry access
	ListRegistryAccesses(context.Context, *OwnerResouceListRequest) (*ListHostAccessesResponse, error)
	// Create registry access
	CreateRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Get registry access
	GetRegistryAccess(context.Context, *OwnerEntityResourceRequest) (*HostAccess, error)
	// Update registry access
	UpdateRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Patch registry access
	PatchRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Delete registry access
	DeleteRegistryAccess(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedRegistryAccessesV1Server can be embedded to have forward compatible implementations.
type UnimplementedRegistryAccessesV1Server struct {
}

func (*UnimplementedRegistryAccessesV1Server) ListRegistryAccessNames(ctx context.Context, req *OwnerResouceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryAccessNames not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) ListRegistryAccesses(ctx context.Context, req *OwnerResouceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryAccesses not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) CreateRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) GetRegistryAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) UpdateRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) PatchRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) DeleteRegistryAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistryAccess not implemented")
}

func RegisterRegistryAccessesV1Server(s *grpc.Server, srv RegistryAccessesV1Server) {
	s.RegisterService(&_RegistryAccessesV1_serviceDesc, srv)
}

func _RegistryAccessesV1_ListRegistryAccessNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).ListRegistryAccessNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/ListRegistryAccessNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).ListRegistryAccessNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_ListRegistryAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).ListRegistryAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/ListRegistryAccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).ListRegistryAccesses(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_CreateRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).CreateRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/CreateRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).CreateRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_GetRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).GetRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/GetRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).GetRegistryAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_UpdateRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).UpdateRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/UpdateRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).UpdateRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_PatchRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).PatchRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/PatchRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).PatchRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_DeleteRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).DeleteRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/DeleteRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).DeleteRegistryAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryAccessesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RegistryAccessesV1",
	HandlerType: (*RegistryAccessesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegistryAccessNames",
			Handler:    _RegistryAccessesV1_ListRegistryAccessNames_Handler,
		},
		{
			MethodName: "ListRegistryAccesses",
			Handler:    _RegistryAccessesV1_ListRegistryAccesses_Handler,
		},
		{
			MethodName: "CreateRegistryAccess",
			Handler:    _RegistryAccessesV1_CreateRegistryAccess_Handler,
		},
		{
			MethodName: "GetRegistryAccess",
			Handler:    _RegistryAccessesV1_GetRegistryAccess_Handler,
		},
		{
			MethodName: "UpdateRegistryAccess",
			Handler:    _RegistryAccessesV1_UpdateRegistryAccess_Handler,
		},
		{
			MethodName: "PatchRegistryAccess",
			Handler:    _RegistryAccessesV1_PatchRegistryAccess_Handler,
		},
		{
			MethodName: "DeleteRegistryAccess",
			Handler:    _RegistryAccessesV1_DeleteRegistryAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// GitAccessesV1Client is the client API for GitAccessesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitAccessesV1Client interface {
	// List git access names
	ListGitAccessNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// List git accesses
	ListGitAccesses(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// Create git accesses
	CreateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Get git access
	GetGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Update git access
	UpdateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Patch git access
	PatchGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Delete git access
	DeleteGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gitAccessesV1Client struct {
	cc *grpc.ClientConn
}

func NewGitAccessesV1Client(cc *grpc.ClientConn) GitAccessesV1Client {
	return &gitAccessesV1Client{cc}
}

func (c *gitAccessesV1Client) ListGitAccessNames(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/ListGitAccessNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) ListGitAccesses(ctx context.Context, in *OwnerResouceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/ListGitAccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) CreateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/CreateGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) GetGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/GetGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) UpdateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/UpdateGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) PatchGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/PatchGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) DeleteGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/DeleteGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitAccessesV1Server is the server API for GitAccessesV1 service.
type GitAccessesV1Server interface {
	// List git access names
	ListGitAccessNames(context.Context, *OwnerResouceListRequest) (*ListHostAccessesResponse, error)
	// List git accesses
	ListGitAccesses(context.Context, *OwnerResouceListRequest) (*ListHostAccessesResponse, error)
	// Create git accesses
	CreateGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Get git access
	GetGitAccess(context.Context, *OwnerEntityResourceRequest) (*HostAccess, error)
	// Update git access
	UpdateGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Patch git access
	PatchGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Delete git access
	DeleteGitAccess(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedGitAccessesV1Server can be embedded to have forward compatible implementations.
type UnimplementedGitAccessesV1Server struct {
}

func (*UnimplementedGitAccessesV1Server) ListGitAccessNames(ctx context.Context, req *OwnerResouceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitAccessNames not implemented")
}
func (*UnimplementedGitAccessesV1Server) ListGitAccesses(ctx context.Context, req *OwnerResouceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitAccesses not implemented")
}
func (*UnimplementedGitAccessesV1Server) CreateGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) GetGitAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) UpdateGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) PatchGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) DeleteGitAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitAccess not implemented")
}

func RegisterGitAccessesV1Server(s *grpc.Server, srv GitAccessesV1Server) {
	s.RegisterService(&_GitAccessesV1_serviceDesc, srv)
}

func _GitAccessesV1_ListGitAccessNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).ListGitAccessNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/ListGitAccessNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).ListGitAccessNames(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_ListGitAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResouceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).ListGitAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/ListGitAccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).ListGitAccesses(ctx, req.(*OwnerResouceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_CreateGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).CreateGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/CreateGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).CreateGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_GetGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).GetGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/GetGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).GetGitAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_UpdateGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).UpdateGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/UpdateGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).UpdateGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_PatchGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).PatchGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/PatchGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).PatchGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_DeleteGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).DeleteGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/DeleteGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).DeleteGitAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitAccessesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GitAccessesV1",
	HandlerType: (*GitAccessesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGitAccessNames",
			Handler:    _GitAccessesV1_ListGitAccessNames_Handler,
		},
		{
			MethodName: "ListGitAccesses",
			Handler:    _GitAccessesV1_ListGitAccesses_Handler,
		},
		{
			MethodName: "CreateGitAccess",
			Handler:    _GitAccessesV1_CreateGitAccess_Handler,
		},
		{
			MethodName: "GetGitAccess",
			Handler:    _GitAccessesV1_GetGitAccess_Handler,
		},
		{
			MethodName: "UpdateGitAccess",
			Handler:    _GitAccessesV1_UpdateGitAccess_Handler,
		},
		{
			MethodName: "PatchGitAccess",
			Handler:    _GitAccessesV1_PatchGitAccess_Handler,
		},
		{
			MethodName: "DeleteGitAccess",
			Handler:    _GitAccessesV1_DeleteGitAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// SearchV1Client is the client API for SearchV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchV1Client interface {
	// List searches
	ListSearches(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error)
	// Create search
	CreateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Get search
	GetSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Search, error)
	// Update search
	UpdateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Patch search
	PatchSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Delete search
	DeleteSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type searchV1Client struct {
	cc *grpc.ClientConn
}

func NewSearchV1Client(cc *grpc.ClientConn) SearchV1Client {
	return &searchV1Client{cc}
}

func (c *searchV1Client) ListSearches(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error) {
	out := new(ListSearchesResponse)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/ListSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) CreateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/CreateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) GetSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/GetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) UpdateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/UpdateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) PatchSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/PatchSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchV1Client) DeleteSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.SearchV1/DeleteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchV1Server is the server API for SearchV1 service.
type SearchV1Server interface {
	// List searches
	ListSearches(context.Context, *ProjectResourceListRequest) (*ListSearchesResponse, error)
	// Create search
	CreateSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Get search
	GetSearch(context.Context, *ProjectEntityResourceRequest) (*Search, error)
	// Update search
	UpdateSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Patch search
	PatchSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Delete search
	DeleteSearch(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedSearchV1Server can be embedded to have forward compatible implementations.
type UnimplementedSearchV1Server struct {
}

func (*UnimplementedSearchV1Server) ListSearches(ctx context.Context, req *ProjectResourceListRequest) (*ListSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearches not implemented")
}
func (*UnimplementedSearchV1Server) CreateSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSearch not implemented")
}
func (*UnimplementedSearchV1Server) GetSearch(ctx context.Context, req *ProjectEntityResourceRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (*UnimplementedSearchV1Server) UpdateSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSearch not implemented")
}
func (*UnimplementedSearchV1Server) PatchSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSearch not implemented")
}
func (*UnimplementedSearchV1Server) DeleteSearch(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearch not implemented")
}

func RegisterSearchV1Server(s *grpc.Server, srv SearchV1Server) {
	s.RegisterService(&_SearchV1_serviceDesc, srv)
}

func _SearchV1_ListSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).ListSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/ListSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).ListSearches(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_CreateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).CreateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/CreateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).CreateSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/GetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).GetSearch(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_UpdateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).UpdateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/UpdateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).UpdateSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_PatchSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).PatchSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/PatchSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).PatchSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchV1_DeleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchV1Server).DeleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchV1/DeleteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchV1Server).DeleteSearch(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SearchV1",
	HandlerType: (*SearchV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSearches",
			Handler:    _SearchV1_ListSearches_Handler,
		},
		{
			MethodName: "CreateSearch",
			Handler:    _SearchV1_CreateSearch_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _SearchV1_GetSearch_Handler,
		},
		{
			MethodName: "UpdateSearch",
			Handler:    _SearchV1_UpdateSearch_Handler,
		},
		{
			MethodName: "PatchSearch",
			Handler:    _SearchV1_PatchSearch_Handler,
		},
		{
			MethodName: "DeleteSearch",
			Handler:    _SearchV1_DeleteSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// AuthV1Client is the client API for AuthV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthV1Client interface {
	// Login
	Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error)
}

type authV1Client struct {
	cc *grpc.ClientConn
}

func NewAuthV1Client(cc *grpc.ClientConn) AuthV1Client {
	return &authV1Client{cc}
}

func (c *authV1Client) Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/v1.AuthV1/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV1Server is the server API for AuthV1 service.
type AuthV1Server interface {
	// Login
	Login(context.Context, *CredsBodyRequest) (*Auth, error)
}

// UnimplementedAuthV1Server can be embedded to have forward compatible implementations.
type UnimplementedAuthV1Server struct {
}

func (*UnimplementedAuthV1Server) Login(ctx context.Context, req *CredsBodyRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterAuthV1Server(s *grpc.Server, srv AuthV1Server) {
	s.RegisterService(&_AuthV1_serviceDesc, srv)
}

func _AuthV1_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthV1/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).Login(ctx, req.(*CredsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthV1",
	HandlerType: (*AuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthV1_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// UsersV1Client is the client API for UsersV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersV1Client interface {
	// Get current user
	GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error)
}

type usersV1Client struct {
	cc *grpc.ClientConn
}

func NewUsersV1Client(cc *grpc.ClientConn) UsersV1Client {
	return &usersV1Client{cc}
}

func (c *usersV1Client) GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UsersV1/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersV1Server is the server API for UsersV1 service.
type UsersV1Server interface {
	// Get current user
	GetUser(context.Context, *empty.Empty) (*User, error)
}

// UnimplementedUsersV1Server can be embedded to have forward compatible implementations.
type UnimplementedUsersV1Server struct {
}

func (*UnimplementedUsersV1Server) GetUser(ctx context.Context, req *empty.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterUsersV1Server(s *grpc.Server, srv UsersV1Server) {
	s.RegisterService(&_UsersV1_serviceDesc, srv)
}

func _UsersV1_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersV1/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).GetUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UsersV1",
	HandlerType: (*UsersV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UsersV1_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// VersionsV1Client is the client API for VersionsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionsV1Client interface {
	// Get versions
	GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error)
	// Get log handler
	GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error)
}

type versionsV1Client struct {
	cc *grpc.ClientConn
}

func NewVersionsV1Client(cc *grpc.ClientConn) VersionsV1Client {
	return &versionsV1Client{cc}
}

func (c *versionsV1Client) GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error) {
	out := new(Versions)
	err := c.cc.Invoke(ctx, "/v1.VersionsV1/GetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionsV1Client) GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error) {
	out := new(LogHandler)
	err := c.cc.Invoke(ctx, "/v1.VersionsV1/GetLogHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionsV1Server is the server API for VersionsV1 service.
type VersionsV1Server interface {
	// Get versions
	GetVersions(context.Context, *empty.Empty) (*Versions, error)
	// Get log handler
	GetLogHandler(context.Context, *empty.Empty) (*LogHandler, error)
}

// UnimplementedVersionsV1Server can be embedded to have forward compatible implementations.
type UnimplementedVersionsV1Server struct {
}

func (*UnimplementedVersionsV1Server) GetVersions(ctx context.Context, req *empty.Empty) (*Versions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersions not implemented")
}
func (*UnimplementedVersionsV1Server) GetLogHandler(ctx context.Context, req *empty.Empty) (*LogHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogHandler not implemented")
}

func RegisterVersionsV1Server(s *grpc.Server, srv VersionsV1Server) {
	s.RegisterService(&_VersionsV1_serviceDesc, srv)
}

func _VersionsV1_GetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsV1Server).GetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionsV1/GetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsV1Server).GetVersions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionsV1_GetLogHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsV1Server).GetLogHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionsV1/GetLogHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsV1Server).GetLogHandler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VersionsV1",
	HandlerType: (*VersionsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersions",
			Handler:    _VersionsV1_GetVersions_Handler,
		},
		{
			MethodName: "GetLogHandler",
			Handler:    _VersionsV1_GetLogHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}
