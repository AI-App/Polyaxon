// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/polyaxon_sdk.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	schemas "v1/schemas"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("v1/polyaxon_sdk.proto", fileDescriptor_5f2d65d1ab5d9ce0) }

var fileDescriptor_5f2d65d1ab5d9ce0 = []byte{
	// 4146 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x9c, 0x4b, 0x77, 0xdb, 0x48,
	0x76, 0x80, 0x03, 0xf5, 0x58, 0x8f, 0xab, 0x77, 0xe9, 0xd1, 0x6a, 0xca, 0x0f, 0x1a, 0x76, 0xbf,
	0xd8, 0x36, 0x29, 0xc2, 0xee, 0xb6, 0x86, 0x33, 0xce, 0x8c, 0x2c, 0x3b, 0xb2, 0xdb, 0xcf, 0x91,
	0x6c, 0x67, 0x32, 0x59, 0xa8, 0x21, 0xb2, 0x44, 0xb2, 0x25, 0x02, 0x34, 0x00, 0xd2, 0x96, 0x35,
	0x72, 0xb7, 0xdd, 0xed, 0x76, 0x4f, 0xe6, 0x24, 0xa7, 0x3d, 0xb3, 0xc9, 0x39, 0x39, 0xc9, 0x5f,
	0x48, 0xce, 0xc9, 0x3a, 0xbf, 0x20, 0xab, 0x24, 0xeb, 0x9c, 0x93, 0x45, 0x36, 0xd9, 0xe4, 0x0f,
	0x64, 0x91, 0x1c, 0xd4, 0x8b, 0x05, 0x82, 0x00, 0x8a, 0x84, 0x32, 0x2b, 0x09, 0x05, 0xe0, 0x7e,
	0xb7, 0x6e, 0xd5, 0xad, 0xba, 0x75, 0x51, 0x45, 0x58, 0x68, 0x17, 0x0b, 0x4d, 0x7b, 0xff, 0xc0,
	0x7c, 0x66, 0x5b, 0xdb, 0x6e, 0x65, 0x2f, 0xdf, 0x74, 0x6c, 0xcf, 0x46, 0x43, 0xed, 0x62, 0xe6,
	0x64, 0xd5, 0xb6, 0xab, 0xfb, 0xb8, 0x60, 0x36, 0xeb, 0x05, 0xd3, 0xb2, 0x6c, 0xcf, 0xf4, 0xea,
	0xb6, 0xe5, 0xd2, 0x27, 0x32, 0xcb, 0xec, 0x2e, 0xb9, 0xda, 0x69, 0xed, 0x16, 0x70, 0xa3, 0xe9,
	0x1d, 0xb0, 0x9b, 0x17, 0xc8, 0x9f, 0xf2, 0xc5, 0x2a, 0xb6, 0x2e, 0xba, 0x4f, 0xcd, 0x6a, 0x15,
	0x3b, 0x05, 0xbb, 0x49, 0x5e, 0xef, 0x21, 0x6a, 0xaa, 0x5d, 0x2c, 0x98, 0x55, 0x6c, 0x79, 0xec,
	0x7a, 0xc9, 0xbf, 0x76, 0xbc, 0xfa, 0xae, 0x59, 0xf6, 0xdc, 0x6d, 0xd7, 0xb3, 0x1d, 0xcc, 0xee,
	0xa0, 0x76, 0xb1, 0x50, 0x31, 0xdd, 0xda, 0x8e, 0x6d, 0x3a, 0x15, 0x56, 0x36, 0xdf, 0x2e, 0x16,
	0x6a, 0xb6, 0xeb, 0x6d, 0x9b, 0xe5, 0x32, 0x76, 0xb9, 0x4c, 0xbf, 0x5e, 0x7b, 0xab, 0xee, 0xb6,
	0x83, 0x5d, 0xbb, 0xe5, 0x94, 0xb9, 0x80, 0xc9, 0x76, 0xb1, 0xb0, 0x63, 0xba, 0xfc, 0x72, 0xb6,
	0x5d, 0x2c, 0x94, 0xed, 0x0a, 0xde, 0x76, 0xf0, 0x2e, 0x2b, 0x9a, 0x68, 0x17, 0x0b, 0x4e, 0xcb,
	0x92, 0xc4, 0xd8, 0x4e, 0xd5, 0xb4, 0xea, 0xcf, 0x89, 0xca, 0xac, 0x78, 0xc6, 0xb7, 0x9a, 0x63,
	0x7f, 0x89, 0xcb, 0x9e, 0x54, 0xd2, 0xc6, 0x8e, 0xdb, 0x79, 0xc6, 0x47, 0x99, 0x2d, 0xaf, 0x26,
	0xa9, 0xe9, 0xb4, 0xac, 0xed, 0xa6, 0x63, 0xef, 0xd6, 0xf7, 0x65, 0x7d, 0x5a, 0x2e, 0x76, 0xd8,
	0xe5, 0x74, 0xbb, 0x58, 0x70, 0xb1, 0xe9, 0x94, 0x6b, 0x72, 0x81, 0x67, 0x7a, 0x2d, 0x57, 0x7a,
	0xc1, 0xc3, 0x66, 0x43, 0x92, 0xea, 0x96, 0x6b, 0xb8, 0x61, 0xba, 0x05, 0x73, 0x7f, 0x9f, 0x96,
	0x1a, 0xff, 0xbb, 0x0c, 0xc3, 0x9b, 0x2d, 0xcb, 0x7d, 0x5c, 0x44, 0x16, 0xa0, 0x3b, 0x75, 0xd7,
	0xbb, 0x66, 0xdb, 0x7b, 0x0d, 0xd3, 0xd9, 0xc3, 0x15, 0xbf, 0x1c, 0x2d, 0xe7, 0xdb, 0xc5, 0xfc,
	0x23, 0x17, 0x3b, 0x9b, 0xcc, 0x3c, 0xfe, 0x33, 0x9b, 0xf8, 0x49, 0x0b, 0xbb, 0x5e, 0x66, 0xde,
	0xbf, 0x49, 0x0a, 0x5a, 0x96, 0xbb, 0x89, 0xdd, 0xa6, 0x6d, 0xb9, 0x58, 0x7f, 0xff, 0xd5, 0xbf,
	0xfd, 0xe7, 0xef, 0x87, 0xce, 0xa0, 0x53, 0xa4, 0x3f, 0xf8, 0x66, 0x64, 0x22, 0xdd, 0xc2, 0xa1,
	0x5f, 0x83, 0x23, 0xbf, 0x76, 0x2e, 0xda, 0x83, 0x19, 0xff, 0xd5, 0x35, 0xa7, 0x5c, 0xab, 0xb7,
	0x07, 0xa7, 0x9d, 0x27, 0xb4, 0xd3, 0xe8, 0x24, 0xa7, 0x99, 0x54, 0x60, 0x10, 0x56, 0x83, 0x51,
	0xfe, 0x26, 0x3a, 0xed, 0xcb, 0x79, 0x40, 0xdb, 0x44, 0x9d, 0xf3, 0x01, 0xe1, 0x64, 0xd1, 0x69,
	0xce, 0x39, 0xb4, 0x9f, 0x5a, 0xbe, 0xfc, 0x43, 0xd6, 0xbc, 0x8c, 0xf4, 0x08, 0xc6, 0xd6, 0x1d,
	0x6c, 0x7a, 0x78, 0xb3, 0x65, 0x21, 0xe4, 0x8b, 0xda, 0x6c, 0x59, 0xd7, 0xec, 0xca, 0x01, 0x17,
	0x3f, 0xc2, 0xca, 0xf4, 0x4f, 0x88, 0xc4, 0xf7, 0xf5, 0x04, 0x89, 0xa5, 0x77, 0x9c, 0x96, 0x85,
	0x76, 0x60, 0x78, 0x03, 0xfb, 0x1a, 0xa1, 0xac, 0xa4, 0xfe, 0x0d, 0xcb, 0xab, 0x7b, 0x07, 0xbc,
	0x12, 0x21, 0xc2, 0x45, 0x42, 0xf8, 0x10, 0xbd, 0x1f, 0x4f, 0x28, 0x1c, 0xb6, 0x5a, 0xf5, 0xca,
	0x11, 0xfa, 0x02, 0xc6, 0x1e, 0x35, 0x2b, 0x2a, 0xaa, 0x7f, 0x46, 0x04, 0xaf, 0x64, 0x3e, 0x4e,
	0x12, 0xec, 0xfb, 0x07, 0x11, 0x4e, 0x6b, 0xb1, 0x0d, 0xa3, 0x0f, 0x4c, 0xaf, 0x5c, 0x53, 0x05,
	0x18, 0xfd, 0x02, 0x3c, 0x18, 0xbb, 0x8e, 0xf7, 0x31, 0xad, 0x42, 0xb2, 0xa5, 0x16, 0xf3, 0x74,
	0x6c, 0xca, 0xf3, 0xb1, 0x29, 0x7f, 0xc3, 0x1f, 0x9b, 0xb8, 0xe1, 0x72, 0x8a, 0x86, 0xfb, 0x0a,
	0x40, 0x50, 0x5d, 0x74, 0xae, 0x47, 0xff, 0x7a, 0xd4, 0xaa, 0x57, 0x5c, 0xb9, 0xa6, 0x51, 0xe4,
	0xcb, 0x84, 0x9c, 0x4f, 0x24, 0x57, 0x08, 0xaf, 0x74, 0xc2, 0x57, 0xc0, 0x45, 0x4f, 0x61, 0x64,
	0xcb, 0xb3, 0x9b, 0xe9, 0x2a, 0x6d, 0x10, 0xf4, 0x05, 0x3d, 0xa7, 0x54, 0xe9, 0x82, 0xeb, 0xd9,
	0x4d, 0x74, 0x08, 0xa3, 0x0c, 0x9c, 0xb2, 0xde, 0x1c, 0x7e, 0x2e, 0x01, 0xee, 0x53, 0x79, 0xad,
	0xbf, 0xd3, 0x60, 0xf2, 0x96, 0xd5, 0x36, 0xf7, 0xeb, 0xbc, 0xd3, 0x0e, 0x5e, 0xf9, 0x9f, 0x10,
	0xfe, 0xa7, 0xfa, 0x8a, 0x5a, 0xe5, 0xeb, 0x02, 0x5b, 0xd2, 0x72, 0xe8, 0x8d, 0x06, 0x53, 0x01,
	0x45, 0x52, 0x1a, 0x63, 0x95, 0x28, 0x63, 0xe8, 0x49, 0xbd, 0x5f, 0xd2, 0x82, 0x99, 0xe4, 0x39,
	0x8c, 0xac, 0xdb, 0xcd, 0x03, 0xdf, 0x16, 0x4b, 0xbe, 0x06, 0xcc, 0x08, 0x11, 0x5e, 0x76, 0x87,
	0x70, 0xfe, 0x44, 0xff, 0x99, 0xe0, 0x60, 0xf2, 0x7c, 0x9e, 0xe3, 0xd8, 0x65, 0x97, 0x09, 0x58,
	0x29, 0xb5, 0x44, 0xd9, 0x6e, 0x1e, 0x50, 0xdf, 0xfb, 0x5a, 0x03, 0xd8, 0xc4, 0xae, 0x67, 0x3a,
	0x9e, 0x22, 0xff, 0x3e, 0xe1, 0xdf, 0xd2, 0xaf, 0xa5, 0xe0, 0x3b, 0x94, 0x48, 0x55, 0x78, 0x01,
	0x63, 0x9b, 0xd8, 0x6d, 0x35, 0xb0, 0xa2, 0x02, 0xf7, 0x88, 0x02, 0x37, 0xf5, 0xb5, 0x74, 0x0a,
	0xb4, 0x1a, 0x98, 0xf2, 0x8f, 0x00, 0xd8, 0x7c, 0x96, 0xae, 0x37, 0x7e, 0x4a, 0xf4, 0x2a, 0xe8,
	0x17, 0xd5, 0x7a, 0x23, 0x9b, 0xf2, 0x7c, 0xbc, 0xdf, 0x00, 0xb6, 0xf3, 0x87, 0xc5, 0x3b, 0x94,
	0x89, 0xbe, 0x82, 0x71, 0x1e, 0x3d, 0xa4, 0xe3, 0xb3, 0xd1, 0x5f, 0xcf, 0xab, 0xf1, 0x79, 0x7c,
	0x81, 0xbe, 0xd1, 0x60, 0xf2, 0x91, 0xb5, 0x73, 0x2c, 0x3a, 0x30, 0x1f, 0xcc, 0x29, 0x0e, 0x08,
	0x2d, 0x81, 0x45, 0xbf, 0xd7, 0x60, 0x6e, 0x8b, 0x79, 0xc1, 0x43, 0x6c, 0xb9, 0xb6, 0x43, 0x82,
	0xd0, 0x14, 0xba, 0x5c, 0x23, 0xba, 0xfc, 0x54, 0xbf, 0xa2, 0xa6, 0x8b, 0xd7, 0x81, 0x16, 0xa8,
	0x73, 0x68, 0x39, 0xf4, 0x57, 0x1a, 0x20, 0x36, 0x54, 0x1f, 0x8f, 0x52, 0x7f, 0x4c, 0x94, 0x5a,
	0xd5, 0x3f, 0x1b, 0x44, 0x29, 0xbb, 0x89, 0xda, 0x30, 0x45, 0x23, 0x9a, 0x2d, 0x12, 0xb5, 0x62,
	0x57, 0x41, 0x17, 0xf0, 0x9f, 0xa0, 0xcf, 0xf3, 0x4e, 0x82, 0xf2, 0xaa, 0xd3, 0x15, 0xa3, 0xb4,
	0x60, 0x5a, 0x04, 0x68, 0x54, 0x14, 0x0d, 0x3b, 0x29, 0x91, 0x96, 0xc8, 0x83, 0x85, 0xcc, 0xfc,
	0x31, 0x61, 0x5e, 0xd2, 0xfb, 0x64, 0xfa, 0xf6, 0xff, 0x6b, 0x0d, 0x66, 0x04, 0x77, 0xdd, 0xae,
	0xe0, 0x4d, 0xbc, 0x8b, 0x16, 0x7d, 0xd9, 0xec, 0x42, 0x65, 0x62, 0x78, 0x48, 0xf8, 0xf7, 0xf4,
	0xf5, 0x54, 0x03, 0x76, 0x05, 0x3b, 0x78, 0xd7, 0x2d, 0x8d, 0xb0, 0xff, 0xd0, 0x01, 0xcc, 0xdc,
	0x6a, 0x34, 0xb1, 0xe3, 0xda, 0x96, 0xe9, 0xe1, 0x87, 0xf6, 0x1e, 0x56, 0x71, 0x9c, 0x51, 0xff,
	0x89, 0xb5, 0x96, 0x57, 0x13, 0x56, 0x29, 0x2a, 0xce, 0x9d, 0x1d, 0x16, 0x3a, 0xe4, 0x9d, 0xe0,
	0x8e, 0x5d, 0x75, 0x1f, 0x3a, 0x18, 0x53, 0x93, 0x6c, 0xb6, 0xac, 0x35, 0xb6, 0xac, 0xe3, 0x38,
	0x32, 0x9a, 0xf3, 0x42, 0xff, 0x49, 0x11, 0x99, 0x5f, 0x21, 0xf8, 0x22, 0x2a, 0xa8, 0xe1, 0xf7,
	0xed, 0xaa, 0x5b, 0xf0, 0x7c, 0xd4, 0x6b, 0x0d, 0xe6, 0x28, 0x9d, 0xcb, 0x1d, 0x54, 0x85, 0x9f,
	0x12, 0x15, 0x3e, 0x43, 0x97, 0x55, 0xc7, 0x6b, 0x86, 0xa3, 0x7a, 0x08, 0x23, 0x6c, 0x61, 0xcf,
	0xab, 0x5b, 0x55, 0x15, 0x4f, 0x98, 0x66, 0x3a, 0xf2, 0x57, 0xfa, 0x76, 0x07, 0xf6, 0x9e, 0xf1,
	0x2f, 0x08, 0x80, 0x91, 0xfc, 0x55, 0x60, 0x03, 0x26, 0xfc, 0xa5, 0x0f, 0x2f, 0x41, 0x27, 0x7d,
	0xce, 0x7d, 0x5f, 0x52, 0xaf, 0xa5, 0xd2, 0x12, 0x5f, 0x2a, 0xf1, 0xe7, 0xa3, 0x17, 0x81, 0x5c,
	0x1d, 0xa6, 0x8d, 0x5b, 0xd8, 0xaf, 0xbb, 0x1e, 0xda, 0x85, 0x49, 0xea, 0x14, 0x4c, 0x00, 0xb5,
	0x3d, 0xbb, 0x90, 0x3d, 0x62, 0x5c, 0x2a, 0xd7, 0x57, 0x88, 0xf0, 0x9c, 0x7e, 0x26, 0x52, 0x78,
	0x99, 0x08, 0x2d, 0x8d, 0xb0, 0x02, 0xe4, 0xd0, 0xc5, 0x26, 0x13, 0x70, 0xcf, 0x6c, 0xe0, 0xc1,
	0xab, 0x16, 0xb9, 0x12, 0x14, 0x74, 0x8b, 0xc8, 0x7f, 0x0e, 0x8b, 0xc1, 0x05, 0xb5, 0x30, 0x6a,
	0xec, 0x32, 0x37, 0x1a, 0xfc, 0x31, 0x01, 0x9f, 0x43, 0x67, 0x23, 0x17, 0xd6, 0x5c, 0x03, 0xf4,
	0x14, 0xe6, 0xe5, 0xc5, 0x75, 0x5a, 0xf2, 0x47, 0x84, 0xac, 0xa3, 0x6c, 0xd4, 0x22, 0x5b, 0x80,
	0x7f, 0x09, 0xb0, 0x81, 0xb9, 0x00, 0x94, 0xe9, 0x11, 0x05, 0xf7, 0x6c, 0xd1, 0xb3, 0x04, 0xb0,
	0x8c, 0xde, 0x8b, 0xec, 0xbd, 0x08, 0xc3, 0x24, 0x5d, 0x9d, 0xf6, 0xd5, 0x55, 0x0a, 0x44, 0xf0,
	0xc7, 0x99, 0xc8, 0x45, 0x76, 0xde, 0x6f, 0xac, 0xa3, 0x4e, 0x4f, 0xa9, 0xc0, 0x04, 0x59, 0xa2,
	0x0e, 0x42, 0x31, 0x94, 0x29, 0xbb, 0x30, 0x49, 0x57, 0x8c, 0x2a, 0x96, 0x8a, 0x9a, 0x0d, 0x98,
	0xd1, 0x72, 0x31, 0x46, 0xb3, 0x61, 0x8a, 0xf5, 0x81, 0x34, 0x20, 0xd6, 0xf1, 0xf4, 0xb3, 0xd1,
	0x63, 0x0b, 0x0f, 0x41, 0x6d, 0x98, 0x62, 0x21, 0xe8, 0xff, 0x33, 0x90, 0x07, 0x9d, 0x4f, 0x60,
	0x9a, 0x7b, 0x58, 0x1a, 0x62, 0x8e, 0x10, 0xcf, 0xeb, 0x7a, 0x34, 0x51, 0x04, 0x78, 0x2d, 0x98,
	0xed, 0x44, 0x99, 0x69, 0xa0, 0x17, 0x08, 0xf4, 0x83, 0xdc, 0xf9, 0x68, 0xa8, 0x14, 0x57, 0xee,
	0xc1, 0xf4, 0x0d, 0xcb, 0xdc, 0xd9, 0xe7, 0x96, 0x5d, 0xbf, 0x35, 0x10, 0x94, 0x25, 0xcc, 0xf4,
	0x93, 0xd1, 0xd0, 0x72, 0x1d, 0xed, 0xc3, 0xcc, 0xf5, 0xba, 0x7b, 0x6c, 0xb4, 0x5c, 0x3c, 0xed,
	0x09, 0xa0, 0xce, 0xa8, 0x21, 0x66, 0xc1, 0x38, 0xde, 0x9c, 0x74, 0x4f, 0xcc, 0x81, 0xac, 0x11,
	0x51, 0x4c, 0x23, 0xf2, 0x79, 0x0f, 0xbd, 0xd2, 0x60, 0x21, 0x30, 0x9e, 0x08, 0xec, 0xe9, 0x1e,
	0xa2, 0x65, 0xcf, 0xef, 0x89, 0x66, 0x79, 0x9b, 0x8c, 0x02, 0xba, 0x34, 0x2a, 0x94, 0x78, 0xa9,
	0xc1, 0xbc, 0x3c, 0xda, 0x1c, 0x8b, 0x0e, 0x46, 0x7f, 0x3a, 0xd4, 0x60, 0xba, 0x63, 0xfb, 0x87,
	0xd8, 0x6c, 0xc4, 0x1b, 0x7e, 0x46, 0xba, 0x47, 0x9e, 0xd6, 0x3f, 0x24, 0xd8, 0xb3, 0xe8, 0x4c,
	0x34, 0xd6, 0x23, 0x62, 0x5d, 0x40, 0x01, 0x8b, 0x53, 0xd8, 0x72, 0xb7, 0x40, 0xb9, 0x9e, 0x61,
	0x5a, 0x9e, 0xd0, 0x3e, 0xca, 0x24, 0xd1, 0x4a, 0x27, 0x28, 0xd4, 0x81, 0x59, 0xd9, 0xc2, 0x69,
	0x98, 0x86, 0x22, 0xd3, 0xf8, 0x9f, 0x11, 0x98, 0x15, 0x21, 0xe5, 0x96, 0x3f, 0x4c, 0xf9, 0xa1,
	0xd5, 0x5f, 0x6a, 0xf0, 0x2e, 0x9d, 0x94, 0xe5, 0x3b, 0x2a, 0xb1, 0xc8, 0x19, 0x3e, 0x31, 0x77,
	0x09, 0x15, 0xf3, 0xf3, 0x25, 0xa2, 0xe0, 0x45, 0xf4, 0x09, 0x57, 0xd0, 0x76, 0xaa, 0xae, 0xd0,
	0xb2, 0xeb, 0x0b, 0x09, 0x8f, 0x4f, 0xbe, 0xd1, 0x60, 0xae, 0x87, 0xd0, 0xb4, 0xba, 0x84, 0x92,
	0xce, 0xb1, 0xba, 0xa0, 0xef, 0x35, 0x98, 0xa7, 0x21, 0x60, 0x50, 0x20, 0x3a, 0x25, 0x47, 0xdb,
	0xb4, 0x4c, 0x6e, 0x25, 0x14, 0xbe, 0xad, 0x5f, 0x25, 0xe8, 0x2b, 0xba, 0x1a, 0xba, 0x34, 0xc5,
	0x4b, 0x68, 0x01, 0x3a, 0x82, 0xd9, 0x0d, 0xdc, 0x55, 0x2f, 0xea, 0x89, 0xc4, 0x1a, 0xbd, 0x03,
	0xf1, 0x5e, 0x7a, 0x30, 0x47, 0x44, 0x17, 0xd4, 0x9a, 0x83, 0x65, 0x91, 0xff, 0x4e, 0x83, 0x79,
	0xea, 0x1f, 0xe9, 0x2d, 0xb1, 0x45, 0x34, 0xb8, 0x9b, 0xf9, 0x89, 0xa2, 0x06, 0x41, 0x4b, 0xb0,
	0x8c, 0x7a, 0xb7, 0x7d, 0xfe, 0x56, 0x83, 0x39, 0xe2, 0x4b, 0xc7, 0xa6, 0x9f, 0x71, 0xac, 0xfa,
	0x7d, 0xab, 0xc1, 0x3c, 0x8d, 0xaa, 0xfa, 0x6c, 0xc3, 0xa4, 0x64, 0x7c, 0x5f, 0xed, 0x68, 0xfc,
	0xd3, 0x08, 0x4c, 0xdf, 0x5e, 0x75, 0xd7, 0x6d, 0x6b, 0xb7, 0x5e, 0xbd, 0x6b, 0x36, 0x7d, 0xdf,
	0x7f, 0xa3, 0xc1, 0x82, 0xef, 0x34, 0x72, 0xb9, 0x8a, 0xe7, 0x9f, 0xe4, 0xde, 0x76, 0x7b, 0xd5,
	0xe5, 0xf7, 0x3b, 0xae, 0xc6, 0x92, 0xe6, 0x28, 0xd7, 0x53, 0xbf, 0xbd, 0x55, 0x77, 0xbb, 0x4c,
	0x60, 0xdb, 0x0d, 0xb3, 0xc9, 0xbd, 0xfe, 0x08, 0x66, 0xbb, 0x15, 0x49, 0xa7, 0x04, 0x0b, 0x62,
	0xd0, 0x79, 0x15, 0x25, 0xd0, 0x11, 0x20, 0xea, 0xed, 0xb2, 0x02, 0x74, 0xc2, 0x91, 0xa4, 0xcb,
	0xdd, 0x67, 0xba, 0xeb, 0x9e, 0x5e, 0x22, 0xc0, 0xcb, 0xba, 0x12, 0xb0, 0x34, 0x21, 0x7f, 0xdb,
	0x45, 0x4f, 0xc9, 0x64, 0x17, 0x60, 0x27, 0x75, 0x8e, 0x10, 0x3f, 0x7e, 0xb0, 0xed, 0xb6, 0x3a,
	0x73, 0xee, 0xb7, 0x1a, 0x9f, 0xfc, 0x06, 0xaf, 0x38, 0xcb, 0x56, 0x67, 0x56, 0xd5, 0xc0, 0x81,
	0x8f, 0xda, 0xd4, 0x63, 0x82, 0xc6, 0xf8, 0x41, 0x63, 0x73, 0x63, 0x6a, 0x95, 0x8c, 0xe3, 0x52,
	0xe9, 0xa5, 0x06, 0x88, 0xba, 0x70, 0x5f, 0x6d, 0x14, 0xe5, 0xc0, 0xac, 0xa9, 0x72, 0xfd, 0x34,
	0x95, 0xf1, 0xfd, 0x08, 0x4c, 0xdc, 0x5e, 0x75, 0xb7, 0x70, 0xd9, 0xc1, 0x24, 0x27, 0xf2, 0xb5,
	0x46, 0x3f, 0x8d, 0x8b, 0xc2, 0xf4, 0x9e, 0xcb, 0x22, 0x0a, 0xf4, 0x41, 0xa4, 0x62, 0x2e, 0xc5,
	0x33, 0xaf, 0x6d, 0xc3, 0x54, 0x40, 0x83, 0x74, 0xf4, 0xd0, 0x72, 0x3e, 0x8a, 0x8e, 0xda, 0x3c,
	0x59, 0x2a, 0xc8, 0xfd, 0xf5, 0x0f, 0x9e, 0xc9, 0x4f, 0x24, 0x75, 0xf5, 0x83, 0x26, 0x4c, 0x50,
	0x3f, 0x65, 0xd0, 0xbe, 0x9d, 0x94, 0xad, 0xc8, 0xd1, 0x87, 0x89, 0x06, 0x66, 0x0e, 0xfa, 0x17,
	0x1a, 0x4c, 0x0b, 0x07, 0x1d, 0xa4, 0xaa, 0x9f, 0x13, 0xe2, 0xf5, 0xcc, 0xe5, 0x64, 0x62, 0xa2,
	0x1b, 0xfc, 0x46, 0x83, 0x29, 0xee, 0x99, 0x29, 0x74, 0x31, 0x8e, 0x43, 0x97, 0xe7, 0x30, 0x2d,
	0x3c, 0x52, 0xb1, 0x35, 0xa2, 0xdc, 0x91, 0x35, 0x4a, 0x4e, 0xb5, 0x51, 0x8c, 0x7f, 0x1d, 0x01,
	0xb4, 0x89, 0xab, 0x75, 0xd7, 0x73, 0x0e, 0xd6, 0xc8, 0xa6, 0x1d, 0x12, 0x49, 0xff, 0x96, 0x45,
	0xd2, 0xc1, 0x5b, 0x7d, 0x79, 0xe5, 0x4d, 0xdb, 0xf5, 0xb8, 0x44, 0xe1, 0x17, 0xf1, 0x71, 0x9b,
	0xc3, 0x68, 0x6c, 0xfb, 0x90, 0x88, 0xa3, 0x5f, 0x69, 0x34, 0xd9, 0xd6, 0xad, 0x68, 0x2a, 0x55,
	0xe2, 0x07, 0x88, 0x90, 0x2a, 0xe8, 0x05, 0x8f, 0xa2, 0x83, 0x5a, 0xa0, 0xf7, 0x7c, 0x4a, 0x87,
	0x20, 0xf7, 0x9a, 0xa9, 0xe0, 0x2d, 0xf1, 0x09, 0x5c, 0x11, 0x59, 0x1a, 0x97, 0xf6, 0x52, 0xa1,
	0xe7, 0x24, 0x76, 0xee, 0x82, 0x27, 0xf5, 0x93, 0x6e, 0x0d, 0xd8, 0x77, 0x47, 0x74, 0x51, 0xd1,
	0xfe, 0x9d, 0xb9, 0x95, 0x05, 0xce, 0x83, 0x57, 0x9e, 0xcf, 0xad, 0x3f, 0x56, 0x45, 0xcb, 0x1b,
	0xc9, 0xa8, 0xdb, 0x04, 0xec, 0xf1, 0x03, 0x8f, 0x95, 0x53, 0xab, 0x64, 0x1c, 0x97, 0x4a, 0xaf,
	0x45, 0x78, 0xdc, 0x67, 0x33, 0x25, 0x7c, 0x26, 0xce, 0xf5, 0xd7, 0x5c, 0xc6, 0xeb, 0x11, 0x98,
	0xdc, 0xa8, 0x7b, 0x92, 0x3f, 0xbf, 0x64, 0x13, 0xac, 0x28, 0x4d, 0xef, 0xca, 0xf1, 0xe3, 0x7f,
	0xb5, 0xee, 0x75, 0x7b, 0xf1, 0x33, 0x98, 0x0e, 0xa8, 0x90, 0x92, 0x1f, 0xca, 0xd5, 0x47, 0xf2,
	0x91, 0xc7, 0xe7, 0x58, 0xc1, 0xee, 0xa7, 0x97, 0xf0, 0x19, 0x36, 0x19, 0x14, 0xec, 0x0d, 0x74,
	0x86, 0xed, 0x20, 0xfb, 0xf5, 0x55, 0xf6, 0x0d, 0x06, 0x7d, 0x94, 0x6c, 0x60, 0xe6, 0xa6, 0x6f,
	0xc4, 0x0c, 0x3b, 0x50, 0x45, 0x6f, 0x11, 0xe0, 0x7a, 0xc4, 0xfc, 0x1a, 0x04, 0x26, 0x78, 0xc2,
	0x77, 0x7c, 0x7a, 0x4d, 0xa3, 0x88, 0x71, 0x0c, 0x8a, 0x1c, 0xf2, 0xb9, 0x55, 0xbd, 0x1d, 0xa2,
	0x9c, 0x91, 0xb5, 0x47, 0x4e, 0xb9, 0x3d, 0x8c, 0xbf, 0x19, 0x85, 0x59, 0x91, 0x42, 0x34, 0x9d,
	0x72, 0x8d, 0xf8, 0xe2, 0xb7, 0x1a, 0xfd, 0x6c, 0x15, 0xb8, 0x43, 0xfd, 0x31, 0x69, 0xe3, 0xa4,
	0xf8, 0x7e, 0xc4, 0xc5, 0x09, 0x6f, 0x08, 0x75, 0x96, 0x5e, 0x99, 0x49, 0xfa, 0x0e, 0x73, 0xc7,
	0x43, 0x9a, 0x9b, 0xea, 0xd2, 0x2f, 0x85, 0x0a, 0x4a, 0xb9, 0x61, 0x46, 0x71, 0x61, 0x2e, 0xf0,
	0x55, 0x92, 0x0a, 0xa3, 0xe3, 0x41, 0xa0, 0x28, 0xbc, 0x4f, 0x80, 0x14, 0x8b, 0xdd, 0x6c, 0x0a,
	0xb0, 0xd2, 0x30, 0xfd, 0x0f, 0xb9, 0x30, 0x23, 0xe7, 0xc0, 0x49, 0x99, 0xea, 0x8e, 0x08, 0x4a,
	0x2d, 0x12, 0xea, 0x27, 0xe8, 0x63, 0x05, 0x2b, 0x33, 0x9f, 0x7c, 0xa9, 0xc1, 0x5c, 0x57, 0x16,
	0xbc, 0xcf, 0xaa, 0xfe, 0x9c, 0x40, 0x4b, 0x99, 0x15, 0x15, 0x28, 0xdb, 0xb1, 0x4c, 0x3d, 0x81,
	0x57, 0xdc, 0x5f, 0x5e, 0x05, 0x93, 0xe0, 0x83, 0xa9, 0x60, 0x0c, 0xae, 0xc2, 0x2b, 0x0d, 0xe6,
	0x02, 0xdf, 0xe3, 0x94, 0xed, 0x1f, 0xe5, 0x8e, 0xac, 0x2d, 0x72, 0x7d, 0xb4, 0xc5, 0x6f, 0x35,
	0x98, 0x7f, 0xe0, 0xd8, 0x0d, 0xfb, 0xf8, 0xb4, 0x50, 0xd8, 0x99, 0xd1, 0xa5, 0x45, 0xa1, 0x49,
	0x35, 0x30, 0xde, 0x0e, 0x03, 0x48, 0xc3, 0x42, 0x9b, 0x4e, 0x8f, 0xf2, 0x70, 0xa0, 0xf8, 0xfd,
	0x3c, 0xe4, 0x89, 0x6c, 0xdf, 0x33, 0x3a, 0xd7, 0x73, 0xa4, 0xea, 0x1a, 0x07, 0xd8, 0x7e, 0x04,
	0x31, 0x00, 0x0c, 0x0a, 0x0d, 0xed, 0x47, 0xe8, 0x09, 0x45, 0x5f, 0xc0, 0x04, 0xf5, 0x7c, 0x66,
	0xfa, 0x85, 0x4e, 0x37, 0x8b, 0xea, 0x7d, 0x2c, 0xdf, 0xad, 0xc7, 0x4b, 0x16, 0x5d, 0x0d, 0xc3,
	0xd8, 0x06, 0xe6, 0x2d, 0x9b, 0x34, 0xd8, 0xcb, 0x9c, 0xf8, 0x3c, 0x5b, 0x77, 0x67, 0xb2, 0x60,
	0x82, 0xfa, 0xb5, 0x7a, 0x45, 0x58, 0xfc, 0x9f, 0xf9, 0x24, 0x01, 0xd0, 0xd3, 0x83, 0x1a, 0x30,
	0x4e, 0x7c, 0xb8, 0x6f, 0x9c, 0x31, 0x10, 0xce, 0x83, 0x09, 0xea, 0xaf, 0x8a, 0x86, 0x54, 0xfe,
	0x02, 0x1b, 0x67, 0x54, 0xe3, 0xbf, 0x47, 0x61, 0x8e, 0xf9, 0xe1, 0x75, 0x7e, 0xb6, 0x84, 0xad,
	0x47, 0xdf, 0x93, 0x66, 0x2b, 0x71, 0x4f, 0x6d, 0xda, 0xcc, 0xf0, 0x4e, 0xdb, 0x91, 0x19, 0x9d,
	0xe1, 0x0d, 0x3b, 0xb0, 0x38, 0xe5, 0xc2, 0x5d, 0xe6, 0x25, 0xcb, 0x35, 0x87, 0x34, 0x4d, 0xa5,
	0x49, 0xa8, 0xfb, 0xc5, 0x69, 0xe2, 0xeb, 0xb0, 0x18, 0x98, 0x42, 0x85, 0x44, 0x74, 0x46, 0x52,
	0x42, 0x94, 0xca, 0x9d, 0x64, 0xd2, 0x7f, 0x40, 0xdc, 0xe1, 0xdb, 0xbb, 0x74, 0x25, 0x70, 0x69,
	0x4c, 0xfc, 0xef, 0x87, 0x10, 0x9d, 0x09, 0xb5, 0xc3, 0x4f, 0x1e, 0x4d, 0xbb, 0x14, 0x08, 0xe5,
	0x7b, 0x63, 0xdb, 0x80, 0xf9, 0xdf, 0xef, 0x34, 0x58, 0x0c, 0x4c, 0xac, 0x83, 0x1b, 0xe0, 0x26,
	0xe1, 0x5f, 0xcb, 0x7c, 0xaa, 0xc6, 0xef, 0x9c, 0x7a, 0xa2, 0x2e, 0x23, 0x59, 0xe4, 0xad, 0x06,
	0x0b, 0xf2, 0x4c, 0x9b, 0x5a, 0x27, 0x23, 0xbd, 0x4e, 0x6f, 0x34, 0x58, 0x0c, 0x4c, 0xbd, 0xfd,
	0xb4, 0x94, 0x72, 0xde, 0x57, 0xa5, 0xc9, 0x7e, 0xd0, 0xe0, 0xdd, 0xe0, 0xfc, 0x3b, 0xb8, 0x7d,
	0x6e, 0x10, 0x05, 0x7e, 0xa6, 0x5f, 0x1d, 0xc8, 0x3e, 0x62, 0x12, 0xfe, 0xf7, 0x61, 0x98, 0x08,
	0x8c, 0x34, 0x47, 0x74, 0xa1, 0xdc, 0x35, 0xc2, 0xc4, 0x4f, 0x8a, 0x71, 0x5e, 0x1d, 0xff, 0xb1,
	0x36, 0x34, 0xb4, 0xb8, 0x34, 0x0d, 0x2d, 0x0d, 0x29, 0x83, 0xa3, 0x43, 0xdb, 0x06, 0x22, 0xd0,
	0xc8, 0xe2, 0xeb, 0xe3, 0x4e, 0x73, 0x2c, 0x05, 0xac, 0x1d, 0xd3, 0x0e, 0x3c, 0x10, 0x4f, 0x82,
	0xc8, 0x3d, 0xb2, 0x41, 0x56, 0xc6, 0x1d, 0x58, 0xd2, 0xdc, 0xd2, 0x85, 0x8c, 0xcf, 0xdc, 0x85,
	0xbb, 0xdd, 0x57, 0x7c, 0x55, 0x3c, 0x40, 0xf5, 0xd6, 0x09, 0xeb, 0x6a, 0x27, 0xf8, 0x8e, 0x64,
	0xc5, 0x78, 0xe0, 0x0b, 0xb6, 0x18, 0x1e, 0x9c, 0x6f, 0xa4, 0xe2, 0x1f, 0xf0, 0x45, 0xb0, 0xba,
	0xc9, 0xa3, 0xfc, 0x9e, 0xd9, 0x3e, 0xa7, 0x68, 0x7b, 0xe3, 0x37, 0x23, 0x30, 0xb9, 0xd9, 0xb2,
	0x1e, 0xd0, 0x93, 0x96, 0x2c, 0x15, 0x35, 0xc7, 0xce, 0xfe, 0xb1, 0x52, 0x15, 0x17, 0x5b, 0x96,
	0x8e, 0x0c, 0x72, 0x61, 0x8a, 0xa9, 0x28, 0xe9, 0xa4, 0x27, 0xf7, 0xb2, 0xa7, 0x34, 0xd6, 0x96,
	0x64, 0xa5, 0xc1, 0xc7, 0x67, 0xa2, 0x64, 0x3c, 0x6a, 0x49, 0x5b, 0xd4, 0x99, 0x1c, 0x9a, 0x18,
	0xe9, 0x5c, 0x87, 0x12, 0x23, 0x9d, 0x5b, 0x09, 0xa9, 0x28, 0x99, 0x54, 0x1a, 0x97, 0xae, 0xd0,
	0x13, 0x98, 0xa4, 0xfb, 0x9f, 0x39, 0x53, 0x29, 0x17, 0x25, 0x81, 0xe3, 0x73, 0x51, 0x01, 0x0b,
	0x33, 0xa7, 0xfb, 0x5e, 0x83, 0x19, 0x71, 0xd6, 0x71, 0x80, 0xaa, 0xc6, 0x27, 0xa3, 0x82, 0x44,
	0xf9, 0x2c, 0x2f, 0xcb, 0x01, 0xc9, 0xb5, 0x7f, 0xa3, 0xc1, 0x34, 0x3f, 0x14, 0x39, 0xb8, 0x26,
	0xc6, 0x31, 0x68, 0xf2, 0x6b, 0x98, 0x11, 0xc7, 0x18, 0x55, 0x9b, 0x62, 0xb0, 0x74, 0x54, 0x8f,
	0x26, 0x31, 0xfe, 0xeb, 0x04, 0x8c, 0xae, 0x55, 0xb1, 0x45, 0x3e, 0xb9, 0x3e, 0xa1, 0x13, 0x0d,
	0xb9, 0x56, 0x71, 0xc0, 0x45, 0xb1, 0x2b, 0x89, 0x48, 0x50, 0xec, 0xfc, 0xe4, 0x28, 0x39, 0xf7,
	0xba, 0x2a, 0x40, 0x47, 0xc0, 0x80, 0xb8, 0x73, 0x04, 0x77, 0x0a, 0x2d, 0xc7, 0xe0, 0xd0, 0xaf,
	0x60, 0x9c, 0x6d, 0x78, 0xf2, 0xaf, 0x11, 0x39, 0x6e, 0x4c, 0xfe, 0x95, 0x9b, 0x79, 0x4c, 0x94,
	0x8a, 0xad, 0xa9, 0x71, 0x42, 0x4b, 0x27, 0xc8, 0x5f, 0x64, 0xc2, 0xe8, 0x06, 0xa6, 0x5a, 0x25,
	0x36, 0x5d, 0x18, 0xd1, 0x49, 0x8e, 0xf5, 0x32, 0x13, 0x73, 0x9d, 0x2a, 0x8c, 0xb3, 0x5d, 0x4a,
	0x6a, 0xea, 0xb3, 0xf8, 0x3d, 0xf3, 0x51, 0xac, 0x6c, 0x7a, 0xaa, 0x9f, 0x76, 0x4a, 0x56, 0x97,
	0x5d, 0x00, 0xba, 0xdb, 0xa8, 0x2f, 0x8e, 0xd1, 0x37, 0xe7, 0x09, 0x8c, 0xb3, 0x5d, 0x43, 0x4a,
	0x66, 0x4b, 0xd8, 0x41, 0x9c, 0x53, 0xb0, 0xa1, 0xf1, 0x1f, 0xc3, 0x30, 0xfa, 0x8b, 0x16, 0x6e,
	0x61, 0xb6, 0xbd, 0x80, 0x74, 0x76, 0x52, 0x20, 0x75, 0x76, 0xa2, 0x4e, 0x6c, 0xef, 0xa3, 0x22,
	0x44, 0xef, 0x63, 0x47, 0xd6, 0xd0, 0x4a, 0xb2, 0x05, 0x8e, 0x0a, 0x4f, 0xc8, 0xbb, 0x62, 0x7b,
	0x01, 0x74, 0xe4, 0x0d, 0x48, 0x8f, 0xdf, 0x8c, 0xd4, 0x93, 0x8e, 0xea, 0xdc, 0x15, 0x88, 0x2c,
	0xda, 0xc6, 0xe4, 0xdf, 0x88, 0x36, 0xe6, 0xf9, 0xac, 0x3e, 0x18, 0xa5, 0x13, 0xe4, 0x2f, 0x6a,
	0x12, 0xcf, 0xa0, 0x9c, 0xd3, 0x42, 0x62, 0x8c, 0x67, 0x90, 0x47, 0x39, 0x11, 0x15, 0xfb, 0xb0,
	0x29, 0x73, 0x94, 0x5f, 0x73, 0x47, 0x49, 0xac, 0x1c, 0x45, 0xb1, 0xd3, 0xb8, 0x99, 0xab, 0xb1,
	0x28, 0xc2, 0xc8, 0x77, 0x01, 0x69, 0x21, 0xeb, 0xd5, 0xb4, 0xbe, 0x87, 0xcc, 0x7b, 0xfa, 0x83,
	0x1b, 0xc7, 0x03, 0xff, 0x5a, 0xe3, 0x3e, 0xa5, 0x66, 0xf0, 0x84, 0xfc, 0x65, 0xae, 0x7f, 0xeb,
	0x1b, 0xbf, 0x80, 0xe1, 0xb5, 0x96, 0x57, 0x7b, 0x5c, 0x44, 0x1b, 0x70, 0xe2, 0x8e, 0x5d, 0xad,
	0x5b, 0xd4, 0x08, 0xeb, 0x0e, 0x0e, 0x1e, 0xc2, 0xee, 0x9c, 0x63, 0x3b, 0x4d, 0x68, 0x4b, 0xfa,
	0x1c, 0xa7, 0xb5, 0x5c, 0xec, 0xb8, 0x05, 0xcf, 0xde, 0xc3, 0x56, 0x49, 0xcb, 0x19, 0x77, 0x61,
	0xe4, 0x91, 0x5f, 0xf2, 0xb8, 0x88, 0xae, 0xc1, 0xc8, 0x06, 0xf6, 0xfc, 0x2b, 0x14, 0xa1, 0x3b,
	0x95, 0xeb, 0x3f, 0xa1, 0x2f, 0x10, 0xb9, 0xd3, 0x68, 0x32, 0x20, 0xd7, 0xf8, 0x07, 0x0d, 0xe0,
	0x31, 0xfd, 0x21, 0x10, 0x5f, 0xe4, 0x1d, 0x18, 0xdf, 0xc0, 0x1e, 0x2f, 0x88, 0x14, 0x3b, 0xe1,
	0x8b, 0xe5, 0x4f, 0xe9, 0xef, 0x12, 0xd1, 0xb3, 0x68, 0x9a, 0x8b, 0x66, 0xbf, 0x2c, 0x82, 0x1e,
	0x92, 0x98, 0xea, 0x8e, 0x5d, 0xbd, 0x69, 0x5a, 0x95, 0xfd, 0x18, 0x35, 0x49, 0x3c, 0xd1, 0x79,
	0x4e, 0x5f, 0x26, 0x12, 0x17, 0x90, 0x30, 0xc2, 0xbe, 0x5d, 0xdd, 0xae, 0xd1, 0x9b, 0xc6, 0xdb,
	0x09, 0x98, 0xbe, 0x2f, 0xfd, 0xc8, 0x89, 0xaf, 0xf7, 0x97, 0x34, 0xdb, 0x24, 0x17, 0xd3, 0x41,
	0x2c, 0x8a, 0x78, 0x8a, 0x0f, 0x20, 0x01, 0x49, 0x62, 0x1c, 0xc9, 0x10, 0x05, 0xe6, 0x11, 0x0a,
	0xb4, 0x39, 0x1d, 0xa7, 0x30, 0xdd, 0xbc, 0x18, 0x78, 0x71, 0x50, 0xce, 0x7b, 0x84, 0x33, 0x87,
	0x66, 0x03, 0x1c, 0x72, 0x2a, 0xed, 0x97, 0x7c, 0x93, 0xa2, 0xfc, 0x26, 0x22, 0xfb, 0xc2, 0xe5,
	0x92, 0x4c, 0xa8, 0x24, 0xdc, 0x85, 0x88, 0x50, 0x76, 0x1a, 0x4d, 0xcb, 0xa1, 0x3f, 0x27, 0xfb,
	0x0f, 0x03, 0x62, 0x97, 0x42, 0x91, 0x46, 0x60, 0x23, 0x7a, 0x40, 0xfc, 0x49, 0x22, 0x7e, 0x11,
	0xcd, 0xf7, 0xf2, 0x07, 0x64, 0xf3, 0x2d, 0x86, 0x01, 0xf9, 0xcb, 0xdd, 0x52, 0x42, 0x7b, 0xdd,
	0x03, 0x08, 0x36, 0x8d, 0x65, 0x7a, 0x22, 0x4a, 0x13, 0xf2, 0x4f, 0xdc, 0x20, 0x8b, 0xed, 0x1f,
	0x3c, 0x06, 0x9e, 0xa1, 0xc2, 0xab, 0xf0, 0xcd, 0x81, 0x8a, 0x06, 0x8c, 0x1a, 0x56, 0x98, 0x19,
	0x73, 0xbd, 0xcd, 0xf8, 0x8a, 0xed, 0x2e, 0x92, 0x21, 0x77, 0x71, 0x63, 0x07, 0x3b, 0x49, 0x61,
	0xe1, 0xb9, 0x5e, 0x3d, 0x8e, 0xbd, 0x1a, 0xfd, 0x83, 0x35, 0x81, 0x31, 0xad, 0xc1, 0x40, 0xdf,
	0x68, 0xb0, 0x14, 0xee, 0x83, 0x54, 0x16, 0x3a, 0xdb, 0x6d, 0x45, 0x5a, 0x1e, 0x3c, 0x41, 0xdc,
	0xf3, 0x11, 0x9e, 0xc6, 0xd5, 0x63, 0xe9, 0xa5, 0x61, 0xfa, 0x0f, 0x3a, 0x84, 0x85, 0xae, 0xee,
	0xca, 0x34, 0x38, 0xc5, 0xc4, 0xdf, 0xc5, 0x0d, 0xbc, 0xd3, 0xcb, 0xf0, 0xbd, 0xe9, 0xf1, 0x9f,
	0x7e, 0x18, 0x9d, 0x9d, 0x29, 0x44, 0x6f, 0x35, 0x58, 0x0a, 0xf7, 0xe7, 0xf4, 0x26, 0x60, 0xfb,
	0x87, 0x33, 0xb9, 0x78, 0x25, 0xe8, 0x3f, 0x79, 0xa2, 0x8b, 0x30, 0x08, 0xc9, 0x11, 0x76, 0x77,
	0xf9, 0x63, 0x53, 0xc9, 0x18, 0x44, 0xa5, 0x17, 0xb0, 0x14, 0x76, 0x0a, 0xd5, 0x66, 0xea, 0xed,
	0x1f, 0xac, 0x99, 0x72, 0x2a, 0xcd, 0x64, 0xfc, 0xf3, 0x38, 0x8c, 0x90, 0x63, 0x32, 0xe4, 0x37,
	0xa4, 0x26, 0xfd, 0xee, 0xef, 0x5f, 0xaa, 0xac, 0xda, 0x16, 0xb8, 0xbf, 0x90, 0xf7, 0x15, 0xb7,
	0xa7, 0x92, 0x23, 0x36, 0x6c, 0x3e, 0xa8, 0xc0, 0x98, 0x78, 0x7d, 0x30, 0x96, 0x4e, 0x58, 0x27,
	0x51, 0x26, 0x9a, 0x85, 0x1e, 0x01, 0x50, 0x57, 0xf4, 0x5f, 0x45, 0xe4, 0xe8, 0x95, 0xff, 0x5f,
	0x28, 0x88, 0xf0, 0x0b, 0xb9, 0xf2, 0x7a, 0x8c, 0xc0, 0xd2, 0x8f, 0xfc, 0x3f, 0xe8, 0x4f, 0x49,
	0x0c, 0x41, 0x64, 0xbe, 0xcb, 0x5f, 0xef, 0x79, 0xc8, 0x9e, 0xc8, 0x8d, 0x5f, 0xc9, 0x52, 0xa3,
	0x1c, 0xfa, 0x7f, 0x8e, 0x90, 0x09, 0x40, 0xfd, 0x46, 0x45, 0x5f, 0x7e, 0x70, 0xed, 0x83, 0x24,
	0xb9, 0xec, 0x08, 0x2b, 0xd5, 0xfd, 0x0b, 0x18, 0x23, 0x6e, 0xd0, 0x07, 0xc1, 0xe8, 0x8f, 0x50,
	0xe3, 0xbf, 0xa9, 0x14, 0x6f, 0xa0, 0x84, 0x13, 0xa4, 0x39, 0x05, 0x73, 0xbd, 0xa0, 0xe9, 0x36,
	0x5f, 0x3a, 0x1f, 0xe6, 0x97, 0xbb, 0x71, 0x3d, 0xb3, 0x6d, 0xd2, 0x1b, 0xa2, 0x3f, 0x85, 0xf6,
	0x60, 0x44, 0x72, 0xc5, 0x50, 0xff, 0x8c, 0x67, 0xdd, 0x3a, 0xf2, 0x68, 0x02, 0xa8, 0x73, 0x1d,
	0x4a, 0x00, 0x75, 0x6e, 0x89, 0x35, 0x91, 0x3a, 0x51, 0x0c, 0x1d, 0x07, 0x24, 0x48, 0x94, 0xb0,
	0xa7, 0x25, 0xd9, 0xbd, 0x06, 0x8c, 0x6e, 0x76, 0xfc, 0x8a, 0xb3, 0x17, 0x9b, 0x0f, 0xee, 0xdf,
	0x89, 0x04, 0xdc, 0x60, 0xb5, 0xde, 0x20, 0xe4, 0xb5, 0xcc, 0x95, 0x3e, 0xc8, 0x3d, 0x87, 0xcf,
	0xd7, 0x3c, 0xfd, 0x96, 0x4a, 0x0f, 0x23, 0xb5, 0x1e, 0xdf, 0x6a, 0x3c, 0xfb, 0xd6, 0x47, 0x7b,
	0x28, 0xff, 0x78, 0x8d, 0x6a, 0xbb, 0x18, 0x9f, 0xc3, 0xd8, 0x16, 0xfd, 0x95, 0xc0, 0xc7, 0x45,
	0x74, 0x15, 0x7e, 0x74, 0xcf, 0xbe, 0xdf, 0x8c, 0x8c, 0xb0, 0xc9, 0x19, 0x78, 0xf6, 0xb8, 0x3e,
	0x43, 0x98, 0x80, 0x46, 0xf9, 0xcf, 0x0c, 0x5e, 0xfb, 0xc7, 0xa1, 0xdf, 0xad, 0xfd, 0xfd, 0x10,
	0x32, 0x61, 0xe2, 0x01, 0xfb, 0xdd, 0xc8, 0xac, 0x5b, 0xd9, 0xd3, 0x3f, 0x0f, 0x5e, 0xa3, 0xf3,
	0x35, 0xcf, 0x6b, 0xba, 0xa5, 0x42, 0xa1, 0x5a, 0xf7, 0x6a, 0xad, 0x9d, 0x7c, 0xd9, 0x6e, 0x88,
	0x1f, 0x9a, 0x14, 0xff, 0x64, 0xe6, 0xcb, 0xb6, 0xe5, 0x99, 0x65, 0xef, 0xe7, 0xbc, 0xc4, 0x7f,
	0xce, 0x38, 0x51, 0xcc, 0xaf, 0xe4, 0x57, 0x72, 0x43, 0xda, 0x90, 0x31, 0x63, 0x36, 0x9b, 0xfb,
	0xf5, 0x32, 0x99, 0xfe, 0x0a, 0x5f, 0xba, 0xb6, 0x55, 0x0a, 0x95, 0x6c, 0xce, 0xc3, 0x3b, 0xc6,
	0xca, 0x65, 0x34, 0x09, 0xe3, 0xf7, 0xec, 0xac, 0x2f, 0x10, 0x5b, 0x5e, 0x7e, 0xb3, 0x04, 0xef,
	0x5c, 0x5e, 0xb9, 0x84, 0x2e, 0x41, 0xf1, 0xcf, 0xec, 0x56, 0xb6, 0x62, 0x5b, 0x1f, 0x7a, 0xd9,
	0x9a, 0xd9, 0xc6, 0xd9, 0x26, 0x76, 0x1a, 0x75, 0xd7, 0x5f, 0x4f, 0x65, 0x3d, 0x3b, 0x4b, 0xf7,
	0xcf, 0x65, 0xbd, 0x1a, 0xce, 0x8a, 0x0d, 0xf3, 0x9b, 0x67, 0xfd, 0x77, 0x2f, 0xa3, 0x0c, 0x2c,
	0xf1, 0xb6, 0xc9, 0x56, 0x6c, 0xec, 0x66, 0x2d, 0xdb, 0xcb, 0xe2, 0x67, 0x75, 0xd7, 0xcb, 0xff,
	0xea, 0x0c, 0x9c, 0x82, 0xe1, 0xb5, 0x66, 0xfd, 0x36, 0x3e, 0x40, 0x73, 0xa3, 0x43, 0x99, 0x49,
	0x7f, 0xb1, 0x69, 0x3b, 0x6c, 0xa6, 0xce, 0x0e, 0xed, 0x4c, 0x00, 0x88, 0x07, 0xfe, 0x68, 0x67,
	0x98, 0x18, 0xf9, 0xd2, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xda, 0x99, 0xb9, 0x92, 0x70, 0x53,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RunsV1Client is the client API for RunsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunsV1Client interface {
	// List bookmarked runs for user
	ListBookmarkedRuns(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// List runs
	ListRuns(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	// Create new run
	CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Get run
	GetRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Run, error)
	// Update run
	UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Patch run
	PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Delete run
	DeleteRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run
	StopRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop runs
	StopRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Invalidate run
	InvalidateRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Restart run
	RestartRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Resume run
	ResumeRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error)
	// Archive run
	ArchiveRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore run
	RestoreRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unbookmark run
	UnbookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Status, error)
	// Create new run status
	CreateRunStatus(ctx context.Context, in *EntityStatusBodyRequest, opts ...grpc.CallOption) (*Status, error)
	// Get run code ref
	CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Impersonate run token
	ImpersonateToken(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Auth, error)
	// Get run logs list
	GetRunLogsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error)
	// Get run artifacts list
	GetRunArtifactsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error)
	// Get Run settings
	GetRunSettings(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*RunSettings, error)
}

type runsV1Client struct {
	cc *grpc.ClientConn
}

func NewRunsV1Client(cc *grpc.ClientConn) RunsV1Client {
	return &runsV1Client{cc}
}

func (c *runsV1Client) ListBookmarkedRuns(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListBookmarkedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ListArchivedRuns(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListArchivedRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ListRuns(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ListRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) UpdateRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/UpdateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) PatchRun(ctx context.Context, in *RunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/PatchRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) DeleteRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/DeleteRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) DeleteRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/DeleteRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) InvalidateRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/InvalidateRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) InvalidateRuns(ctx context.Context, in *ProjectResourceUuidsBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/InvalidateRuns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CopyRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CopyRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) RestartRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/RestartRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ResumeRun(ctx context.Context, in *EntityRunBodyRequest, opts ...grpc.CallOption) (*Run, error) {
	out := new(Run)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ResumeRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ArchiveRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ArchiveRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) RestoreRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/RestoreRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) BookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/BookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) UnbookmarkRun(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/UnbookmarkRun", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StartRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StartRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) StopRunTensorboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/StopRunTensorboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunStatuses(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRunStatus(ctx context.Context, in *EntityStatusBodyRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRunStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) CreateRunCodeRef(ctx context.Context, in *CodeRefBodyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/CreateRunCodeRef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) ImpersonateToken(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/ImpersonateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunLogsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error) {
	out := new(ArtifactTreeResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunLogsTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunArtifactsTree(ctx context.Context, in *RunArtifactRequest, opts ...grpc.CallOption) (*ArtifactTreeResponse, error) {
	out := new(ArtifactTreeResponse)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunArtifactsTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runsV1Client) GetRunSettings(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*RunSettings, error) {
	out := new(RunSettings)
	err := c.cc.Invoke(ctx, "/v1.RunsV1/GetRunSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunsV1Server is the server API for RunsV1 service.
type RunsV1Server interface {
	// List bookmarked runs for user
	ListBookmarkedRuns(context.Context, *UserResourceListRequest) (*ListRunsResponse, error)
	// List archived runs for user
	ListArchivedRuns(context.Context, *UserResourceListRequest) (*ListRunsResponse, error)
	// List runs
	ListRuns(context.Context, *ProjectResourceListRequest) (*ListRunsResponse, error)
	// Create new run
	CreateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Get run
	GetRun(context.Context, *ProjectEntityResourceRequest) (*Run, error)
	// Update run
	UpdateRun(context.Context, *RunBodyRequest) (*Run, error)
	// Patch run
	PatchRun(context.Context, *RunBodyRequest) (*Run, error)
	// Delete run
	DeleteRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Delete runs
	DeleteRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Stop run
	StopRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Stop runs
	StopRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Invalidate run
	InvalidateRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Invalidate runs
	InvalidateRuns(context.Context, *ProjectResourceUuidsBodyRequest) (*empty.Empty, error)
	// Restart run with copy
	CopyRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Restart run
	RestartRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Resume run
	ResumeRun(context.Context, *EntityRunBodyRequest) (*Run, error)
	// Archive run
	ArchiveRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Restore run
	RestoreRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Bookmark run
	BookmarkRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Unbookmark run
	UnbookmarkRun(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Start run tensorboard
	StartRunTensorboard(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Stop run tensorboard
	StopRunTensorboard(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Get run status
	GetRunStatuses(context.Context, *ProjectEntityResourceRequest) (*Status, error)
	// Create new run status
	CreateRunStatus(context.Context, *EntityStatusBodyRequest) (*Status, error)
	// Get run code ref
	CreateRunCodeRef(context.Context, *CodeRefBodyRequest) (*empty.Empty, error)
	// Impersonate run token
	ImpersonateToken(context.Context, *ProjectEntityResourceRequest) (*Auth, error)
	// Get run logs list
	GetRunLogsTree(context.Context, *RunArtifactRequest) (*ArtifactTreeResponse, error)
	// Get run artifacts list
	GetRunArtifactsTree(context.Context, *RunArtifactRequest) (*ArtifactTreeResponse, error)
	// Get Run settings
	GetRunSettings(context.Context, *ProjectEntityResourceRequest) (*RunSettings, error)
}

// UnimplementedRunsV1Server can be embedded to have forward compatible implementations.
type UnimplementedRunsV1Server struct {
}

func (*UnimplementedRunsV1Server) ListBookmarkedRuns(ctx context.Context, req *UserResourceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedRuns not implemented")
}
func (*UnimplementedRunsV1Server) ListArchivedRuns(ctx context.Context, req *UserResourceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedRuns not implemented")
}
func (*UnimplementedRunsV1Server) ListRuns(ctx context.Context, req *ProjectResourceListRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (*UnimplementedRunsV1Server) CreateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRun not implemented")
}
func (*UnimplementedRunsV1Server) GetRun(ctx context.Context, req *ProjectEntityResourceRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (*UnimplementedRunsV1Server) UpdateRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRun not implemented")
}
func (*UnimplementedRunsV1Server) PatchRun(ctx context.Context, req *RunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRun not implemented")
}
func (*UnimplementedRunsV1Server) DeleteRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRun not implemented")
}
func (*UnimplementedRunsV1Server) DeleteRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRuns not implemented")
}
func (*UnimplementedRunsV1Server) StopRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRun not implemented")
}
func (*UnimplementedRunsV1Server) StopRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRuns not implemented")
}
func (*UnimplementedRunsV1Server) InvalidateRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRun not implemented")
}
func (*UnimplementedRunsV1Server) InvalidateRuns(ctx context.Context, req *ProjectResourceUuidsBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateRuns not implemented")
}
func (*UnimplementedRunsV1Server) CopyRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyRun not implemented")
}
func (*UnimplementedRunsV1Server) RestartRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartRun not implemented")
}
func (*UnimplementedRunsV1Server) ResumeRun(ctx context.Context, req *EntityRunBodyRequest) (*Run, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeRun not implemented")
}
func (*UnimplementedRunsV1Server) ArchiveRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRun not implemented")
}
func (*UnimplementedRunsV1Server) RestoreRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRun not implemented")
}
func (*UnimplementedRunsV1Server) BookmarkRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkRun not implemented")
}
func (*UnimplementedRunsV1Server) UnbookmarkRun(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookmarkRun not implemented")
}
func (*UnimplementedRunsV1Server) StartRunTensorboard(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRunTensorboard not implemented")
}
func (*UnimplementedRunsV1Server) StopRunTensorboard(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRunTensorboard not implemented")
}
func (*UnimplementedRunsV1Server) GetRunStatuses(ctx context.Context, req *ProjectEntityResourceRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunStatuses not implemented")
}
func (*UnimplementedRunsV1Server) CreateRunStatus(ctx context.Context, req *EntityStatusBodyRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunStatus not implemented")
}
func (*UnimplementedRunsV1Server) CreateRunCodeRef(ctx context.Context, req *CodeRefBodyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunCodeRef not implemented")
}
func (*UnimplementedRunsV1Server) ImpersonateToken(ctx context.Context, req *ProjectEntityResourceRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImpersonateToken not implemented")
}
func (*UnimplementedRunsV1Server) GetRunLogsTree(ctx context.Context, req *RunArtifactRequest) (*ArtifactTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunLogsTree not implemented")
}
func (*UnimplementedRunsV1Server) GetRunArtifactsTree(ctx context.Context, req *RunArtifactRequest) (*ArtifactTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunArtifactsTree not implemented")
}
func (*UnimplementedRunsV1Server) GetRunSettings(ctx context.Context, req *ProjectEntityResourceRequest) (*RunSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunSettings not implemented")
}

func RegisterRunsV1Server(s *grpc.Server, srv RunsV1Server) {
	s.RegisterService(&_RunsV1_serviceDesc, srv)
}

func _RunsV1_ListBookmarkedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListBookmarkedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListBookmarkedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListBookmarkedRuns(ctx, req.(*UserResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ListArchivedRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListArchivedRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListArchivedRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListArchivedRuns(ctx, req.(*UserResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ListRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ListRuns(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_UpdateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).UpdateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/UpdateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).UpdateRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_PatchRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).PatchRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/PatchRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).PatchRun(ctx, req.(*RunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_DeleteRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).DeleteRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/DeleteRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).DeleteRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_DeleteRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).DeleteRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/DeleteRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).DeleteRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_InvalidateRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).InvalidateRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/InvalidateRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).InvalidateRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_InvalidateRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceUuidsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).InvalidateRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/InvalidateRuns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).InvalidateRuns(ctx, req.(*ProjectResourceUuidsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CopyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CopyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CopyRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CopyRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_RestartRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).RestartRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/RestartRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).RestartRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ResumeRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRunBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ResumeRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ResumeRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ResumeRun(ctx, req.(*EntityRunBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ArchiveRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ArchiveRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ArchiveRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ArchiveRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_RestoreRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).RestoreRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/RestoreRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).RestoreRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_BookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).BookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/BookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).BookmarkRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_UnbookmarkRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).UnbookmarkRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/UnbookmarkRun",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).UnbookmarkRun(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StartRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StartRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StartRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StartRunTensorboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_StopRunTensorboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).StopRunTensorboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/StopRunTensorboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).StopRunTensorboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunStatuses(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRunStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityStatusBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRunStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRunStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRunStatus(ctx, req.(*EntityStatusBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_CreateRunCodeRef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeRefBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).CreateRunCodeRef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/CreateRunCodeRef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).CreateRunCodeRef(ctx, req.(*CodeRefBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_ImpersonateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).ImpersonateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/ImpersonateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).ImpersonateToken(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunLogsTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunLogsTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunLogsTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunLogsTree(ctx, req.(*RunArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunArtifactsTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunArtifactsTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunArtifactsTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunArtifactsTree(ctx, req.(*RunArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunsV1_GetRunSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunsV1Server).GetRunSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunsV1/GetRunSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunsV1Server).GetRunSettings(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RunsV1",
	HandlerType: (*RunsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBookmarkedRuns",
			Handler:    _RunsV1_ListBookmarkedRuns_Handler,
		},
		{
			MethodName: "ListArchivedRuns",
			Handler:    _RunsV1_ListArchivedRuns_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _RunsV1_ListRuns_Handler,
		},
		{
			MethodName: "CreateRun",
			Handler:    _RunsV1_CreateRun_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _RunsV1_GetRun_Handler,
		},
		{
			MethodName: "UpdateRun",
			Handler:    _RunsV1_UpdateRun_Handler,
		},
		{
			MethodName: "PatchRun",
			Handler:    _RunsV1_PatchRun_Handler,
		},
		{
			MethodName: "DeleteRun",
			Handler:    _RunsV1_DeleteRun_Handler,
		},
		{
			MethodName: "DeleteRuns",
			Handler:    _RunsV1_DeleteRuns_Handler,
		},
		{
			MethodName: "StopRun",
			Handler:    _RunsV1_StopRun_Handler,
		},
		{
			MethodName: "StopRuns",
			Handler:    _RunsV1_StopRuns_Handler,
		},
		{
			MethodName: "InvalidateRun",
			Handler:    _RunsV1_InvalidateRun_Handler,
		},
		{
			MethodName: "InvalidateRuns",
			Handler:    _RunsV1_InvalidateRuns_Handler,
		},
		{
			MethodName: "CopyRun",
			Handler:    _RunsV1_CopyRun_Handler,
		},
		{
			MethodName: "RestartRun",
			Handler:    _RunsV1_RestartRun_Handler,
		},
		{
			MethodName: "ResumeRun",
			Handler:    _RunsV1_ResumeRun_Handler,
		},
		{
			MethodName: "ArchiveRun",
			Handler:    _RunsV1_ArchiveRun_Handler,
		},
		{
			MethodName: "RestoreRun",
			Handler:    _RunsV1_RestoreRun_Handler,
		},
		{
			MethodName: "BookmarkRun",
			Handler:    _RunsV1_BookmarkRun_Handler,
		},
		{
			MethodName: "UnbookmarkRun",
			Handler:    _RunsV1_UnbookmarkRun_Handler,
		},
		{
			MethodName: "StartRunTensorboard",
			Handler:    _RunsV1_StartRunTensorboard_Handler,
		},
		{
			MethodName: "StopRunTensorboard",
			Handler:    _RunsV1_StopRunTensorboard_Handler,
		},
		{
			MethodName: "GetRunStatuses",
			Handler:    _RunsV1_GetRunStatuses_Handler,
		},
		{
			MethodName: "CreateRunStatus",
			Handler:    _RunsV1_CreateRunStatus_Handler,
		},
		{
			MethodName: "CreateRunCodeRef",
			Handler:    _RunsV1_CreateRunCodeRef_Handler,
		},
		{
			MethodName: "ImpersonateToken",
			Handler:    _RunsV1_ImpersonateToken_Handler,
		},
		{
			MethodName: "GetRunLogsTree",
			Handler:    _RunsV1_GetRunLogsTree_Handler,
		},
		{
			MethodName: "GetRunArtifactsTree",
			Handler:    _RunsV1_GetRunArtifactsTree_Handler,
		},
		{
			MethodName: "GetRunSettings",
			Handler:    _RunsV1_GetRunSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ProjectsV1Client is the client API for ProjectsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectsV1Client interface {
	// List projects
	ListProjects(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// List project names
	ListProjectNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Get project
	GetProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*Project, error)
	// Update project
	UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Patch project
	PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error)
	// Delete project
	DeleteProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Archive project
	ArchiveProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Restore project
	RestoreProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Unbookmark project
	UnbookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Enable project CI
	EnableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Disbale project CI
	DisableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get Project settings
	GetProjectSettings(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*ProjectSettings, error)
	// Update project settings
	UpdateProjectSettings(ctx context.Context, in *ProjectSettingsBodyRequest, opts ...grpc.CallOption) (*ProjectSettings, error)
	// Patch project settings
	PatchProjectSettings(ctx context.Context, in *ProjectSettingsBodyRequest, opts ...grpc.CallOption) (*ProjectSettings, error)
	// Get project teams
	GetProjectTeams(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*ProjectTeams, error)
	// Update project teams
	UpdateProjectTeams(ctx context.Context, in *ProjectTeamsBodyRequest, opts ...grpc.CallOption) (*ProjectTeams, error)
	// Patch project teams
	PatchProjectTeams(ctx context.Context, in *ProjectTeamsBodyRequest, opts ...grpc.CallOption) (*ProjectTeams, error)
}

type projectsV1Client struct {
	cc *grpc.ClientConn
}

func NewProjectsV1Client(cc *grpc.ClientConn) ProjectsV1Client {
	return &projectsV1Client{cc}
}

func (c *projectsV1Client) ListProjects(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) CreateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListProjectNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListProjectNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListBookmarkedProjects(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListBookmarkedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ListArchivedProjects(ctx context.Context, in *UserResourceListRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ListArchivedProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) GetProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UpdateProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) PatchProject(ctx context.Context, in *ProjectBodyRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/PatchProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) DeleteProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) ArchiveProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/ArchiveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) RestoreProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/RestoreProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) BookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/BookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UnbookmarkProject(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UnbookmarkProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) EnableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/EnableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) DisableProjectCI(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/DisableProjectCI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) GetProjectSettings(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*ProjectSettings, error) {
	out := new(ProjectSettings)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/GetProjectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UpdateProjectSettings(ctx context.Context, in *ProjectSettingsBodyRequest, opts ...grpc.CallOption) (*ProjectSettings, error) {
	out := new(ProjectSettings)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UpdateProjectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) PatchProjectSettings(ctx context.Context, in *ProjectSettingsBodyRequest, opts ...grpc.CallOption) (*ProjectSettings, error) {
	out := new(ProjectSettings)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/PatchProjectSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) GetProjectTeams(ctx context.Context, in *ProjectResourceRequest, opts ...grpc.CallOption) (*ProjectTeams, error) {
	out := new(ProjectTeams)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/GetProjectTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) UpdateProjectTeams(ctx context.Context, in *ProjectTeamsBodyRequest, opts ...grpc.CallOption) (*ProjectTeams, error) {
	out := new(ProjectTeams)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/UpdateProjectTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsV1Client) PatchProjectTeams(ctx context.Context, in *ProjectTeamsBodyRequest, opts ...grpc.CallOption) (*ProjectTeams, error) {
	out := new(ProjectTeams)
	err := c.cc.Invoke(ctx, "/v1.ProjectsV1/PatchProjectTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsV1Server is the server API for ProjectsV1 service.
type ProjectsV1Server interface {
	// List projects
	ListProjects(context.Context, *OwnerResourceListRequest) (*ListProjectsResponse, error)
	// Create new project
	CreateProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// List project names
	ListProjectNames(context.Context, *OwnerResourceListRequest) (*ListProjectsResponse, error)
	// List bookmarked projects for user
	ListBookmarkedProjects(context.Context, *UserResourceListRequest) (*ListProjectsResponse, error)
	// List archived projects for user
	ListArchivedProjects(context.Context, *UserResourceListRequest) (*ListProjectsResponse, error)
	// Get project
	GetProject(context.Context, *ProjectResourceRequest) (*Project, error)
	// Update project
	UpdateProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Patch project
	PatchProject(context.Context, *ProjectBodyRequest) (*Project, error)
	// Delete project
	DeleteProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Archive project
	ArchiveProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Restore project
	RestoreProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Bookmark project
	BookmarkProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Unbookmark project
	UnbookmarkProject(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Enable project CI
	EnableProjectCI(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Disbale project CI
	DisableProjectCI(context.Context, *ProjectResourceRequest) (*empty.Empty, error)
	// Get Project settings
	GetProjectSettings(context.Context, *ProjectResourceRequest) (*ProjectSettings, error)
	// Update project settings
	UpdateProjectSettings(context.Context, *ProjectSettingsBodyRequest) (*ProjectSettings, error)
	// Patch project settings
	PatchProjectSettings(context.Context, *ProjectSettingsBodyRequest) (*ProjectSettings, error)
	// Get project teams
	GetProjectTeams(context.Context, *ProjectResourceRequest) (*ProjectTeams, error)
	// Update project teams
	UpdateProjectTeams(context.Context, *ProjectTeamsBodyRequest) (*ProjectTeams, error)
	// Patch project teams
	PatchProjectTeams(context.Context, *ProjectTeamsBodyRequest) (*ProjectTeams, error)
}

// UnimplementedProjectsV1Server can be embedded to have forward compatible implementations.
type UnimplementedProjectsV1Server struct {
}

func (*UnimplementedProjectsV1Server) ListProjects(ctx context.Context, req *OwnerResourceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedProjectsV1Server) CreateProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedProjectsV1Server) ListProjectNames(ctx context.Context, req *OwnerResourceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectNames not implemented")
}
func (*UnimplementedProjectsV1Server) ListBookmarkedProjects(ctx context.Context, req *UserResourceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBookmarkedProjects not implemented")
}
func (*UnimplementedProjectsV1Server) ListArchivedProjects(ctx context.Context, req *UserResourceListRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchivedProjects not implemented")
}
func (*UnimplementedProjectsV1Server) GetProject(ctx context.Context, req *ProjectResourceRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedProjectsV1Server) UpdateProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedProjectsV1Server) PatchProject(ctx context.Context, req *ProjectBodyRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProject not implemented")
}
func (*UnimplementedProjectsV1Server) DeleteProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedProjectsV1Server) ArchiveProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveProject not implemented")
}
func (*UnimplementedProjectsV1Server) RestoreProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreProject not implemented")
}
func (*UnimplementedProjectsV1Server) BookmarkProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookmarkProject not implemented")
}
func (*UnimplementedProjectsV1Server) UnbookmarkProject(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbookmarkProject not implemented")
}
func (*UnimplementedProjectsV1Server) EnableProjectCI(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableProjectCI not implemented")
}
func (*UnimplementedProjectsV1Server) DisableProjectCI(ctx context.Context, req *ProjectResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableProjectCI not implemented")
}
func (*UnimplementedProjectsV1Server) GetProjectSettings(ctx context.Context, req *ProjectResourceRequest) (*ProjectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectSettings not implemented")
}
func (*UnimplementedProjectsV1Server) UpdateProjectSettings(ctx context.Context, req *ProjectSettingsBodyRequest) (*ProjectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectSettings not implemented")
}
func (*UnimplementedProjectsV1Server) PatchProjectSettings(ctx context.Context, req *ProjectSettingsBodyRequest) (*ProjectSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectSettings not implemented")
}
func (*UnimplementedProjectsV1Server) GetProjectTeams(ctx context.Context, req *ProjectResourceRequest) (*ProjectTeams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectTeams not implemented")
}
func (*UnimplementedProjectsV1Server) UpdateProjectTeams(ctx context.Context, req *ProjectTeamsBodyRequest) (*ProjectTeams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectTeams not implemented")
}
func (*UnimplementedProjectsV1Server) PatchProjectTeams(ctx context.Context, req *ProjectTeamsBodyRequest) (*ProjectTeams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectTeams not implemented")
}

func RegisterProjectsV1Server(s *grpc.Server, srv ProjectsV1Server) {
	s.RegisterService(&_ProjectsV1_serviceDesc, srv)
}

func _ProjectsV1_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListProjects(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).CreateProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListProjectNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListProjectNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListProjectNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListProjectNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListBookmarkedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListBookmarkedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListBookmarkedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListBookmarkedProjects(ctx, req.(*UserResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ListArchivedProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ListArchivedProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ListArchivedProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ListArchivedProjects(ctx, req.(*UserResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).GetProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UpdateProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_PatchProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).PatchProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/PatchProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).PatchProject(ctx, req.(*ProjectBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).DeleteProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_ArchiveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).ArchiveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/ArchiveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).ArchiveProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_RestoreProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).RestoreProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/RestoreProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).RestoreProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_BookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).BookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/BookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).BookmarkProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UnbookmarkProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UnbookmarkProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UnbookmarkProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UnbookmarkProject(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_EnableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).EnableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/EnableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).EnableProjectCI(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_DisableProjectCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).DisableProjectCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/DisableProjectCI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).DisableProjectCI(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_GetProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).GetProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/GetProjectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).GetProjectSettings(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UpdateProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSettingsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UpdateProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UpdateProjectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UpdateProjectSettings(ctx, req.(*ProjectSettingsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_PatchProjectSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSettingsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).PatchProjectSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/PatchProjectSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).PatchProjectSettings(ctx, req.(*ProjectSettingsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_GetProjectTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).GetProjectTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/GetProjectTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).GetProjectTeams(ctx, req.(*ProjectResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_UpdateProjectTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectTeamsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).UpdateProjectTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/UpdateProjectTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).UpdateProjectTeams(ctx, req.(*ProjectTeamsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectsV1_PatchProjectTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectTeamsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsV1Server).PatchProjectTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectsV1/PatchProjectTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsV1Server).PatchProjectTeams(ctx, req.(*ProjectTeamsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProjectsV1",
	HandlerType: (*ProjectsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _ProjectsV1_ListProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectsV1_CreateProject_Handler,
		},
		{
			MethodName: "ListProjectNames",
			Handler:    _ProjectsV1_ListProjectNames_Handler,
		},
		{
			MethodName: "ListBookmarkedProjects",
			Handler:    _ProjectsV1_ListBookmarkedProjects_Handler,
		},
		{
			MethodName: "ListArchivedProjects",
			Handler:    _ProjectsV1_ListArchivedProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectsV1_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectsV1_UpdateProject_Handler,
		},
		{
			MethodName: "PatchProject",
			Handler:    _ProjectsV1_PatchProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectsV1_DeleteProject_Handler,
		},
		{
			MethodName: "ArchiveProject",
			Handler:    _ProjectsV1_ArchiveProject_Handler,
		},
		{
			MethodName: "RestoreProject",
			Handler:    _ProjectsV1_RestoreProject_Handler,
		},
		{
			MethodName: "BookmarkProject",
			Handler:    _ProjectsV1_BookmarkProject_Handler,
		},
		{
			MethodName: "UnbookmarkProject",
			Handler:    _ProjectsV1_UnbookmarkProject_Handler,
		},
		{
			MethodName: "EnableProjectCI",
			Handler:    _ProjectsV1_EnableProjectCI_Handler,
		},
		{
			MethodName: "DisableProjectCI",
			Handler:    _ProjectsV1_DisableProjectCI_Handler,
		},
		{
			MethodName: "GetProjectSettings",
			Handler:    _ProjectsV1_GetProjectSettings_Handler,
		},
		{
			MethodName: "UpdateProjectSettings",
			Handler:    _ProjectsV1_UpdateProjectSettings_Handler,
		},
		{
			MethodName: "PatchProjectSettings",
			Handler:    _ProjectsV1_PatchProjectSettings_Handler,
		},
		{
			MethodName: "GetProjectTeams",
			Handler:    _ProjectsV1_GetProjectTeams_Handler,
		},
		{
			MethodName: "UpdateProjectTeams",
			Handler:    _ProjectsV1_UpdateProjectTeams_Handler,
		},
		{
			MethodName: "PatchProjectTeams",
			Handler:    _ProjectsV1_PatchProjectTeams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ArtifactsStoresV1Client is the client API for ArtifactsStoresV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ArtifactsStoresV1Client interface {
	// List artifact stores names
	ListArtifactsStoreNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error)
	// List artifact stores
	ListArtifactsStores(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error)
	// Create artifact store
	CreateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Get artifact store
	GetArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Update artifact store
	UpdateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Patch artifact store
	PatchArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error)
	// Delete artifact store
	DeleteArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type artifactsStoresV1Client struct {
	cc *grpc.ClientConn
}

func NewArtifactsStoresV1Client(cc *grpc.ClientConn) ArtifactsStoresV1Client {
	return &artifactsStoresV1Client{cc}
}

func (c *artifactsStoresV1Client) ListArtifactsStoreNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error) {
	out := new(ListArtifactsStoresResponse)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/ListArtifactsStoreNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) ListArtifactsStores(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListArtifactsStoresResponse, error) {
	out := new(ListArtifactsStoresResponse)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/ListArtifactsStores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) CreateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/CreateArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) GetArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/GetArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) UpdateArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/UpdateArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) PatchArtifactsStore(ctx context.Context, in *ArtifactsStoreBodyRequest, opts ...grpc.CallOption) (*ArtifactsStore, error) {
	out := new(ArtifactsStore)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/PatchArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsStoresV1Client) DeleteArtifactsStore(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ArtifactsStoresV1/DeleteArtifactsStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactsStoresV1Server is the server API for ArtifactsStoresV1 service.
type ArtifactsStoresV1Server interface {
	// List artifact stores names
	ListArtifactsStoreNames(context.Context, *OwnerResourceListRequest) (*ListArtifactsStoresResponse, error)
	// List artifact stores
	ListArtifactsStores(context.Context, *OwnerResourceListRequest) (*ListArtifactsStoresResponse, error)
	// Create artifact store
	CreateArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Get artifact store
	GetArtifactsStore(context.Context, *OwnerEntityResourceRequest) (*ArtifactsStore, error)
	// Update artifact store
	UpdateArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Patch artifact store
	PatchArtifactsStore(context.Context, *ArtifactsStoreBodyRequest) (*ArtifactsStore, error)
	// Delete artifact store
	DeleteArtifactsStore(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedArtifactsStoresV1Server can be embedded to have forward compatible implementations.
type UnimplementedArtifactsStoresV1Server struct {
}

func (*UnimplementedArtifactsStoresV1Server) ListArtifactsStoreNames(ctx context.Context, req *OwnerResourceListRequest) (*ListArtifactsStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifactsStoreNames not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) ListArtifactsStores(ctx context.Context, req *OwnerResourceListRequest) (*ListArtifactsStoresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArtifactsStores not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) CreateArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) GetArtifactsStore(ctx context.Context, req *OwnerEntityResourceRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) UpdateArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) PatchArtifactsStore(ctx context.Context, req *ArtifactsStoreBodyRequest) (*ArtifactsStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchArtifactsStore not implemented")
}
func (*UnimplementedArtifactsStoresV1Server) DeleteArtifactsStore(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArtifactsStore not implemented")
}

func RegisterArtifactsStoresV1Server(s *grpc.Server, srv ArtifactsStoresV1Server) {
	s.RegisterService(&_ArtifactsStoresV1_serviceDesc, srv)
}

func _ArtifactsStoresV1_ListArtifactsStoreNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStoreNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/ListArtifactsStoreNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStoreNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_ListArtifactsStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/ListArtifactsStores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).ListArtifactsStores(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_CreateArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).CreateArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/CreateArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).CreateArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_GetArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).GetArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/GetArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).GetArtifactsStore(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_UpdateArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).UpdateArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/UpdateArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).UpdateArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_PatchArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArtifactsStoreBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).PatchArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/PatchArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).PatchArtifactsStore(ctx, req.(*ArtifactsStoreBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactsStoresV1_DeleteArtifactsStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsStoresV1Server).DeleteArtifactsStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ArtifactsStoresV1/DeleteArtifactsStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsStoresV1Server).DeleteArtifactsStore(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ArtifactsStoresV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ArtifactsStoresV1",
	HandlerType: (*ArtifactsStoresV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArtifactsStoreNames",
			Handler:    _ArtifactsStoresV1_ListArtifactsStoreNames_Handler,
		},
		{
			MethodName: "ListArtifactsStores",
			Handler:    _ArtifactsStoresV1_ListArtifactsStores_Handler,
		},
		{
			MethodName: "CreateArtifactsStore",
			Handler:    _ArtifactsStoresV1_CreateArtifactsStore_Handler,
		},
		{
			MethodName: "GetArtifactsStore",
			Handler:    _ArtifactsStoresV1_GetArtifactsStore_Handler,
		},
		{
			MethodName: "UpdateArtifactsStore",
			Handler:    _ArtifactsStoresV1_UpdateArtifactsStore_Handler,
		},
		{
			MethodName: "PatchArtifactsStore",
			Handler:    _ArtifactsStoresV1_PatchArtifactsStore_Handler,
		},
		{
			MethodName: "DeleteArtifactsStore",
			Handler:    _ArtifactsStoresV1_DeleteArtifactsStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// K8SConfigMapsV1Client is the client API for K8SConfigMapsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type K8SConfigMapsV1Client interface {
	// List k8s config map names
	ListK8SConfigMapNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// List k8s config maps
	ListK8SConfigMaps(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// Create k8s config map
	CreateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Get k8s config map
	GetK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Update k8s config map
	UpdateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Patch k8s config map
	PatchK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type k8SConfigMapsV1Client struct {
	cc *grpc.ClientConn
}

func NewK8SConfigMapsV1Client(cc *grpc.ClientConn) K8SConfigMapsV1Client {
	return &k8SConfigMapsV1Client{cc}
}

func (c *k8SConfigMapsV1Client) ListK8SConfigMapNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/ListK8sConfigMapNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) ListK8SConfigMaps(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/ListK8sConfigMaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) CreateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/CreateK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) GetK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/GetK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) UpdateK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/UpdateK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) PatchK8SConfigMap(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/PatchK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SConfigMapsV1Client) DeleteK8SConfigMap(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.K8sConfigMapsV1/DeleteK8sConfigMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SConfigMapsV1Server is the server API for K8SConfigMapsV1 service.
type K8SConfigMapsV1Server interface {
	// List k8s config map names
	ListK8SConfigMapNames(context.Context, *OwnerResourceListRequest) (*ListK8SResourcesResponse, error)
	// List k8s config maps
	ListK8SConfigMaps(context.Context, *OwnerResourceListRequest) (*ListK8SResourcesResponse, error)
	// Create k8s config map
	CreateK8SConfigMap(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Get k8s config map
	GetK8SConfigMap(context.Context, *OwnerEntityResourceRequest) (*K8SResource, error)
	// Update k8s config map
	UpdateK8SConfigMap(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Patch k8s config map
	PatchK8SConfigMap(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SConfigMap(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedK8SConfigMapsV1Server can be embedded to have forward compatible implementations.
type UnimplementedK8SConfigMapsV1Server struct {
}

func (*UnimplementedK8SConfigMapsV1Server) ListK8SConfigMapNames(ctx context.Context, req *OwnerResourceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SConfigMapNames not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) ListK8SConfigMaps(ctx context.Context, req *OwnerResourceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SConfigMaps not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) CreateK8SConfigMap(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) GetK8SConfigMap(ctx context.Context, req *OwnerEntityResourceRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) UpdateK8SConfigMap(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) PatchK8SConfigMap(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchK8SConfigMap not implemented")
}
func (*UnimplementedK8SConfigMapsV1Server) DeleteK8SConfigMap(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SConfigMap not implemented")
}

func RegisterK8SConfigMapsV1Server(s *grpc.Server, srv K8SConfigMapsV1Server) {
	s.RegisterService(&_K8SConfigMapsV1_serviceDesc, srv)
}

func _K8SConfigMapsV1_ListK8SConfigMapNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMapNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/ListK8SConfigMapNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMapNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_ListK8SConfigMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/ListK8SConfigMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).ListK8SConfigMaps(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_CreateK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).CreateK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/CreateK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).CreateK8SConfigMap(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_GetK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).GetK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/GetK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).GetK8SConfigMap(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_UpdateK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).UpdateK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/UpdateK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).UpdateK8SConfigMap(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_PatchK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).PatchK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/PatchK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).PatchK8SConfigMap(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SConfigMapsV1_DeleteK8SConfigMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SConfigMapsV1Server).DeleteK8SConfigMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sConfigMapsV1/DeleteK8SConfigMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SConfigMapsV1Server).DeleteK8SConfigMap(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _K8SConfigMapsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.K8sConfigMapsV1",
	HandlerType: (*K8SConfigMapsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListK8sConfigMapNames",
			Handler:    _K8SConfigMapsV1_ListK8SConfigMapNames_Handler,
		},
		{
			MethodName: "ListK8sConfigMaps",
			Handler:    _K8SConfigMapsV1_ListK8SConfigMaps_Handler,
		},
		{
			MethodName: "CreateK8sConfigMap",
			Handler:    _K8SConfigMapsV1_CreateK8SConfigMap_Handler,
		},
		{
			MethodName: "GetK8sConfigMap",
			Handler:    _K8SConfigMapsV1_GetK8SConfigMap_Handler,
		},
		{
			MethodName: "UpdateK8sConfigMap",
			Handler:    _K8SConfigMapsV1_UpdateK8SConfigMap_Handler,
		},
		{
			MethodName: "PatchK8sConfigMap",
			Handler:    _K8SConfigMapsV1_PatchK8SConfigMap_Handler,
		},
		{
			MethodName: "DeleteK8sConfigMap",
			Handler:    _K8SConfigMapsV1_DeleteK8SConfigMap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// K8SSecretsV1Client is the client API for K8SSecretsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type K8SSecretsV1Client interface {
	// List k8s secret names
	ListK8SSecretNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// List k8s secrets
	ListK8SSecrets(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error)
	// Create k8s secret
	CreateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Get k8s secret
	GetK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Update k8s secret
	UpdateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Patch k8s secret
	PatchK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type k8SSecretsV1Client struct {
	cc *grpc.ClientConn
}

func NewK8SSecretsV1Client(cc *grpc.ClientConn) K8SSecretsV1Client {
	return &k8SSecretsV1Client{cc}
}

func (c *k8SSecretsV1Client) ListK8SSecretNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/ListK8sSecretNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) ListK8SSecrets(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListK8SResourcesResponse, error) {
	out := new(ListK8SResourcesResponse)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/ListK8sSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) CreateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/CreateK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) GetK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/GetK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) UpdateK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/UpdateK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) PatchK8SSecret(ctx context.Context, in *K8SResourceBodyRequest, opts ...grpc.CallOption) (*K8SResource, error) {
	out := new(K8SResource)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/PatchK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SSecretsV1Client) DeleteK8SSecret(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.K8sSecretsV1/DeleteK8sSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SSecretsV1Server is the server API for K8SSecretsV1 service.
type K8SSecretsV1Server interface {
	// List k8s secret names
	ListK8SSecretNames(context.Context, *OwnerResourceListRequest) (*ListK8SResourcesResponse, error)
	// List k8s secrets
	ListK8SSecrets(context.Context, *OwnerResourceListRequest) (*ListK8SResourcesResponse, error)
	// Create k8s secret
	CreateK8SSecret(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Get k8s secret
	GetK8SSecret(context.Context, *OwnerEntityResourceRequest) (*K8SResource, error)
	// Update k8s secret
	UpdateK8SSecret(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Patch k8s secret
	PatchK8SSecret(context.Context, *K8SResourceBodyRequest) (*K8SResource, error)
	// Delete k8s config map
	DeleteK8SSecret(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedK8SSecretsV1Server can be embedded to have forward compatible implementations.
type UnimplementedK8SSecretsV1Server struct {
}

func (*UnimplementedK8SSecretsV1Server) ListK8SSecretNames(ctx context.Context, req *OwnerResourceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SSecretNames not implemented")
}
func (*UnimplementedK8SSecretsV1Server) ListK8SSecrets(ctx context.Context, req *OwnerResourceListRequest) (*ListK8SResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListK8SSecrets not implemented")
}
func (*UnimplementedK8SSecretsV1Server) CreateK8SSecret(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) GetK8SSecret(ctx context.Context, req *OwnerEntityResourceRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) UpdateK8SSecret(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) PatchK8SSecret(ctx context.Context, req *K8SResourceBodyRequest) (*K8SResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchK8SSecret not implemented")
}
func (*UnimplementedK8SSecretsV1Server) DeleteK8SSecret(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteK8SSecret not implemented")
}

func RegisterK8SSecretsV1Server(s *grpc.Server, srv K8SSecretsV1Server) {
	s.RegisterService(&_K8SSecretsV1_serviceDesc, srv)
}

func _K8SSecretsV1_ListK8SSecretNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).ListK8SSecretNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/ListK8SSecretNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).ListK8SSecretNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_ListK8SSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).ListK8SSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/ListK8SSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).ListK8SSecrets(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_CreateK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).CreateK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/CreateK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).CreateK8SSecret(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_GetK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).GetK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/GetK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).GetK8SSecret(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_UpdateK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).UpdateK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/UpdateK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).UpdateK8SSecret(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_PatchK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8SResourceBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).PatchK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/PatchK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).PatchK8SSecret(ctx, req.(*K8SResourceBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SSecretsV1_DeleteK8SSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SSecretsV1Server).DeleteK8SSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.K8sSecretsV1/DeleteK8SSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SSecretsV1Server).DeleteK8SSecret(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _K8SSecretsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.K8sSecretsV1",
	HandlerType: (*K8SSecretsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListK8sSecretNames",
			Handler:    _K8SSecretsV1_ListK8SSecretNames_Handler,
		},
		{
			MethodName: "ListK8sSecrets",
			Handler:    _K8SSecretsV1_ListK8SSecrets_Handler,
		},
		{
			MethodName: "CreateK8sSecret",
			Handler:    _K8SSecretsV1_CreateK8SSecret_Handler,
		},
		{
			MethodName: "GetK8sSecret",
			Handler:    _K8SSecretsV1_GetK8SSecret_Handler,
		},
		{
			MethodName: "UpdateK8sSecret",
			Handler:    _K8SSecretsV1_UpdateK8SSecret_Handler,
		},
		{
			MethodName: "PatchK8sSecret",
			Handler:    _K8SSecretsV1_PatchK8SSecret_Handler,
		},
		{
			MethodName: "DeleteK8sSecret",
			Handler:    _K8SSecretsV1_DeleteK8SSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// RegistryAccessesV1Client is the client API for RegistryAccessesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryAccessesV1Client interface {
	// List registry access names
	ListRegistryAccessNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// List registry access
	ListRegistryAccesses(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// Create registry access
	CreateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Get registry access
	GetRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Update registry access
	UpdateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Patch registry access
	PatchRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Delete registry access
	DeleteRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type registryAccessesV1Client struct {
	cc *grpc.ClientConn
}

func NewRegistryAccessesV1Client(cc *grpc.ClientConn) RegistryAccessesV1Client {
	return &registryAccessesV1Client{cc}
}

func (c *registryAccessesV1Client) ListRegistryAccessNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/ListRegistryAccessNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) ListRegistryAccesses(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/ListRegistryAccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) CreateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/CreateRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) GetRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/GetRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) UpdateRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/UpdateRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) PatchRegistryAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/PatchRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryAccessesV1Client) DeleteRegistryAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RegistryAccessesV1/DeleteRegistryAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryAccessesV1Server is the server API for RegistryAccessesV1 service.
type RegistryAccessesV1Server interface {
	// List registry access names
	ListRegistryAccessNames(context.Context, *OwnerResourceListRequest) (*ListHostAccessesResponse, error)
	// List registry access
	ListRegistryAccesses(context.Context, *OwnerResourceListRequest) (*ListHostAccessesResponse, error)
	// Create registry access
	CreateRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Get registry access
	GetRegistryAccess(context.Context, *OwnerEntityResourceRequest) (*HostAccess, error)
	// Update registry access
	UpdateRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Patch registry access
	PatchRegistryAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Delete registry access
	DeleteRegistryAccess(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedRegistryAccessesV1Server can be embedded to have forward compatible implementations.
type UnimplementedRegistryAccessesV1Server struct {
}

func (*UnimplementedRegistryAccessesV1Server) ListRegistryAccessNames(ctx context.Context, req *OwnerResourceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryAccessNames not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) ListRegistryAccesses(ctx context.Context, req *OwnerResourceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegistryAccesses not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) CreateRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) GetRegistryAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) UpdateRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) PatchRegistryAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRegistryAccess not implemented")
}
func (*UnimplementedRegistryAccessesV1Server) DeleteRegistryAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistryAccess not implemented")
}

func RegisterRegistryAccessesV1Server(s *grpc.Server, srv RegistryAccessesV1Server) {
	s.RegisterService(&_RegistryAccessesV1_serviceDesc, srv)
}

func _RegistryAccessesV1_ListRegistryAccessNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).ListRegistryAccessNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/ListRegistryAccessNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).ListRegistryAccessNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_ListRegistryAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).ListRegistryAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/ListRegistryAccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).ListRegistryAccesses(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_CreateRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).CreateRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/CreateRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).CreateRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_GetRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).GetRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/GetRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).GetRegistryAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_UpdateRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).UpdateRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/UpdateRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).UpdateRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_PatchRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).PatchRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/PatchRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).PatchRegistryAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryAccessesV1_DeleteRegistryAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryAccessesV1Server).DeleteRegistryAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RegistryAccessesV1/DeleteRegistryAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryAccessesV1Server).DeleteRegistryAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RegistryAccessesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RegistryAccessesV1",
	HandlerType: (*RegistryAccessesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRegistryAccessNames",
			Handler:    _RegistryAccessesV1_ListRegistryAccessNames_Handler,
		},
		{
			MethodName: "ListRegistryAccesses",
			Handler:    _RegistryAccessesV1_ListRegistryAccesses_Handler,
		},
		{
			MethodName: "CreateRegistryAccess",
			Handler:    _RegistryAccessesV1_CreateRegistryAccess_Handler,
		},
		{
			MethodName: "GetRegistryAccess",
			Handler:    _RegistryAccessesV1_GetRegistryAccess_Handler,
		},
		{
			MethodName: "UpdateRegistryAccess",
			Handler:    _RegistryAccessesV1_UpdateRegistryAccess_Handler,
		},
		{
			MethodName: "PatchRegistryAccess",
			Handler:    _RegistryAccessesV1_PatchRegistryAccess_Handler,
		},
		{
			MethodName: "DeleteRegistryAccess",
			Handler:    _RegistryAccessesV1_DeleteRegistryAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// GitAccessesV1Client is the client API for GitAccessesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitAccessesV1Client interface {
	// List git access names
	ListGitAccessNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// List git accesses
	ListGitAccesses(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error)
	// Create git accesses
	CreateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Get git access
	GetGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Update git access
	UpdateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Patch git access
	PatchGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error)
	// Delete git access
	DeleteGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type gitAccessesV1Client struct {
	cc *grpc.ClientConn
}

func NewGitAccessesV1Client(cc *grpc.ClientConn) GitAccessesV1Client {
	return &gitAccessesV1Client{cc}
}

func (c *gitAccessesV1Client) ListGitAccessNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/ListGitAccessNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) ListGitAccesses(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListHostAccessesResponse, error) {
	out := new(ListHostAccessesResponse)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/ListGitAccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) CreateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/CreateGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) GetGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/GetGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) UpdateGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/UpdateGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) PatchGitAccess(ctx context.Context, in *HostAccessBodyRequest, opts ...grpc.CallOption) (*HostAccess, error) {
	out := new(HostAccess)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/PatchGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitAccessesV1Client) DeleteGitAccess(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.GitAccessesV1/DeleteGitAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitAccessesV1Server is the server API for GitAccessesV1 service.
type GitAccessesV1Server interface {
	// List git access names
	ListGitAccessNames(context.Context, *OwnerResourceListRequest) (*ListHostAccessesResponse, error)
	// List git accesses
	ListGitAccesses(context.Context, *OwnerResourceListRequest) (*ListHostAccessesResponse, error)
	// Create git accesses
	CreateGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Get git access
	GetGitAccess(context.Context, *OwnerEntityResourceRequest) (*HostAccess, error)
	// Update git access
	UpdateGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Patch git access
	PatchGitAccess(context.Context, *HostAccessBodyRequest) (*HostAccess, error)
	// Delete git access
	DeleteGitAccess(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedGitAccessesV1Server can be embedded to have forward compatible implementations.
type UnimplementedGitAccessesV1Server struct {
}

func (*UnimplementedGitAccessesV1Server) ListGitAccessNames(ctx context.Context, req *OwnerResourceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitAccessNames not implemented")
}
func (*UnimplementedGitAccessesV1Server) ListGitAccesses(ctx context.Context, req *OwnerResourceListRequest) (*ListHostAccessesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGitAccesses not implemented")
}
func (*UnimplementedGitAccessesV1Server) CreateGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) GetGitAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) UpdateGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) PatchGitAccess(ctx context.Context, req *HostAccessBodyRequest) (*HostAccess, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchGitAccess not implemented")
}
func (*UnimplementedGitAccessesV1Server) DeleteGitAccess(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGitAccess not implemented")
}

func RegisterGitAccessesV1Server(s *grpc.Server, srv GitAccessesV1Server) {
	s.RegisterService(&_GitAccessesV1_serviceDesc, srv)
}

func _GitAccessesV1_ListGitAccessNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).ListGitAccessNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/ListGitAccessNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).ListGitAccessNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_ListGitAccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).ListGitAccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/ListGitAccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).ListGitAccesses(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_CreateGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).CreateGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/CreateGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).CreateGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_GetGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).GetGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/GetGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).GetGitAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_UpdateGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).UpdateGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/UpdateGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).UpdateGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_PatchGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostAccessBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).PatchGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/PatchGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).PatchGitAccess(ctx, req.(*HostAccessBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitAccessesV1_DeleteGitAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitAccessesV1Server).DeleteGitAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.GitAccessesV1/DeleteGitAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitAccessesV1Server).DeleteGitAccess(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitAccessesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.GitAccessesV1",
	HandlerType: (*GitAccessesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListGitAccessNames",
			Handler:    _GitAccessesV1_ListGitAccessNames_Handler,
		},
		{
			MethodName: "ListGitAccesses",
			Handler:    _GitAccessesV1_ListGitAccesses_Handler,
		},
		{
			MethodName: "CreateGitAccess",
			Handler:    _GitAccessesV1_CreateGitAccess_Handler,
		},
		{
			MethodName: "GetGitAccess",
			Handler:    _GitAccessesV1_GetGitAccess_Handler,
		},
		{
			MethodName: "UpdateGitAccess",
			Handler:    _GitAccessesV1_UpdateGitAccess_Handler,
		},
		{
			MethodName: "PatchGitAccess",
			Handler:    _GitAccessesV1_PatchGitAccess_Handler,
		},
		{
			MethodName: "DeleteGitAccess",
			Handler:    _GitAccessesV1_DeleteGitAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ProjectSearchesV1Client is the client API for ProjectSearchesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectSearchesV1Client interface {
	// List project search names
	ListProjectSearchNames(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error)
	// List project searches
	ListProjectSearches(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error)
	// Create project search
	CreateProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Get project search
	GetProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Search, error)
	// Update project search
	UpdateProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Patch project search
	PatchProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Delete project search
	DeleteProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Promote project search
	PromoteProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type projectSearchesV1Client struct {
	cc *grpc.ClientConn
}

func NewProjectSearchesV1Client(cc *grpc.ClientConn) ProjectSearchesV1Client {
	return &projectSearchesV1Client{cc}
}

func (c *projectSearchesV1Client) ListProjectSearchNames(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error) {
	out := new(ListSearchesResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/ListProjectSearchNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) ListProjectSearches(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error) {
	out := new(ListSearchesResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/ListProjectSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) CreateProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/CreateProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) GetProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/GetProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) UpdateProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/UpdateProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) PatchProjectSearch(ctx context.Context, in *ProjectSearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/PatchProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) DeleteProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/DeleteProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectSearchesV1Client) PromoteProjectSearch(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectSearchesV1/PromoteProjectSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectSearchesV1Server is the server API for ProjectSearchesV1 service.
type ProjectSearchesV1Server interface {
	// List project search names
	ListProjectSearchNames(context.Context, *ProjectResourceListRequest) (*ListSearchesResponse, error)
	// List project searches
	ListProjectSearches(context.Context, *ProjectResourceListRequest) (*ListSearchesResponse, error)
	// Create project search
	CreateProjectSearch(context.Context, *ProjectSearchBodyRequest) (*Search, error)
	// Get project search
	GetProjectSearch(context.Context, *ProjectEntityResourceRequest) (*Search, error)
	// Update project search
	UpdateProjectSearch(context.Context, *ProjectSearchBodyRequest) (*Search, error)
	// Patch project search
	PatchProjectSearch(context.Context, *ProjectSearchBodyRequest) (*Search, error)
	// Delete project search
	DeleteProjectSearch(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Promote project search
	PromoteProjectSearch(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedProjectSearchesV1Server can be embedded to have forward compatible implementations.
type UnimplementedProjectSearchesV1Server struct {
}

func (*UnimplementedProjectSearchesV1Server) ListProjectSearchNames(ctx context.Context, req *ProjectResourceListRequest) (*ListSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSearchNames not implemented")
}
func (*UnimplementedProjectSearchesV1Server) ListProjectSearches(ctx context.Context, req *ProjectResourceListRequest) (*ListSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSearches not implemented")
}
func (*UnimplementedProjectSearchesV1Server) CreateProjectSearch(ctx context.Context, req *ProjectSearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectSearch not implemented")
}
func (*UnimplementedProjectSearchesV1Server) GetProjectSearch(ctx context.Context, req *ProjectEntityResourceRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectSearch not implemented")
}
func (*UnimplementedProjectSearchesV1Server) UpdateProjectSearch(ctx context.Context, req *ProjectSearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectSearch not implemented")
}
func (*UnimplementedProjectSearchesV1Server) PatchProjectSearch(ctx context.Context, req *ProjectSearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectSearch not implemented")
}
func (*UnimplementedProjectSearchesV1Server) DeleteProjectSearch(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectSearch not implemented")
}
func (*UnimplementedProjectSearchesV1Server) PromoteProjectSearch(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteProjectSearch not implemented")
}

func RegisterProjectSearchesV1Server(s *grpc.Server, srv ProjectSearchesV1Server) {
	s.RegisterService(&_ProjectSearchesV1_serviceDesc, srv)
}

func _ProjectSearchesV1_ListProjectSearchNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).ListProjectSearchNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/ListProjectSearchNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).ListProjectSearchNames(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_ListProjectSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).ListProjectSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/ListProjectSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).ListProjectSearches(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_CreateProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).CreateProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/CreateProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).CreateProjectSearch(ctx, req.(*ProjectSearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_GetProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).GetProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/GetProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).GetProjectSearch(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_UpdateProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).UpdateProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/UpdateProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).UpdateProjectSearch(ctx, req.(*ProjectSearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_PatchProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).PatchProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/PatchProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).PatchProjectSearch(ctx, req.(*ProjectSearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_DeleteProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).DeleteProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/DeleteProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).DeleteProjectSearch(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectSearchesV1_PromoteProjectSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectSearchesV1Server).PromoteProjectSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectSearchesV1/PromoteProjectSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectSearchesV1Server).PromoteProjectSearch(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectSearchesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProjectSearchesV1",
	HandlerType: (*ProjectSearchesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectSearchNames",
			Handler:    _ProjectSearchesV1_ListProjectSearchNames_Handler,
		},
		{
			MethodName: "ListProjectSearches",
			Handler:    _ProjectSearchesV1_ListProjectSearches_Handler,
		},
		{
			MethodName: "CreateProjectSearch",
			Handler:    _ProjectSearchesV1_CreateProjectSearch_Handler,
		},
		{
			MethodName: "GetProjectSearch",
			Handler:    _ProjectSearchesV1_GetProjectSearch_Handler,
		},
		{
			MethodName: "UpdateProjectSearch",
			Handler:    _ProjectSearchesV1_UpdateProjectSearch_Handler,
		},
		{
			MethodName: "PatchProjectSearch",
			Handler:    _ProjectSearchesV1_PatchProjectSearch_Handler,
		},
		{
			MethodName: "DeleteProjectSearch",
			Handler:    _ProjectSearchesV1_DeleteProjectSearch_Handler,
		},
		{
			MethodName: "PromoteProjectSearch",
			Handler:    _ProjectSearchesV1_PromoteProjectSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// SearchesV1Client is the client API for SearchesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchesV1Client interface {
	// List search names
	ListSearchNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error)
	// List searches
	ListSearches(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error)
	// Create search
	CreateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Get search
	GetSearch(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Search, error)
	// Update search
	UpdateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Patch search
	PatchSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error)
	// Delete search
	DeleteSearch(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type searchesV1Client struct {
	cc *grpc.ClientConn
}

func NewSearchesV1Client(cc *grpc.ClientConn) SearchesV1Client {
	return &searchesV1Client{cc}
}

func (c *searchesV1Client) ListSearchNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error) {
	out := new(ListSearchesResponse)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/ListSearchNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) ListSearches(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListSearchesResponse, error) {
	out := new(ListSearchesResponse)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/ListSearches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) CreateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/CreateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) GetSearch(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/GetSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) UpdateSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/UpdateSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) PatchSearch(ctx context.Context, in *SearchBodyRequest, opts ...grpc.CallOption) (*Search, error) {
	out := new(Search)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/PatchSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchesV1Client) DeleteSearch(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.SearchesV1/DeleteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchesV1Server is the server API for SearchesV1 service.
type SearchesV1Server interface {
	// List search names
	ListSearchNames(context.Context, *OwnerResourceListRequest) (*ListSearchesResponse, error)
	// List searches
	ListSearches(context.Context, *OwnerResourceListRequest) (*ListSearchesResponse, error)
	// Create search
	CreateSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Get search
	GetSearch(context.Context, *OwnerEntityResourceRequest) (*Search, error)
	// Update search
	UpdateSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Patch search
	PatchSearch(context.Context, *SearchBodyRequest) (*Search, error)
	// Delete search
	DeleteSearch(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedSearchesV1Server can be embedded to have forward compatible implementations.
type UnimplementedSearchesV1Server struct {
}

func (*UnimplementedSearchesV1Server) ListSearchNames(ctx context.Context, req *OwnerResourceListRequest) (*ListSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearchNames not implemented")
}
func (*UnimplementedSearchesV1Server) ListSearches(ctx context.Context, req *OwnerResourceListRequest) (*ListSearchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSearches not implemented")
}
func (*UnimplementedSearchesV1Server) CreateSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSearch not implemented")
}
func (*UnimplementedSearchesV1Server) GetSearch(ctx context.Context, req *OwnerEntityResourceRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearch not implemented")
}
func (*UnimplementedSearchesV1Server) UpdateSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSearch not implemented")
}
func (*UnimplementedSearchesV1Server) PatchSearch(ctx context.Context, req *SearchBodyRequest) (*Search, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSearch not implemented")
}
func (*UnimplementedSearchesV1Server) DeleteSearch(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSearch not implemented")
}

func RegisterSearchesV1Server(s *grpc.Server, srv SearchesV1Server) {
	s.RegisterService(&_SearchesV1_serviceDesc, srv)
}

func _SearchesV1_ListSearchNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).ListSearchNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/ListSearchNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).ListSearchNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_ListSearches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).ListSearches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/ListSearches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).ListSearches(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_CreateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).CreateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/CreateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).CreateSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_GetSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).GetSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/GetSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).GetSearch(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_UpdateSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).UpdateSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/UpdateSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).UpdateSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_PatchSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).PatchSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/PatchSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).PatchSearch(ctx, req.(*SearchBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchesV1_DeleteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchesV1Server).DeleteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SearchesV1/DeleteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchesV1Server).DeleteSearch(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SearchesV1",
	HandlerType: (*SearchesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSearchNames",
			Handler:    _SearchesV1_ListSearchNames_Handler,
		},
		{
			MethodName: "ListSearches",
			Handler:    _SearchesV1_ListSearches_Handler,
		},
		{
			MethodName: "CreateSearch",
			Handler:    _SearchesV1_CreateSearch_Handler,
		},
		{
			MethodName: "GetSearch",
			Handler:    _SearchesV1_GetSearch_Handler,
		},
		{
			MethodName: "UpdateSearch",
			Handler:    _SearchesV1_UpdateSearch_Handler,
		},
		{
			MethodName: "PatchSearch",
			Handler:    _SearchesV1_PatchSearch_Handler,
		},
		{
			MethodName: "DeleteSearch",
			Handler:    _SearchesV1_DeleteSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// ProjectDashboardsV1Client is the client API for ProjectDashboardsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProjectDashboardsV1Client interface {
	// List project dashboard
	ListProjectDashboardNames(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	// List project dashboards
	ListProjectDashboards(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	// Create project dashboard
	CreateProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Get project dashboard
	GetProjectDashboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Update project dashboard
	UpdateProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Patch project dashboard
	PatchProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Delete project dashboard
	DeleteProjectDashboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Promote project dashboard
	PromoteProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
}

type projectDashboardsV1Client struct {
	cc *grpc.ClientConn
}

func NewProjectDashboardsV1Client(cc *grpc.ClientConn) ProjectDashboardsV1Client {
	return &projectDashboardsV1Client{cc}
}

func (c *projectDashboardsV1Client) ListProjectDashboardNames(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/ListProjectDashboardNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) ListProjectDashboards(ctx context.Context, in *ProjectResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/ListProjectDashboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) CreateProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/CreateProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) GetProjectDashboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/GetProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) UpdateProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/UpdateProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) PatchProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/PatchProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) DeleteProjectDashboard(ctx context.Context, in *ProjectEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/DeleteProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectDashboardsV1Client) PromoteProjectDashboard(ctx context.Context, in *ProjectDashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.ProjectDashboardsV1/PromoteProjectDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectDashboardsV1Server is the server API for ProjectDashboardsV1 service.
type ProjectDashboardsV1Server interface {
	// List project dashboard
	ListProjectDashboardNames(context.Context, *ProjectResourceListRequest) (*ListDashboardsResponse, error)
	// List project dashboards
	ListProjectDashboards(context.Context, *ProjectResourceListRequest) (*ListDashboardsResponse, error)
	// Create project dashboard
	CreateProjectDashboard(context.Context, *ProjectDashboardBodyRequest) (*Dashboard, error)
	// Get project dashboard
	GetProjectDashboard(context.Context, *ProjectEntityResourceRequest) (*Dashboard, error)
	// Update project dashboard
	UpdateProjectDashboard(context.Context, *ProjectDashboardBodyRequest) (*Dashboard, error)
	// Patch project dashboard
	PatchProjectDashboard(context.Context, *ProjectDashboardBodyRequest) (*Dashboard, error)
	// Delete project dashboard
	DeleteProjectDashboard(context.Context, *ProjectEntityResourceRequest) (*empty.Empty, error)
	// Promote project dashboard
	PromoteProjectDashboard(context.Context, *ProjectDashboardBodyRequest) (*Dashboard, error)
}

// UnimplementedProjectDashboardsV1Server can be embedded to have forward compatible implementations.
type UnimplementedProjectDashboardsV1Server struct {
}

func (*UnimplementedProjectDashboardsV1Server) ListProjectDashboardNames(ctx context.Context, req *ProjectResourceListRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectDashboardNames not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) ListProjectDashboards(ctx context.Context, req *ProjectResourceListRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectDashboards not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) CreateProjectDashboard(ctx context.Context, req *ProjectDashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectDashboard not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) GetProjectDashboard(ctx context.Context, req *ProjectEntityResourceRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectDashboard not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) UpdateProjectDashboard(ctx context.Context, req *ProjectDashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectDashboard not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) PatchProjectDashboard(ctx context.Context, req *ProjectDashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchProjectDashboard not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) DeleteProjectDashboard(ctx context.Context, req *ProjectEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectDashboard not implemented")
}
func (*UnimplementedProjectDashboardsV1Server) PromoteProjectDashboard(ctx context.Context, req *ProjectDashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteProjectDashboard not implemented")
}

func RegisterProjectDashboardsV1Server(s *grpc.Server, srv ProjectDashboardsV1Server) {
	s.RegisterService(&_ProjectDashboardsV1_serviceDesc, srv)
}

func _ProjectDashboardsV1_ListProjectDashboardNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).ListProjectDashboardNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/ListProjectDashboardNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).ListProjectDashboardNames(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_ListProjectDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).ListProjectDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/ListProjectDashboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).ListProjectDashboards(ctx, req.(*ProjectResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_CreateProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).CreateProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/CreateProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).CreateProjectDashboard(ctx, req.(*ProjectDashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_GetProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).GetProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/GetProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).GetProjectDashboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_UpdateProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).UpdateProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/UpdateProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).UpdateProjectDashboard(ctx, req.(*ProjectDashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_PatchProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).PatchProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/PatchProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).PatchProjectDashboard(ctx, req.(*ProjectDashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_DeleteProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).DeleteProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/DeleteProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).DeleteProjectDashboard(ctx, req.(*ProjectEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectDashboardsV1_PromoteProjectDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectDashboardsV1Server).PromoteProjectDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ProjectDashboardsV1/PromoteProjectDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectDashboardsV1Server).PromoteProjectDashboard(ctx, req.(*ProjectDashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectDashboardsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ProjectDashboardsV1",
	HandlerType: (*ProjectDashboardsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjectDashboardNames",
			Handler:    _ProjectDashboardsV1_ListProjectDashboardNames_Handler,
		},
		{
			MethodName: "ListProjectDashboards",
			Handler:    _ProjectDashboardsV1_ListProjectDashboards_Handler,
		},
		{
			MethodName: "CreateProjectDashboard",
			Handler:    _ProjectDashboardsV1_CreateProjectDashboard_Handler,
		},
		{
			MethodName: "GetProjectDashboard",
			Handler:    _ProjectDashboardsV1_GetProjectDashboard_Handler,
		},
		{
			MethodName: "UpdateProjectDashboard",
			Handler:    _ProjectDashboardsV1_UpdateProjectDashboard_Handler,
		},
		{
			MethodName: "PatchProjectDashboard",
			Handler:    _ProjectDashboardsV1_PatchProjectDashboard_Handler,
		},
		{
			MethodName: "DeleteProjectDashboard",
			Handler:    _ProjectDashboardsV1_DeleteProjectDashboard_Handler,
		},
		{
			MethodName: "PromoteProjectDashboard",
			Handler:    _ProjectDashboardsV1_PromoteProjectDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// DashboardsV1Client is the client API for DashboardsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DashboardsV1Client interface {
	// List dashboard names
	ListDashboardNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	// List dashboards
	ListDashboards(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error)
	// Create dashboard
	CreateDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Get dashboard
	GetDashboard(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Update dashboard
	UpdateDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Patch dashboard
	PatchDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error)
	// Delete dashboard
	DeleteDashboard(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type dashboardsV1Client struct {
	cc *grpc.ClientConn
}

func NewDashboardsV1Client(cc *grpc.ClientConn) DashboardsV1Client {
	return &dashboardsV1Client{cc}
}

func (c *dashboardsV1Client) ListDashboardNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/ListDashboardNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) ListDashboards(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListDashboardsResponse, error) {
	out := new(ListDashboardsResponse)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/ListDashboards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) CreateDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/CreateDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) GetDashboard(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/GetDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) UpdateDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/UpdateDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) PatchDashboard(ctx context.Context, in *DashboardBodyRequest, opts ...grpc.CallOption) (*Dashboard, error) {
	out := new(Dashboard)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/PatchDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardsV1Client) DeleteDashboard(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.DashboardsV1/DeleteDashboard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardsV1Server is the server API for DashboardsV1 service.
type DashboardsV1Server interface {
	// List dashboard names
	ListDashboardNames(context.Context, *OwnerResourceListRequest) (*ListDashboardsResponse, error)
	// List dashboards
	ListDashboards(context.Context, *OwnerResourceListRequest) (*ListDashboardsResponse, error)
	// Create dashboard
	CreateDashboard(context.Context, *DashboardBodyRequest) (*Dashboard, error)
	// Get dashboard
	GetDashboard(context.Context, *OwnerEntityResourceRequest) (*Dashboard, error)
	// Update dashboard
	UpdateDashboard(context.Context, *DashboardBodyRequest) (*Dashboard, error)
	// Patch dashboard
	PatchDashboard(context.Context, *DashboardBodyRequest) (*Dashboard, error)
	// Delete dashboard
	DeleteDashboard(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedDashboardsV1Server can be embedded to have forward compatible implementations.
type UnimplementedDashboardsV1Server struct {
}

func (*UnimplementedDashboardsV1Server) ListDashboardNames(ctx context.Context, req *OwnerResourceListRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboardNames not implemented")
}
func (*UnimplementedDashboardsV1Server) ListDashboards(ctx context.Context, req *OwnerResourceListRequest) (*ListDashboardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDashboards not implemented")
}
func (*UnimplementedDashboardsV1Server) CreateDashboard(ctx context.Context, req *DashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDashboard not implemented")
}
func (*UnimplementedDashboardsV1Server) GetDashboard(ctx context.Context, req *OwnerEntityResourceRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDashboard not implemented")
}
func (*UnimplementedDashboardsV1Server) UpdateDashboard(ctx context.Context, req *DashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDashboard not implemented")
}
func (*UnimplementedDashboardsV1Server) PatchDashboard(ctx context.Context, req *DashboardBodyRequest) (*Dashboard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchDashboard not implemented")
}
func (*UnimplementedDashboardsV1Server) DeleteDashboard(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDashboard not implemented")
}

func RegisterDashboardsV1Server(s *grpc.Server, srv DashboardsV1Server) {
	s.RegisterService(&_DashboardsV1_serviceDesc, srv)
}

func _DashboardsV1_ListDashboardNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).ListDashboardNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/ListDashboardNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).ListDashboardNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_ListDashboards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).ListDashboards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/ListDashboards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).ListDashboards(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_CreateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).CreateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/CreateDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).CreateDashboard(ctx, req.(*DashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_GetDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).GetDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/GetDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).GetDashboard(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_UpdateDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).UpdateDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/UpdateDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).UpdateDashboard(ctx, req.(*DashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_PatchDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DashboardBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).PatchDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/PatchDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).PatchDashboard(ctx, req.(*DashboardBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DashboardsV1_DeleteDashboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardsV1Server).DeleteDashboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.DashboardsV1/DeleteDashboard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardsV1Server).DeleteDashboard(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DashboardsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.DashboardsV1",
	HandlerType: (*DashboardsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDashboardNames",
			Handler:    _DashboardsV1_ListDashboardNames_Handler,
		},
		{
			MethodName: "ListDashboards",
			Handler:    _DashboardsV1_ListDashboards_Handler,
		},
		{
			MethodName: "CreateDashboard",
			Handler:    _DashboardsV1_CreateDashboard_Handler,
		},
		{
			MethodName: "GetDashboard",
			Handler:    _DashboardsV1_GetDashboard_Handler,
		},
		{
			MethodName: "UpdateDashboard",
			Handler:    _DashboardsV1_UpdateDashboard_Handler,
		},
		{
			MethodName: "PatchDashboard",
			Handler:    _DashboardsV1_PatchDashboard_Handler,
		},
		{
			MethodName: "DeleteDashboard",
			Handler:    _DashboardsV1_DeleteDashboard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// RunProfilesV1Client is the client API for RunProfilesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RunProfilesV1Client interface {
	// List run profiles names
	ListRunProfileNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListRunProfilesResponse, error)
	// List run profiles
	ListRunProfiles(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListRunProfilesResponse, error)
	// Create run profile
	CreateRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error)
	// Get run profile
	GetRunProfile(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*RunProfile, error)
	// Update run profile
	UpdateRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error)
	// Patch run profile
	PatchRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error)
	// Delete run profile
	DeleteRunProfile(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type runProfilesV1Client struct {
	cc *grpc.ClientConn
}

func NewRunProfilesV1Client(cc *grpc.ClientConn) RunProfilesV1Client {
	return &runProfilesV1Client{cc}
}

func (c *runProfilesV1Client) ListRunProfileNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListRunProfilesResponse, error) {
	out := new(ListRunProfilesResponse)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/ListRunProfileNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) ListRunProfiles(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListRunProfilesResponse, error) {
	out := new(ListRunProfilesResponse)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/ListRunProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) CreateRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error) {
	out := new(RunProfile)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/CreateRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) GetRunProfile(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*RunProfile, error) {
	out := new(RunProfile)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/GetRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) UpdateRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error) {
	out := new(RunProfile)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/UpdateRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) PatchRunProfile(ctx context.Context, in *RunProfileBodyRequest, opts ...grpc.CallOption) (*RunProfile, error) {
	out := new(RunProfile)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/PatchRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runProfilesV1Client) DeleteRunProfile(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.RunProfilesV1/DeleteRunProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunProfilesV1Server is the server API for RunProfilesV1 service.
type RunProfilesV1Server interface {
	// List run profiles names
	ListRunProfileNames(context.Context, *OwnerResourceListRequest) (*ListRunProfilesResponse, error)
	// List run profiles
	ListRunProfiles(context.Context, *OwnerResourceListRequest) (*ListRunProfilesResponse, error)
	// Create run profile
	CreateRunProfile(context.Context, *RunProfileBodyRequest) (*RunProfile, error)
	// Get run profile
	GetRunProfile(context.Context, *OwnerEntityResourceRequest) (*RunProfile, error)
	// Update run profile
	UpdateRunProfile(context.Context, *RunProfileBodyRequest) (*RunProfile, error)
	// Patch run profile
	PatchRunProfile(context.Context, *RunProfileBodyRequest) (*RunProfile, error)
	// Delete run profile
	DeleteRunProfile(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedRunProfilesV1Server can be embedded to have forward compatible implementations.
type UnimplementedRunProfilesV1Server struct {
}

func (*UnimplementedRunProfilesV1Server) ListRunProfileNames(ctx context.Context, req *OwnerResourceListRequest) (*ListRunProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunProfileNames not implemented")
}
func (*UnimplementedRunProfilesV1Server) ListRunProfiles(ctx context.Context, req *OwnerResourceListRequest) (*ListRunProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunProfiles not implemented")
}
func (*UnimplementedRunProfilesV1Server) CreateRunProfile(ctx context.Context, req *RunProfileBodyRequest) (*RunProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRunProfile not implemented")
}
func (*UnimplementedRunProfilesV1Server) GetRunProfile(ctx context.Context, req *OwnerEntityResourceRequest) (*RunProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunProfile not implemented")
}
func (*UnimplementedRunProfilesV1Server) UpdateRunProfile(ctx context.Context, req *RunProfileBodyRequest) (*RunProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRunProfile not implemented")
}
func (*UnimplementedRunProfilesV1Server) PatchRunProfile(ctx context.Context, req *RunProfileBodyRequest) (*RunProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRunProfile not implemented")
}
func (*UnimplementedRunProfilesV1Server) DeleteRunProfile(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRunProfile not implemented")
}

func RegisterRunProfilesV1Server(s *grpc.Server, srv RunProfilesV1Server) {
	s.RegisterService(&_RunProfilesV1_serviceDesc, srv)
}

func _RunProfilesV1_ListRunProfileNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).ListRunProfileNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/ListRunProfileNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).ListRunProfileNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_ListRunProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).ListRunProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/ListRunProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).ListRunProfiles(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_CreateRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProfileBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).CreateRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/CreateRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).CreateRunProfile(ctx, req.(*RunProfileBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_GetRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).GetRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/GetRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).GetRunProfile(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_UpdateRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProfileBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).UpdateRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/UpdateRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).UpdateRunProfile(ctx, req.(*RunProfileBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_PatchRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunProfileBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).PatchRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/PatchRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).PatchRunProfile(ctx, req.(*RunProfileBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RunProfilesV1_DeleteRunProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunProfilesV1Server).DeleteRunProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.RunProfilesV1/DeleteRunProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunProfilesV1Server).DeleteRunProfile(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RunProfilesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.RunProfilesV1",
	HandlerType: (*RunProfilesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRunProfileNames",
			Handler:    _RunProfilesV1_ListRunProfileNames_Handler,
		},
		{
			MethodName: "ListRunProfiles",
			Handler:    _RunProfilesV1_ListRunProfiles_Handler,
		},
		{
			MethodName: "CreateRunProfile",
			Handler:    _RunProfilesV1_CreateRunProfile_Handler,
		},
		{
			MethodName: "GetRunProfile",
			Handler:    _RunProfilesV1_GetRunProfile_Handler,
		},
		{
			MethodName: "UpdateRunProfile",
			Handler:    _RunProfilesV1_UpdateRunProfile_Handler,
		},
		{
			MethodName: "PatchRunProfile",
			Handler:    _RunProfilesV1_PatchRunProfile_Handler,
		},
		{
			MethodName: "DeleteRunProfile",
			Handler:    _RunProfilesV1_DeleteRunProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// AgentsV1Client is the client API for AgentsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AgentsV1Client interface {
	// List agents names
	ListAgentNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// List agents
	ListAgents(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// Create agent
	CreateAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error)
	// Get agent
	GetAgent(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Agent, error)
	// Update agent
	UpdateAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error)
	// Patch agent
	PatchAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error)
	// Delete agent
	DeleteAgent(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type agentsV1Client struct {
	cc *grpc.ClientConn
}

func NewAgentsV1Client(cc *grpc.ClientConn) AgentsV1Client {
	return &agentsV1Client{cc}
}

func (c *agentsV1Client) ListAgentNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/ListAgentNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) ListAgents(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) CreateAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/CreateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) GetAgent(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) UpdateAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) PatchAgent(ctx context.Context, in *AgentBodyRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/PatchAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentsV1Client) DeleteAgent(ctx context.Context, in *OwnerEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.AgentsV1/DeleteAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentsV1Server is the server API for AgentsV1 service.
type AgentsV1Server interface {
	// List agents names
	ListAgentNames(context.Context, *OwnerResourceListRequest) (*ListAgentsResponse, error)
	// List agents
	ListAgents(context.Context, *OwnerResourceListRequest) (*ListAgentsResponse, error)
	// Create agent
	CreateAgent(context.Context, *AgentBodyRequest) (*Agent, error)
	// Get agent
	GetAgent(context.Context, *OwnerEntityResourceRequest) (*Agent, error)
	// Update agent
	UpdateAgent(context.Context, *AgentBodyRequest) (*Agent, error)
	// Patch agent
	PatchAgent(context.Context, *AgentBodyRequest) (*Agent, error)
	// Delete agent
	DeleteAgent(context.Context, *OwnerEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedAgentsV1Server can be embedded to have forward compatible implementations.
type UnimplementedAgentsV1Server struct {
}

func (*UnimplementedAgentsV1Server) ListAgentNames(ctx context.Context, req *OwnerResourceListRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgentNames not implemented")
}
func (*UnimplementedAgentsV1Server) ListAgents(ctx context.Context, req *OwnerResourceListRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (*UnimplementedAgentsV1Server) CreateAgent(ctx context.Context, req *AgentBodyRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAgent not implemented")
}
func (*UnimplementedAgentsV1Server) GetAgent(ctx context.Context, req *OwnerEntityResourceRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (*UnimplementedAgentsV1Server) UpdateAgent(ctx context.Context, req *AgentBodyRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (*UnimplementedAgentsV1Server) PatchAgent(ctx context.Context, req *AgentBodyRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchAgent not implemented")
}
func (*UnimplementedAgentsV1Server) DeleteAgent(ctx context.Context, req *OwnerEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAgent not implemented")
}

func RegisterAgentsV1Server(s *grpc.Server, srv AgentsV1Server) {
	s.RegisterService(&_AgentsV1_serviceDesc, srv)
}

func _AgentsV1_ListAgentNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).ListAgentNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/ListAgentNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).ListAgentNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).ListAgents(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_CreateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).CreateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/CreateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).CreateAgent(ctx, req.(*AgentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).GetAgent(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).UpdateAgent(ctx, req.(*AgentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_PatchAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).PatchAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/PatchAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).PatchAgent(ctx, req.(*AgentBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentsV1_DeleteAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentsV1Server).DeleteAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AgentsV1/DeleteAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentsV1Server).DeleteAgent(ctx, req.(*OwnerEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AgentsV1",
	HandlerType: (*AgentsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgentNames",
			Handler:    _AgentsV1_ListAgentNames_Handler,
		},
		{
			MethodName: "ListAgents",
			Handler:    _AgentsV1_ListAgents_Handler,
		},
		{
			MethodName: "CreateAgent",
			Handler:    _AgentsV1_CreateAgent_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _AgentsV1_GetAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AgentsV1_UpdateAgent_Handler,
		},
		{
			MethodName: "PatchAgent",
			Handler:    _AgentsV1_PatchAgent_Handler,
		},
		{
			MethodName: "DeleteAgent",
			Handler:    _AgentsV1_DeleteAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// QueuesV1Client is the client API for QueuesV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueuesV1Client interface {
	// List queues names
	ListQueueNames(ctx context.Context, in *AgentResourceListRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	// List queues
	ListQueues(ctx context.Context, in *AgentResourceListRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error)
	// Create queue
	CreateQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Agent, error)
	// Get queue
	GetQueue(ctx context.Context, in *AgentEntityResourceRequest, opts ...grpc.CallOption) (*Queue, error)
	// Update queue
	UpdateQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Queue, error)
	// Patch queue
	PatchQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Queue, error)
	// Delete queue
	DeleteQueue(ctx context.Context, in *AgentEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type queuesV1Client struct {
	cc *grpc.ClientConn
}

func NewQueuesV1Client(cc *grpc.ClientConn) QueuesV1Client {
	return &queuesV1Client{cc}
}

func (c *queuesV1Client) ListQueueNames(ctx context.Context, in *AgentResourceListRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/ListQueueNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) ListQueues(ctx context.Context, in *AgentResourceListRequest, opts ...grpc.CallOption) (*ListQueuesResponse, error) {
	out := new(ListQueuesResponse)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/ListQueues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) CreateQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Agent, error) {
	out := new(Agent)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/CreateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) GetQueue(ctx context.Context, in *AgentEntityResourceRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/GetQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) UpdateQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/UpdateQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) PatchQueue(ctx context.Context, in *QueueBodyRequest, opts ...grpc.CallOption) (*Queue, error) {
	out := new(Queue)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/PatchQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesV1Client) DeleteQueue(ctx context.Context, in *AgentEntityResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.QueuesV1/DeleteQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueuesV1Server is the server API for QueuesV1 service.
type QueuesV1Server interface {
	// List queues names
	ListQueueNames(context.Context, *AgentResourceListRequest) (*ListQueuesResponse, error)
	// List queues
	ListQueues(context.Context, *AgentResourceListRequest) (*ListQueuesResponse, error)
	// Create queue
	CreateQueue(context.Context, *QueueBodyRequest) (*Agent, error)
	// Get queue
	GetQueue(context.Context, *AgentEntityResourceRequest) (*Queue, error)
	// Update queue
	UpdateQueue(context.Context, *QueueBodyRequest) (*Queue, error)
	// Patch queue
	PatchQueue(context.Context, *QueueBodyRequest) (*Queue, error)
	// Delete queue
	DeleteQueue(context.Context, *AgentEntityResourceRequest) (*empty.Empty, error)
}

// UnimplementedQueuesV1Server can be embedded to have forward compatible implementations.
type UnimplementedQueuesV1Server struct {
}

func (*UnimplementedQueuesV1Server) ListQueueNames(ctx context.Context, req *AgentResourceListRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueueNames not implemented")
}
func (*UnimplementedQueuesV1Server) ListQueues(ctx context.Context, req *AgentResourceListRequest) (*ListQueuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQueues not implemented")
}
func (*UnimplementedQueuesV1Server) CreateQueue(ctx context.Context, req *QueueBodyRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQueue not implemented")
}
func (*UnimplementedQueuesV1Server) GetQueue(ctx context.Context, req *AgentEntityResourceRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQueue not implemented")
}
func (*UnimplementedQueuesV1Server) UpdateQueue(ctx context.Context, req *QueueBodyRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQueue not implemented")
}
func (*UnimplementedQueuesV1Server) PatchQueue(ctx context.Context, req *QueueBodyRequest) (*Queue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchQueue not implemented")
}
func (*UnimplementedQueuesV1Server) DeleteQueue(ctx context.Context, req *AgentEntityResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQueue not implemented")
}

func RegisterQueuesV1Server(s *grpc.Server, srv QueuesV1Server) {
	s.RegisterService(&_QueuesV1_serviceDesc, srv)
}

func _QueuesV1_ListQueueNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).ListQueueNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/ListQueueNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).ListQueueNames(ctx, req.(*AgentResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_ListQueues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).ListQueues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/ListQueues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).ListQueues(ctx, req.(*AgentResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_CreateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).CreateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/CreateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).CreateQueue(ctx, req.(*QueueBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_GetQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).GetQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/GetQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).GetQueue(ctx, req.(*AgentEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_UpdateQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).UpdateQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/UpdateQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).UpdateQueue(ctx, req.(*QueueBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_PatchQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).PatchQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/PatchQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).PatchQueue(ctx, req.(*QueueBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueuesV1_DeleteQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentEntityResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesV1Server).DeleteQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.QueuesV1/DeleteQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesV1Server).DeleteQueue(ctx, req.(*AgentEntityResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _QueuesV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.QueuesV1",
	HandlerType: (*QueuesV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListQueueNames",
			Handler:    _QueuesV1_ListQueueNames_Handler,
		},
		{
			MethodName: "ListQueues",
			Handler:    _QueuesV1_ListQueues_Handler,
		},
		{
			MethodName: "CreateQueue",
			Handler:    _QueuesV1_CreateQueue_Handler,
		},
		{
			MethodName: "GetQueue",
			Handler:    _QueuesV1_GetQueue_Handler,
		},
		{
			MethodName: "UpdateQueue",
			Handler:    _QueuesV1_UpdateQueue_Handler,
		},
		{
			MethodName: "PatchQueue",
			Handler:    _QueuesV1_PatchQueue_Handler,
		},
		{
			MethodName: "DeleteQueue",
			Handler:    _QueuesV1_DeleteQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// AuthV1Client is the client API for AuthV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthV1Client interface {
	// Login
	Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error)
}

type authV1Client struct {
	cc *grpc.ClientConn
}

func NewAuthV1Client(cc *grpc.ClientConn) AuthV1Client {
	return &authV1Client{cc}
}

func (c *authV1Client) Login(ctx context.Context, in *CredsBodyRequest, opts ...grpc.CallOption) (*Auth, error) {
	out := new(Auth)
	err := c.cc.Invoke(ctx, "/v1.AuthV1/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV1Server is the server API for AuthV1 service.
type AuthV1Server interface {
	// Login
	Login(context.Context, *CredsBodyRequest) (*Auth, error)
}

// UnimplementedAuthV1Server can be embedded to have forward compatible implementations.
type UnimplementedAuthV1Server struct {
}

func (*UnimplementedAuthV1Server) Login(ctx context.Context, req *CredsBodyRequest) (*Auth, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}

func RegisterAuthV1Server(s *grpc.Server, srv AuthV1Server) {
	s.RegisterService(&_AuthV1_serviceDesc, srv)
}

func _AuthV1_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CredsBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.AuthV1/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).Login(ctx, req.(*CredsBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AuthV1",
	HandlerType: (*AuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _AuthV1_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// UsersV1Client is the client API for UsersV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UsersV1Client interface {
	// Get current user
	GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error)
}

type usersV1Client struct {
	cc *grpc.ClientConn
}

func NewUsersV1Client(cc *grpc.ClientConn) UsersV1Client {
	return &usersV1Client{cc}
}

func (c *usersV1Client) GetUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/v1.UsersV1/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersV1Server is the server API for UsersV1 service.
type UsersV1Server interface {
	// Get current user
	GetUser(context.Context, *empty.Empty) (*User, error)
}

// UnimplementedUsersV1Server can be embedded to have forward compatible implementations.
type UnimplementedUsersV1Server struct {
}

func (*UnimplementedUsersV1Server) GetUser(ctx context.Context, req *empty.Empty) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterUsersV1Server(s *grpc.Server, srv UsersV1Server) {
	s.RegisterService(&_UsersV1_serviceDesc, srv)
}

func _UsersV1_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersV1Server).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UsersV1/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersV1Server).GetUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _UsersV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UsersV1",
	HandlerType: (*UsersV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UsersV1_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// VersionsV1Client is the client API for VersionsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VersionsV1Client interface {
	// Get versions
	GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error)
	// Get log handler
	GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error)
}

type versionsV1Client struct {
	cc *grpc.ClientConn
}

func NewVersionsV1Client(cc *grpc.ClientConn) VersionsV1Client {
	return &versionsV1Client{cc}
}

func (c *versionsV1Client) GetVersions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Versions, error) {
	out := new(Versions)
	err := c.cc.Invoke(ctx, "/v1.VersionsV1/GetVersions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionsV1Client) GetLogHandler(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogHandler, error) {
	out := new(LogHandler)
	err := c.cc.Invoke(ctx, "/v1.VersionsV1/GetLogHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersionsV1Server is the server API for VersionsV1 service.
type VersionsV1Server interface {
	// Get versions
	GetVersions(context.Context, *empty.Empty) (*Versions, error)
	// Get log handler
	GetLogHandler(context.Context, *empty.Empty) (*LogHandler, error)
}

// UnimplementedVersionsV1Server can be embedded to have forward compatible implementations.
type UnimplementedVersionsV1Server struct {
}

func (*UnimplementedVersionsV1Server) GetVersions(ctx context.Context, req *empty.Empty) (*Versions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersions not implemented")
}
func (*UnimplementedVersionsV1Server) GetLogHandler(ctx context.Context, req *empty.Empty) (*LogHandler, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogHandler not implemented")
}

func RegisterVersionsV1Server(s *grpc.Server, srv VersionsV1Server) {
	s.RegisterService(&_VersionsV1_serviceDesc, srv)
}

func _VersionsV1_GetVersions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsV1Server).GetVersions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionsV1/GetVersions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsV1Server).GetVersions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionsV1_GetLogHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionsV1Server).GetLogHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VersionsV1/GetLogHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionsV1Server).GetLogHandler(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VersionsV1",
	HandlerType: (*VersionsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersions",
			Handler:    _VersionsV1_GetVersions_Handler,
		},
		{
			MethodName: "GetLogHandler",
			Handler:    _VersionsV1_GetLogHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// OrganizationsV1Client is the client API for OrganizationsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrganizationsV1Client interface {
	// List organizations names
	ListOrganizationNames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// List organizations
	ListOrganizations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error)
	// Create organization
	CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	// Get organization
	GetOrganization(ctx context.Context, in *OwnerResourceRequest, opts ...grpc.CallOption) (*Organization, error)
	// Update organization
	UpdateOrganization(ctx context.Context, in *OrganizationBodyRequest, opts ...grpc.CallOption) (*Organization, error)
	// Patch organization
	PatchOrganization(ctx context.Context, in *OrganizationBodyRequest, opts ...grpc.CallOption) (*Organization, error)
	// Delete organization
	DeleteOrganization(ctx context.Context, in *OwnerResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get organization members
	ListOrganizationMembers(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error)
	// Create organization member
	CreateOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error)
	// Get organization member details
	GetOrganizationMember(ctx context.Context, in *OrgMemeberResourceRequest, opts ...grpc.CallOption) (*OrganizationMember, error)
	// Update organization member
	UpdateOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error)
	// Patch organization member
	PatchOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error)
	// Delete organization member details
	DeleteOrganizationMember(ctx context.Context, in *OrgMemeberResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type organizationsV1Client struct {
	cc *grpc.ClientConn
}

func NewOrganizationsV1Client(cc *grpc.ClientConn) OrganizationsV1Client {
	return &organizationsV1Client{cc}
}

func (c *organizationsV1Client) ListOrganizationNames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/ListOrganizationNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) ListOrganizations(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListOrganizationsResponse, error) {
	out := new(ListOrganizationsResponse)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/ListOrganizations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/CreateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) GetOrganization(ctx context.Context, in *OwnerResourceRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/GetOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) UpdateOrganization(ctx context.Context, in *OrganizationBodyRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/UpdateOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) PatchOrganization(ctx context.Context, in *OrganizationBodyRequest, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/PatchOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) DeleteOrganization(ctx context.Context, in *OwnerResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/DeleteOrganization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) ListOrganizationMembers(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListOrganizationMembersResponse, error) {
	out := new(ListOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/ListOrganizationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) CreateOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error) {
	out := new(OrganizationMember)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/CreateOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) GetOrganizationMember(ctx context.Context, in *OrgMemeberResourceRequest, opts ...grpc.CallOption) (*OrganizationMember, error) {
	out := new(OrganizationMember)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/GetOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) UpdateOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error) {
	out := new(OrganizationMember)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/UpdateOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) PatchOrganizationMember(ctx context.Context, in *OrganizationMemberBodyRequest, opts ...grpc.CallOption) (*OrganizationMember, error) {
	out := new(OrganizationMember)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/PatchOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *organizationsV1Client) DeleteOrganizationMember(ctx context.Context, in *OrgMemeberResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.OrganizationsV1/DeleteOrganizationMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrganizationsV1Server is the server API for OrganizationsV1 service.
type OrganizationsV1Server interface {
	// List organizations names
	ListOrganizationNames(context.Context, *empty.Empty) (*ListOrganizationsResponse, error)
	// List organizations
	ListOrganizations(context.Context, *empty.Empty) (*ListOrganizationsResponse, error)
	// Create organization
	CreateOrganization(context.Context, *Organization) (*Organization, error)
	// Get organization
	GetOrganization(context.Context, *OwnerResourceRequest) (*Organization, error)
	// Update organization
	UpdateOrganization(context.Context, *OrganizationBodyRequest) (*Organization, error)
	// Patch organization
	PatchOrganization(context.Context, *OrganizationBodyRequest) (*Organization, error)
	// Delete organization
	DeleteOrganization(context.Context, *OwnerResourceRequest) (*empty.Empty, error)
	// Get organization members
	ListOrganizationMembers(context.Context, *OwnerResourceListRequest) (*ListOrganizationMembersResponse, error)
	// Create organization member
	CreateOrganizationMember(context.Context, *OrganizationMemberBodyRequest) (*OrganizationMember, error)
	// Get organization member details
	GetOrganizationMember(context.Context, *OrgMemeberResourceRequest) (*OrganizationMember, error)
	// Update organization member
	UpdateOrganizationMember(context.Context, *OrganizationMemberBodyRequest) (*OrganizationMember, error)
	// Patch organization member
	PatchOrganizationMember(context.Context, *OrganizationMemberBodyRequest) (*OrganizationMember, error)
	// Delete organization member details
	DeleteOrganizationMember(context.Context, *OrgMemeberResourceRequest) (*empty.Empty, error)
}

// UnimplementedOrganizationsV1Server can be embedded to have forward compatible implementations.
type UnimplementedOrganizationsV1Server struct {
}

func (*UnimplementedOrganizationsV1Server) ListOrganizationNames(ctx context.Context, req *empty.Empty) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationNames not implemented")
}
func (*UnimplementedOrganizationsV1Server) ListOrganizations(ctx context.Context, req *empty.Empty) (*ListOrganizationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizations not implemented")
}
func (*UnimplementedOrganizationsV1Server) CreateOrganization(ctx context.Context, req *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (*UnimplementedOrganizationsV1Server) GetOrganization(ctx context.Context, req *OwnerResourceRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (*UnimplementedOrganizationsV1Server) UpdateOrganization(ctx context.Context, req *OrganizationBodyRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganization not implemented")
}
func (*UnimplementedOrganizationsV1Server) PatchOrganization(ctx context.Context, req *OrganizationBodyRequest) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganization not implemented")
}
func (*UnimplementedOrganizationsV1Server) DeleteOrganization(ctx context.Context, req *OwnerResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganization not implemented")
}
func (*UnimplementedOrganizationsV1Server) ListOrganizationMembers(ctx context.Context, req *OwnerResourceListRequest) (*ListOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganizationMembers not implemented")
}
func (*UnimplementedOrganizationsV1Server) CreateOrganizationMember(ctx context.Context, req *OrganizationMemberBodyRequest) (*OrganizationMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganizationMember not implemented")
}
func (*UnimplementedOrganizationsV1Server) GetOrganizationMember(ctx context.Context, req *OrgMemeberResourceRequest) (*OrganizationMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationMember not implemented")
}
func (*UnimplementedOrganizationsV1Server) UpdateOrganizationMember(ctx context.Context, req *OrganizationMemberBodyRequest) (*OrganizationMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrganizationMember not implemented")
}
func (*UnimplementedOrganizationsV1Server) PatchOrganizationMember(ctx context.Context, req *OrganizationMemberBodyRequest) (*OrganizationMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOrganizationMember not implemented")
}
func (*UnimplementedOrganizationsV1Server) DeleteOrganizationMember(ctx context.Context, req *OrgMemeberResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrganizationMember not implemented")
}

func RegisterOrganizationsV1Server(s *grpc.Server, srv OrganizationsV1Server) {
	s.RegisterService(&_OrganizationsV1_serviceDesc, srv)
}

func _OrganizationsV1_ListOrganizationNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).ListOrganizationNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/ListOrganizationNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).ListOrganizationNames(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_ListOrganizations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).ListOrganizations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/ListOrganizations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).ListOrganizations(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/CreateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).CreateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/GetOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).GetOrganization(ctx, req.(*OwnerResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_UpdateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).UpdateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/UpdateOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).UpdateOrganization(ctx, req.(*OrganizationBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_PatchOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).PatchOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/PatchOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).PatchOrganization(ctx, req.(*OrganizationBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_DeleteOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).DeleteOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/DeleteOrganization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).DeleteOrganization(ctx, req.(*OwnerResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_ListOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).ListOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/ListOrganizationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).ListOrganizationMembers(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_CreateOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).CreateOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/CreateOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).CreateOrganizationMember(ctx, req.(*OrganizationMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_GetOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgMemeberResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).GetOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/GetOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).GetOrganizationMember(ctx, req.(*OrgMemeberResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_UpdateOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).UpdateOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/UpdateOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).UpdateOrganizationMember(ctx, req.(*OrganizationMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_PatchOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).PatchOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/PatchOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).PatchOrganizationMember(ctx, req.(*OrganizationMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrganizationsV1_DeleteOrganizationMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgMemeberResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrganizationsV1Server).DeleteOrganizationMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.OrganizationsV1/DeleteOrganizationMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrganizationsV1Server).DeleteOrganizationMember(ctx, req.(*OrgMemeberResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrganizationsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.OrganizationsV1",
	HandlerType: (*OrganizationsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOrganizationNames",
			Handler:    _OrganizationsV1_ListOrganizationNames_Handler,
		},
		{
			MethodName: "ListOrganizations",
			Handler:    _OrganizationsV1_ListOrganizations_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _OrganizationsV1_CreateOrganization_Handler,
		},
		{
			MethodName: "GetOrganization",
			Handler:    _OrganizationsV1_GetOrganization_Handler,
		},
		{
			MethodName: "UpdateOrganization",
			Handler:    _OrganizationsV1_UpdateOrganization_Handler,
		},
		{
			MethodName: "PatchOrganization",
			Handler:    _OrganizationsV1_PatchOrganization_Handler,
		},
		{
			MethodName: "DeleteOrganization",
			Handler:    _OrganizationsV1_DeleteOrganization_Handler,
		},
		{
			MethodName: "ListOrganizationMembers",
			Handler:    _OrganizationsV1_ListOrganizationMembers_Handler,
		},
		{
			MethodName: "CreateOrganizationMember",
			Handler:    _OrganizationsV1_CreateOrganizationMember_Handler,
		},
		{
			MethodName: "GetOrganizationMember",
			Handler:    _OrganizationsV1_GetOrganizationMember_Handler,
		},
		{
			MethodName: "UpdateOrganizationMember",
			Handler:    _OrganizationsV1_UpdateOrganizationMember_Handler,
		},
		{
			MethodName: "PatchOrganizationMember",
			Handler:    _OrganizationsV1_PatchOrganizationMember_Handler,
		},
		{
			MethodName: "DeleteOrganizationMember",
			Handler:    _OrganizationsV1_DeleteOrganizationMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// TeamsV1Client is the client API for TeamsV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TeamsV1Client interface {
	// List teams names
	ListTeamNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error)
	// List teams
	ListTeams(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error)
	// Create team
	CreateTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error)
	// Get team
	GetTeam(ctx context.Context, in *TeamResourceRequest, opts ...grpc.CallOption) (*Team, error)
	// Update team
	UpdateTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error)
	// Patch team
	PatchTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error)
	// Delete team
	DeleteTeam(ctx context.Context, in *TeamResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get team members
	ListTeamMembers(ctx context.Context, in *TeamResourceListRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error)
	// Create team member
	CreateTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error)
	// Get team member details
	GetTeamMember(ctx context.Context, in *TeamMemeberResourceRequest, opts ...grpc.CallOption) (*TeamMember, error)
	// Update team member
	UpdateTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error)
	// Patch tram member
	PatchTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error)
	// Delete team member details
	DeleteTeamMember(ctx context.Context, in *TeamMemeberResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type teamsV1Client struct {
	cc *grpc.ClientConn
}

func NewTeamsV1Client(cc *grpc.ClientConn) TeamsV1Client {
	return &teamsV1Client{cc}
}

func (c *teamsV1Client) ListTeamNames(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error) {
	out := new(ListTeamsResponse)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/ListTeamNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) ListTeams(ctx context.Context, in *OwnerResourceListRequest, opts ...grpc.CallOption) (*ListTeamsResponse, error) {
	out := new(ListTeamsResponse)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/ListTeams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) CreateTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/CreateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeam(ctx context.Context, in *TeamResourceRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/GetTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) UpdateTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/UpdateTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) PatchTeam(ctx context.Context, in *TeamBodyRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/PatchTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) DeleteTeam(ctx context.Context, in *TeamResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) ListTeamMembers(ctx context.Context, in *TeamResourceListRequest, opts ...grpc.CallOption) (*ListTeamMembersResponse, error) {
	out := new(ListTeamMembersResponse)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/ListTeamMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) CreateTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error) {
	out := new(TeamMember)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/CreateTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) GetTeamMember(ctx context.Context, in *TeamMemeberResourceRequest, opts ...grpc.CallOption) (*TeamMember, error) {
	out := new(TeamMember)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/GetTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) UpdateTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error) {
	out := new(TeamMember)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/UpdateTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) PatchTeamMember(ctx context.Context, in *TeamMemberBodyRequest, opts ...grpc.CallOption) (*TeamMember, error) {
	out := new(TeamMember)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/PatchTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsV1Client) DeleteTeamMember(ctx context.Context, in *TeamMemeberResourceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/v1.TeamsV1/DeleteTeamMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsV1Server is the server API for TeamsV1 service.
type TeamsV1Server interface {
	// List teams names
	ListTeamNames(context.Context, *OwnerResourceListRequest) (*ListTeamsResponse, error)
	// List teams
	ListTeams(context.Context, *OwnerResourceListRequest) (*ListTeamsResponse, error)
	// Create team
	CreateTeam(context.Context, *TeamBodyRequest) (*Team, error)
	// Get team
	GetTeam(context.Context, *TeamResourceRequest) (*Team, error)
	// Update team
	UpdateTeam(context.Context, *TeamBodyRequest) (*Team, error)
	// Patch team
	PatchTeam(context.Context, *TeamBodyRequest) (*Team, error)
	// Delete team
	DeleteTeam(context.Context, *TeamResourceRequest) (*empty.Empty, error)
	// Get team members
	ListTeamMembers(context.Context, *TeamResourceListRequest) (*ListTeamMembersResponse, error)
	// Create team member
	CreateTeamMember(context.Context, *TeamMemberBodyRequest) (*TeamMember, error)
	// Get team member details
	GetTeamMember(context.Context, *TeamMemeberResourceRequest) (*TeamMember, error)
	// Update team member
	UpdateTeamMember(context.Context, *TeamMemberBodyRequest) (*TeamMember, error)
	// Patch tram member
	PatchTeamMember(context.Context, *TeamMemberBodyRequest) (*TeamMember, error)
	// Delete team member details
	DeleteTeamMember(context.Context, *TeamMemeberResourceRequest) (*empty.Empty, error)
}

// UnimplementedTeamsV1Server can be embedded to have forward compatible implementations.
type UnimplementedTeamsV1Server struct {
}

func (*UnimplementedTeamsV1Server) ListTeamNames(ctx context.Context, req *OwnerResourceListRequest) (*ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamNames not implemented")
}
func (*UnimplementedTeamsV1Server) ListTeams(ctx context.Context, req *OwnerResourceListRequest) (*ListTeamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (*UnimplementedTeamsV1Server) CreateTeam(ctx context.Context, req *TeamBodyRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeam not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeam(ctx context.Context, req *TeamResourceRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeam not implemented")
}
func (*UnimplementedTeamsV1Server) UpdateTeam(ctx context.Context, req *TeamBodyRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeam not implemented")
}
func (*UnimplementedTeamsV1Server) PatchTeam(ctx context.Context, req *TeamBodyRequest) (*Team, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTeam not implemented")
}
func (*UnimplementedTeamsV1Server) DeleteTeam(ctx context.Context, req *TeamResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (*UnimplementedTeamsV1Server) ListTeamMembers(ctx context.Context, req *TeamResourceListRequest) (*ListTeamMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeamMembers not implemented")
}
func (*UnimplementedTeamsV1Server) CreateTeamMember(ctx context.Context, req *TeamMemberBodyRequest) (*TeamMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeamMember not implemented")
}
func (*UnimplementedTeamsV1Server) GetTeamMember(ctx context.Context, req *TeamMemeberResourceRequest) (*TeamMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamMember not implemented")
}
func (*UnimplementedTeamsV1Server) UpdateTeamMember(ctx context.Context, req *TeamMemberBodyRequest) (*TeamMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeamMember not implemented")
}
func (*UnimplementedTeamsV1Server) PatchTeamMember(ctx context.Context, req *TeamMemberBodyRequest) (*TeamMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTeamMember not implemented")
}
func (*UnimplementedTeamsV1Server) DeleteTeamMember(ctx context.Context, req *TeamMemeberResourceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeamMember not implemented")
}

func RegisterTeamsV1Server(s *grpc.Server, srv TeamsV1Server) {
	s.RegisterService(&_TeamsV1_serviceDesc, srv)
}

func _TeamsV1_ListTeamNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).ListTeamNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/ListTeamNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).ListTeamNames(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnerResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).ListTeams(ctx, req.(*OwnerResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).CreateTeam(ctx, req.(*TeamBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeam(ctx, req.(*TeamResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).UpdateTeam(ctx, req.(*TeamBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_PatchTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).PatchTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/PatchTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).PatchTeam(ctx, req.(*TeamBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).DeleteTeam(ctx, req.(*TeamResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_ListTeamMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamResourceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).ListTeamMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/ListTeamMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).ListTeamMembers(ctx, req.(*TeamResourceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_CreateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).CreateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/CreateTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).CreateTeamMember(ctx, req.(*TeamMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_GetTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMemeberResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).GetTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/GetTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).GetTeamMember(ctx, req.(*TeamMemeberResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_UpdateTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).UpdateTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/UpdateTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).UpdateTeamMember(ctx, req.(*TeamMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_PatchTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMemberBodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).PatchTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/PatchTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).PatchTeamMember(ctx, req.(*TeamMemberBodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TeamsV1_DeleteTeamMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamMemeberResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsV1Server).DeleteTeamMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.TeamsV1/DeleteTeamMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsV1Server).DeleteTeamMember(ctx, req.(*TeamMemeberResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TeamsV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.TeamsV1",
	HandlerType: (*TeamsV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTeamNames",
			Handler:    _TeamsV1_ListTeamNames_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _TeamsV1_ListTeams_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _TeamsV1_CreateTeam_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _TeamsV1_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _TeamsV1_UpdateTeam_Handler,
		},
		{
			MethodName: "PatchTeam",
			Handler:    _TeamsV1_PatchTeam_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _TeamsV1_DeleteTeam_Handler,
		},
		{
			MethodName: "ListTeamMembers",
			Handler:    _TeamsV1_ListTeamMembers_Handler,
		},
		{
			MethodName: "CreateTeamMember",
			Handler:    _TeamsV1_CreateTeamMember_Handler,
		},
		{
			MethodName: "GetTeamMember",
			Handler:    _TeamsV1_GetTeamMember_Handler,
		},
		{
			MethodName: "UpdateTeamMember",
			Handler:    _TeamsV1_UpdateTeamMember_Handler,
		},
		{
			MethodName: "PatchTeamMember",
			Handler:    _TeamsV1_PatchTeamMember_Handler,
		},
		{
			MethodName: "DeleteTeamMember",
			Handler:    _TeamsV1_DeleteTeamMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}

// SchemasV1Client is the client API for SchemasV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemasV1Client interface {
	// Get random
	NoOp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schemas.Schemas, error)
}

type schemasV1Client struct {
	cc *grpc.ClientConn
}

func NewSchemasV1Client(cc *grpc.ClientConn) SchemasV1Client {
	return &schemasV1Client{cc}
}

func (c *schemasV1Client) NoOp(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*schemas.Schemas, error) {
	out := new(schemas.Schemas)
	err := c.cc.Invoke(ctx, "/v1.SchemasV1/NoOp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemasV1Server is the server API for SchemasV1 service.
type SchemasV1Server interface {
	// Get random
	NoOp(context.Context, *empty.Empty) (*schemas.Schemas, error)
}

// UnimplementedSchemasV1Server can be embedded to have forward compatible implementations.
type UnimplementedSchemasV1Server struct {
}

func (*UnimplementedSchemasV1Server) NoOp(ctx context.Context, req *empty.Empty) (*schemas.Schemas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoOp not implemented")
}

func RegisterSchemasV1Server(s *grpc.Server, srv SchemasV1Server) {
	s.RegisterService(&_SchemasV1_serviceDesc, srv)
}

func _SchemasV1_NoOp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemasV1Server).NoOp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.SchemasV1/NoOp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemasV1Server).NoOp(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchemasV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v1.SchemasV1",
	HandlerType: (*SchemasV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoOp",
			Handler:    _SchemasV1_NoOp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/polyaxon_sdk.proto",
}
