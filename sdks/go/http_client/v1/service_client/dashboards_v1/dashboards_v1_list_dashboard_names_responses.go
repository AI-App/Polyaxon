// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// DashboardsV1ListDashboardNamesReader is a Reader for the DashboardsV1ListDashboardNames structure.
type DashboardsV1ListDashboardNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DashboardsV1ListDashboardNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDashboardsV1ListDashboardNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDashboardsV1ListDashboardNamesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDashboardsV1ListDashboardNamesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDashboardsV1ListDashboardNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDashboardsV1ListDashboardNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDashboardsV1ListDashboardNamesOK creates a DashboardsV1ListDashboardNamesOK with default headers values
func NewDashboardsV1ListDashboardNamesOK() *DashboardsV1ListDashboardNamesOK {
	return &DashboardsV1ListDashboardNamesOK{}
}

/*DashboardsV1ListDashboardNamesOK handles this case with default header values.

A successful response.
*/
type DashboardsV1ListDashboardNamesOK struct {
	Payload *service_model.V1ListDashboardsResponse
}

func (o *DashboardsV1ListDashboardNamesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/dashboards/names][%d] dashboardsV1ListDashboardNamesOK  %+v", 200, o.Payload)
}

func (o *DashboardsV1ListDashboardNamesOK) GetPayload() *service_model.V1ListDashboardsResponse {
	return o.Payload
}

func (o *DashboardsV1ListDashboardNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListDashboardsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1ListDashboardNamesNoContent creates a DashboardsV1ListDashboardNamesNoContent with default headers values
func NewDashboardsV1ListDashboardNamesNoContent() *DashboardsV1ListDashboardNamesNoContent {
	return &DashboardsV1ListDashboardNamesNoContent{}
}

/*DashboardsV1ListDashboardNamesNoContent handles this case with default header values.

No content.
*/
type DashboardsV1ListDashboardNamesNoContent struct {
	Payload interface{}
}

func (o *DashboardsV1ListDashboardNamesNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/dashboards/names][%d] dashboardsV1ListDashboardNamesNoContent  %+v", 204, o.Payload)
}

func (o *DashboardsV1ListDashboardNamesNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1ListDashboardNamesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1ListDashboardNamesForbidden creates a DashboardsV1ListDashboardNamesForbidden with default headers values
func NewDashboardsV1ListDashboardNamesForbidden() *DashboardsV1ListDashboardNamesForbidden {
	return &DashboardsV1ListDashboardNamesForbidden{}
}

/*DashboardsV1ListDashboardNamesForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type DashboardsV1ListDashboardNamesForbidden struct {
	Payload interface{}
}

func (o *DashboardsV1ListDashboardNamesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/dashboards/names][%d] dashboardsV1ListDashboardNamesForbidden  %+v", 403, o.Payload)
}

func (o *DashboardsV1ListDashboardNamesForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1ListDashboardNamesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1ListDashboardNamesNotFound creates a DashboardsV1ListDashboardNamesNotFound with default headers values
func NewDashboardsV1ListDashboardNamesNotFound() *DashboardsV1ListDashboardNamesNotFound {
	return &DashboardsV1ListDashboardNamesNotFound{}
}

/*DashboardsV1ListDashboardNamesNotFound handles this case with default header values.

Resource does not exist.
*/
type DashboardsV1ListDashboardNamesNotFound struct {
	Payload interface{}
}

func (o *DashboardsV1ListDashboardNamesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/dashboards/names][%d] dashboardsV1ListDashboardNamesNotFound  %+v", 404, o.Payload)
}

func (o *DashboardsV1ListDashboardNamesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1ListDashboardNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1ListDashboardNamesDefault creates a DashboardsV1ListDashboardNamesDefault with default headers values
func NewDashboardsV1ListDashboardNamesDefault(code int) *DashboardsV1ListDashboardNamesDefault {
	return &DashboardsV1ListDashboardNamesDefault{
		_statusCode: code,
	}
}

/*DashboardsV1ListDashboardNamesDefault handles this case with default header values.

An unexpected error response
*/
type DashboardsV1ListDashboardNamesDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the dashboards v1 list dashboard names default response
func (o *DashboardsV1ListDashboardNamesDefault) Code() int {
	return o._statusCode
}

func (o *DashboardsV1ListDashboardNamesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/dashboards/names][%d] DashboardsV1_ListDashboardNames default  %+v", o._statusCode, o.Payload)
}

func (o *DashboardsV1ListDashboardNamesDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *DashboardsV1ListDashboardNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
