// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dashboards v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboards v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	DashboardsV1CreateDashboard(params *DashboardsV1CreateDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1CreateDashboardOK, *DashboardsV1CreateDashboardNoContent, error)

	DashboardsV1DeleteDashboard(params *DashboardsV1DeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1DeleteDashboardOK, *DashboardsV1DeleteDashboardNoContent, error)

	DashboardsV1GetDashboard(params *DashboardsV1GetDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1GetDashboardOK, *DashboardsV1GetDashboardNoContent, error)

	DashboardsV1ListDashboardNames(params *DashboardsV1ListDashboardNamesParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1ListDashboardNamesOK, *DashboardsV1ListDashboardNamesNoContent, error)

	DashboardsV1ListDashboards(params *DashboardsV1ListDashboardsParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1ListDashboardsOK, *DashboardsV1ListDashboardsNoContent, error)

	DashboardsV1PatchDashboard(params *DashboardsV1PatchDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1PatchDashboardOK, *DashboardsV1PatchDashboardNoContent, error)

	DashboardsV1UpdateDashboard(params *DashboardsV1UpdateDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1UpdateDashboardOK, *DashboardsV1UpdateDashboardNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DashboardsV1CreateDashboard dashboards v1 create dashboard API
*/
func (a *Client) DashboardsV1CreateDashboard(params *DashboardsV1CreateDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1CreateDashboardOK, *DashboardsV1CreateDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1CreateDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_CreateDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1CreateDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1CreateDashboardOK:
		return value, nil, nil
	case *DashboardsV1CreateDashboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1CreateDashboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1DeleteDashboard dashboards v1 delete dashboard API
*/
func (a *Client) DashboardsV1DeleteDashboard(params *DashboardsV1DeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1DeleteDashboardOK, *DashboardsV1DeleteDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1DeleteDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_DeleteDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1DeleteDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1DeleteDashboardOK:
		return value, nil, nil
	case *DashboardsV1DeleteDashboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1DeleteDashboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1GetDashboard dashboards v1 get dashboard API
*/
func (a *Client) DashboardsV1GetDashboard(params *DashboardsV1GetDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1GetDashboardOK, *DashboardsV1GetDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1GetDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_GetDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1GetDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1GetDashboardOK:
		return value, nil, nil
	case *DashboardsV1GetDashboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1GetDashboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1ListDashboardNames dashboards v1 list dashboard names API
*/
func (a *Client) DashboardsV1ListDashboardNames(params *DashboardsV1ListDashboardNamesParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1ListDashboardNamesOK, *DashboardsV1ListDashboardNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1ListDashboardNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_ListDashboardNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1ListDashboardNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1ListDashboardNamesOK:
		return value, nil, nil
	case *DashboardsV1ListDashboardNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1ListDashboardNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1ListDashboards dashboards v1 list dashboards API
*/
func (a *Client) DashboardsV1ListDashboards(params *DashboardsV1ListDashboardsParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1ListDashboardsOK, *DashboardsV1ListDashboardsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1ListDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_ListDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1ListDashboardsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1ListDashboardsOK:
		return value, nil, nil
	case *DashboardsV1ListDashboardsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1ListDashboardsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1PatchDashboard dashboards v1 patch dashboard API
*/
func (a *Client) DashboardsV1PatchDashboard(params *DashboardsV1PatchDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1PatchDashboardOK, *DashboardsV1PatchDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1PatchDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_PatchDashboard",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards/{dashboard.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1PatchDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1PatchDashboardOK:
		return value, nil, nil
	case *DashboardsV1PatchDashboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1PatchDashboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DashboardsV1UpdateDashboard dashboards v1 update dashboard API
*/
func (a *Client) DashboardsV1UpdateDashboard(params *DashboardsV1UpdateDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DashboardsV1UpdateDashboardOK, *DashboardsV1UpdateDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDashboardsV1UpdateDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DashboardsV1_UpdateDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/dashboards/{dashboard.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DashboardsV1UpdateDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DashboardsV1UpdateDashboardOK:
		return value, nil, nil
	case *DashboardsV1UpdateDashboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DashboardsV1UpdateDashboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
