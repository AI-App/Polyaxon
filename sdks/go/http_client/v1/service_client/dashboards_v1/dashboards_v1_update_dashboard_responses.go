// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// DashboardsV1UpdateDashboardReader is a Reader for the DashboardsV1UpdateDashboard structure.
type DashboardsV1UpdateDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DashboardsV1UpdateDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDashboardsV1UpdateDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDashboardsV1UpdateDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDashboardsV1UpdateDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDashboardsV1UpdateDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDashboardsV1UpdateDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDashboardsV1UpdateDashboardOK creates a DashboardsV1UpdateDashboardOK with default headers values
func NewDashboardsV1UpdateDashboardOK() *DashboardsV1UpdateDashboardOK {
	return &DashboardsV1UpdateDashboardOK{}
}

/*DashboardsV1UpdateDashboardOK handles this case with default header values.

A successful response.
*/
type DashboardsV1UpdateDashboardOK struct {
	Payload *service_model.V1Dashboard
}

func (o *DashboardsV1UpdateDashboardOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] dashboardsV1UpdateDashboardOK  %+v", 200, o.Payload)
}

func (o *DashboardsV1UpdateDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *DashboardsV1UpdateDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1UpdateDashboardNoContent creates a DashboardsV1UpdateDashboardNoContent with default headers values
func NewDashboardsV1UpdateDashboardNoContent() *DashboardsV1UpdateDashboardNoContent {
	return &DashboardsV1UpdateDashboardNoContent{}
}

/*DashboardsV1UpdateDashboardNoContent handles this case with default header values.

No content.
*/
type DashboardsV1UpdateDashboardNoContent struct {
	Payload interface{}
}

func (o *DashboardsV1UpdateDashboardNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] dashboardsV1UpdateDashboardNoContent  %+v", 204, o.Payload)
}

func (o *DashboardsV1UpdateDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1UpdateDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1UpdateDashboardForbidden creates a DashboardsV1UpdateDashboardForbidden with default headers values
func NewDashboardsV1UpdateDashboardForbidden() *DashboardsV1UpdateDashboardForbidden {
	return &DashboardsV1UpdateDashboardForbidden{}
}

/*DashboardsV1UpdateDashboardForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type DashboardsV1UpdateDashboardForbidden struct {
	Payload interface{}
}

func (o *DashboardsV1UpdateDashboardForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] dashboardsV1UpdateDashboardForbidden  %+v", 403, o.Payload)
}

func (o *DashboardsV1UpdateDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1UpdateDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1UpdateDashboardNotFound creates a DashboardsV1UpdateDashboardNotFound with default headers values
func NewDashboardsV1UpdateDashboardNotFound() *DashboardsV1UpdateDashboardNotFound {
	return &DashboardsV1UpdateDashboardNotFound{}
}

/*DashboardsV1UpdateDashboardNotFound handles this case with default header values.

Resource does not exist.
*/
type DashboardsV1UpdateDashboardNotFound struct {
	Payload interface{}
}

func (o *DashboardsV1UpdateDashboardNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] dashboardsV1UpdateDashboardNotFound  %+v", 404, o.Payload)
}

func (o *DashboardsV1UpdateDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DashboardsV1UpdateDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDashboardsV1UpdateDashboardDefault creates a DashboardsV1UpdateDashboardDefault with default headers values
func NewDashboardsV1UpdateDashboardDefault(code int) *DashboardsV1UpdateDashboardDefault {
	return &DashboardsV1UpdateDashboardDefault{
		_statusCode: code,
	}
}

/*DashboardsV1UpdateDashboardDefault handles this case with default header values.

An unexpected error response
*/
type DashboardsV1UpdateDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the dashboards v1 update dashboard default response
func (o *DashboardsV1UpdateDashboardDefault) Code() int {
	return o._statusCode
}

func (o *DashboardsV1UpdateDashboardDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/dashboards/{dashboard.uuid}][%d] DashboardsV1_UpdateDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *DashboardsV1UpdateDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *DashboardsV1UpdateDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
