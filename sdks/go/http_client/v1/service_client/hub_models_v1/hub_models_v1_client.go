// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package hub_models_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hub models v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hub models v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	HubModelsV1CreateHubModel(params *HubModelsV1CreateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1CreateHubModelOK, *HubModelsV1CreateHubModelNoContent, error)

	HubModelsV1DeleteHubModel(params *HubModelsV1DeleteHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1DeleteHubModelOK, *HubModelsV1DeleteHubModelNoContent, error)

	HubModelsV1GetHubModel(params *HubModelsV1GetHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1GetHubModelOK, *HubModelsV1GetHubModelNoContent, error)

	HubModelsV1ListHubModelNames(params *HubModelsV1ListHubModelNamesParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1ListHubModelNamesOK, *HubModelsV1ListHubModelNamesNoContent, error)

	HubModelsV1ListHubModels(params *HubModelsV1ListHubModelsParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1ListHubModelsOK, *HubModelsV1ListHubModelsNoContent, error)

	HubModelsV1PatchHubModel(params *HubModelsV1PatchHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1PatchHubModelOK, *HubModelsV1PatchHubModelNoContent, error)

	HubModelsV1UpdateHubModel(params *HubModelsV1UpdateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1UpdateHubModelOK, *HubModelsV1UpdateHubModelNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HubModelsV1CreateHubModel creates dashboard
*/
func (a *Client) HubModelsV1CreateHubModel(params *HubModelsV1CreateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1CreateHubModelOK, *HubModelsV1CreateHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1CreateHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_CreateHubModel",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1CreateHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1CreateHubModelOK:
		return value, nil, nil
	case *HubModelsV1CreateHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1CreateHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1DeleteHubModel deletes dashboard
*/
func (a *Client) HubModelsV1DeleteHubModel(params *HubModelsV1DeleteHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1DeleteHubModelOK, *HubModelsV1DeleteHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1DeleteHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_DeleteHubModel",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/models/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1DeleteHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1DeleteHubModelOK:
		return value, nil, nil
	case *HubModelsV1DeleteHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1DeleteHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1GetHubModel gets dashboard
*/
func (a *Client) HubModelsV1GetHubModel(params *HubModelsV1GetHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1GetHubModelOK, *HubModelsV1GetHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1GetHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_GetHubModel",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1GetHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1GetHubModelOK:
		return value, nil, nil
	case *HubModelsV1GetHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1GetHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1ListHubModelNames lists dashboard names
*/
func (a *Client) HubModelsV1ListHubModelNames(params *HubModelsV1ListHubModelNamesParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1ListHubModelNamesOK, *HubModelsV1ListHubModelNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1ListHubModelNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_ListHubModelNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1ListHubModelNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1ListHubModelNamesOK:
		return value, nil, nil
	case *HubModelsV1ListHubModelNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1ListHubModelNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1ListHubModels lists dashboards
*/
func (a *Client) HubModelsV1ListHubModels(params *HubModelsV1ListHubModelsParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1ListHubModelsOK, *HubModelsV1ListHubModelsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1ListHubModelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_ListHubModels",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/models",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1ListHubModelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1ListHubModelsOK:
		return value, nil, nil
	case *HubModelsV1ListHubModelsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1ListHubModelsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1PatchHubModel patches dashboard
*/
func (a *Client) HubModelsV1PatchHubModel(params *HubModelsV1PatchHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1PatchHubModelOK, *HubModelsV1PatchHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1PatchHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_PatchHubModel",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/models/{model.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1PatchHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1PatchHubModelOK:
		return value, nil, nil
	case *HubModelsV1PatchHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1PatchHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubModelsV1UpdateHubModel updates dashboard
*/
func (a *Client) HubModelsV1UpdateHubModel(params *HubModelsV1UpdateHubModelParams, authInfo runtime.ClientAuthInfoWriter) (*HubModelsV1UpdateHubModelOK, *HubModelsV1UpdateHubModelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubModelsV1UpdateHubModelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubModelsV1_UpdateHubModel",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/models/{model.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubModelsV1UpdateHubModelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubModelsV1UpdateHubModelOK:
		return value, nil, nil
	case *HubModelsV1UpdateHubModelNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubModelsV1UpdateHubModelDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
