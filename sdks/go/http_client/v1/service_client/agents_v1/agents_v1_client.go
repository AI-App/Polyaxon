// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package agents_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new agents v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for agents v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AgentsV1CreateAgent(params *AgentsV1CreateAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1CreateAgentOK, *AgentsV1CreateAgentNoContent, error)

	AgentsV1CreateAgentStatus(params *AgentsV1CreateAgentStatusParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1CreateAgentStatusOK, *AgentsV1CreateAgentStatusNoContent, error)

	AgentsV1DeleteAgent(params *AgentsV1DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1DeleteAgentOK, *AgentsV1DeleteAgentNoContent, error)

	AgentsV1GetAgent(params *AgentsV1GetAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentOK, *AgentsV1GetAgentNoContent, error)

	AgentsV1GetAgentState(params *AgentsV1GetAgentStateParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentStateOK, *AgentsV1GetAgentStateNoContent, error)

	AgentsV1GetAgentStatuses(params *AgentsV1GetAgentStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentStatusesOK, *AgentsV1GetAgentStatusesNoContent, error)

	AgentsV1ListAgentNames(params *AgentsV1ListAgentNamesParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1ListAgentNamesOK, *AgentsV1ListAgentNamesNoContent, error)

	AgentsV1ListAgents(params *AgentsV1ListAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1ListAgentsOK, *AgentsV1ListAgentsNoContent, error)

	AgentsV1PatchAgent(params *AgentsV1PatchAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1PatchAgentOK, *AgentsV1PatchAgentNoContent, error)

	AgentsV1SyncAgent(params *AgentsV1SyncAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1SyncAgentOK, *AgentsV1SyncAgentNoContent, error)

	AgentsV1UpdateAgent(params *AgentsV1UpdateAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1UpdateAgentOK, *AgentsV1UpdateAgentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AgentsV1CreateAgent creates run profile
*/
func (a *Client) AgentsV1CreateAgent(params *AgentsV1CreateAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1CreateAgentOK, *AgentsV1CreateAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1CreateAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_CreateAgent",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1CreateAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1CreateAgentOK:
		return value, nil, nil
	case *AgentsV1CreateAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1CreateAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1CreateAgentStatus agents v1 create agent status API
*/
func (a *Client) AgentsV1CreateAgentStatus(params *AgentsV1CreateAgentStatusParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1CreateAgentStatusOK, *AgentsV1CreateAgentStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1CreateAgentStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_CreateAgentStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{uuid}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1CreateAgentStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1CreateAgentStatusOK:
		return value, nil, nil
	case *AgentsV1CreateAgentStatusNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1CreateAgentStatusDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1DeleteAgent deletes run profile
*/
func (a *Client) AgentsV1DeleteAgent(params *AgentsV1DeleteAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1DeleteAgentOK, *AgentsV1DeleteAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1DeleteAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_DeleteAgent",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1DeleteAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1DeleteAgentOK:
		return value, nil, nil
	case *AgentsV1DeleteAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1DeleteAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1GetAgent gets run profile
*/
func (a *Client) AgentsV1GetAgent(params *AgentsV1GetAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentOK, *AgentsV1GetAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1GetAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_GetAgent",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1GetAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1GetAgentOK:
		return value, nil, nil
	case *AgentsV1GetAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1GetAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1GetAgentState agents v1 get agent state API
*/
func (a *Client) AgentsV1GetAgentState(params *AgentsV1GetAgentStateParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentStateOK, *AgentsV1GetAgentStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1GetAgentStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_GetAgentState",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{uuid}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1GetAgentStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1GetAgentStateOK:
		return value, nil, nil
	case *AgentsV1GetAgentStateNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1GetAgentStateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1GetAgentStatuses agents v1 get agent statuses API
*/
func (a *Client) AgentsV1GetAgentStatuses(params *AgentsV1GetAgentStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1GetAgentStatusesOK, *AgentsV1GetAgentStatusesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1GetAgentStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_GetAgentStatuses",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{uuid}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1GetAgentStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1GetAgentStatusesOK:
		return value, nil, nil
	case *AgentsV1GetAgentStatusesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1GetAgentStatusesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1ListAgentNames lists run profiles names
*/
func (a *Client) AgentsV1ListAgentNames(params *AgentsV1ListAgentNamesParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1ListAgentNamesOK, *AgentsV1ListAgentNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1ListAgentNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_ListAgentNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1ListAgentNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1ListAgentNamesOK:
		return value, nil, nil
	case *AgentsV1ListAgentNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1ListAgentNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1ListAgents lists run profiles
*/
func (a *Client) AgentsV1ListAgents(params *AgentsV1ListAgentsParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1ListAgentsOK, *AgentsV1ListAgentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1ListAgentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_ListAgents",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1ListAgentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1ListAgentsOK:
		return value, nil, nil
	case *AgentsV1ListAgentsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1ListAgentsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1PatchAgent patches run profile
*/
func (a *Client) AgentsV1PatchAgent(params *AgentsV1PatchAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1PatchAgentOK, *AgentsV1PatchAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1PatchAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_PatchAgent",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1PatchAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1PatchAgentOK:
		return value, nil, nil
	case *AgentsV1PatchAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1PatchAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1SyncAgent agents v1 sync agent API
*/
func (a *Client) AgentsV1SyncAgent(params *AgentsV1SyncAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1SyncAgentOK, *AgentsV1SyncAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1SyncAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_SyncAgent",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent.uuid}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1SyncAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1SyncAgentOK:
		return value, nil, nil
	case *AgentsV1SyncAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1SyncAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AgentsV1UpdateAgent updates run profile
*/
func (a *Client) AgentsV1UpdateAgent(params *AgentsV1UpdateAgentParams, authInfo runtime.ClientAuthInfoWriter) (*AgentsV1UpdateAgentOK, *AgentsV1UpdateAgentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAgentsV1UpdateAgentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AgentsV1_UpdateAgent",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AgentsV1UpdateAgentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AgentsV1UpdateAgentOK:
		return value, nil, nil
	case *AgentsV1UpdateAgentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AgentsV1UpdateAgentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
