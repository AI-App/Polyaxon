// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package k8s_config_maps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	service_model "github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// UpdateK8sConfigMapReader is a Reader for the UpdateK8sConfigMap structure.
type UpdateK8sConfigMapReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateK8sConfigMapReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateK8sConfigMapOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewUpdateK8sConfigMapNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateK8sConfigMapForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateK8sConfigMapNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateK8sConfigMapOK creates a UpdateK8sConfigMapOK with default headers values
func NewUpdateK8sConfigMapOK() *UpdateK8sConfigMapOK {
	return &UpdateK8sConfigMapOK{}
}

/*UpdateK8sConfigMapOK handles this case with default header values.

A successful response.
*/
type UpdateK8sConfigMapOK struct {
	Payload *service_model.V1K8sResource
}

func (o *UpdateK8sConfigMapOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/k8s_config_maps/{k8s_resource.uuid}][%d] updateK8sConfigMapOK  %+v", 200, o.Payload)
}

func (o *UpdateK8sConfigMapOK) GetPayload() *service_model.V1K8sResource {
	return o.Payload
}

func (o *UpdateK8sConfigMapOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1K8sResource)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateK8sConfigMapNoContent creates a UpdateK8sConfigMapNoContent with default headers values
func NewUpdateK8sConfigMapNoContent() *UpdateK8sConfigMapNoContent {
	return &UpdateK8sConfigMapNoContent{}
}

/*UpdateK8sConfigMapNoContent handles this case with default header values.

No content.
*/
type UpdateK8sConfigMapNoContent struct {
	Payload interface{}
}

func (o *UpdateK8sConfigMapNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/k8s_config_maps/{k8s_resource.uuid}][%d] updateK8sConfigMapNoContent  %+v", 204, o.Payload)
}

func (o *UpdateK8sConfigMapNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateK8sConfigMapNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateK8sConfigMapForbidden creates a UpdateK8sConfigMapForbidden with default headers values
func NewUpdateK8sConfigMapForbidden() *UpdateK8sConfigMapForbidden {
	return &UpdateK8sConfigMapForbidden{}
}

/*UpdateK8sConfigMapForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type UpdateK8sConfigMapForbidden struct {
	Payload interface{}
}

func (o *UpdateK8sConfigMapForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/k8s_config_maps/{k8s_resource.uuid}][%d] updateK8sConfigMapForbidden  %+v", 403, o.Payload)
}

func (o *UpdateK8sConfigMapForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateK8sConfigMapForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateK8sConfigMapNotFound creates a UpdateK8sConfigMapNotFound with default headers values
func NewUpdateK8sConfigMapNotFound() *UpdateK8sConfigMapNotFound {
	return &UpdateK8sConfigMapNotFound{}
}

/*UpdateK8sConfigMapNotFound handles this case with default header values.

Resource does not exist.
*/
type UpdateK8sConfigMapNotFound struct {
	Payload interface{}
}

func (o *UpdateK8sConfigMapNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/k8s_config_maps/{k8s_resource.uuid}][%d] updateK8sConfigMapNotFound  %+v", 404, o.Payload)
}

func (o *UpdateK8sConfigMapNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *UpdateK8sConfigMapNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
