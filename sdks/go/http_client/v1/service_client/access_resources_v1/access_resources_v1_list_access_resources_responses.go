// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package access_resources_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// AccessResourcesV1ListAccessResourcesReader is a Reader for the AccessResourcesV1ListAccessResources structure.
type AccessResourcesV1ListAccessResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AccessResourcesV1ListAccessResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAccessResourcesV1ListAccessResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewAccessResourcesV1ListAccessResourcesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewAccessResourcesV1ListAccessResourcesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAccessResourcesV1ListAccessResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAccessResourcesV1ListAccessResourcesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAccessResourcesV1ListAccessResourcesOK creates a AccessResourcesV1ListAccessResourcesOK with default headers values
func NewAccessResourcesV1ListAccessResourcesOK() *AccessResourcesV1ListAccessResourcesOK {
	return &AccessResourcesV1ListAccessResourcesOK{}
}

/*AccessResourcesV1ListAccessResourcesOK handles this case with default header values.

A successful response.
*/
type AccessResourcesV1ListAccessResourcesOK struct {
	Payload *service_model.V1ListAccessResourcesResponse
}

func (o *AccessResourcesV1ListAccessResourcesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/access_resources][%d] accessResourcesV1ListAccessResourcesOK  %+v", 200, o.Payload)
}

func (o *AccessResourcesV1ListAccessResourcesOK) GetPayload() *service_model.V1ListAccessResourcesResponse {
	return o.Payload
}

func (o *AccessResourcesV1ListAccessResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListAccessResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessResourcesV1ListAccessResourcesNoContent creates a AccessResourcesV1ListAccessResourcesNoContent with default headers values
func NewAccessResourcesV1ListAccessResourcesNoContent() *AccessResourcesV1ListAccessResourcesNoContent {
	return &AccessResourcesV1ListAccessResourcesNoContent{}
}

/*AccessResourcesV1ListAccessResourcesNoContent handles this case with default header values.

No content.
*/
type AccessResourcesV1ListAccessResourcesNoContent struct {
	Payload interface{}
}

func (o *AccessResourcesV1ListAccessResourcesNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/access_resources][%d] accessResourcesV1ListAccessResourcesNoContent  %+v", 204, o.Payload)
}

func (o *AccessResourcesV1ListAccessResourcesNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *AccessResourcesV1ListAccessResourcesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessResourcesV1ListAccessResourcesForbidden creates a AccessResourcesV1ListAccessResourcesForbidden with default headers values
func NewAccessResourcesV1ListAccessResourcesForbidden() *AccessResourcesV1ListAccessResourcesForbidden {
	return &AccessResourcesV1ListAccessResourcesForbidden{}
}

/*AccessResourcesV1ListAccessResourcesForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type AccessResourcesV1ListAccessResourcesForbidden struct {
	Payload interface{}
}

func (o *AccessResourcesV1ListAccessResourcesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/access_resources][%d] accessResourcesV1ListAccessResourcesForbidden  %+v", 403, o.Payload)
}

func (o *AccessResourcesV1ListAccessResourcesForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *AccessResourcesV1ListAccessResourcesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessResourcesV1ListAccessResourcesNotFound creates a AccessResourcesV1ListAccessResourcesNotFound with default headers values
func NewAccessResourcesV1ListAccessResourcesNotFound() *AccessResourcesV1ListAccessResourcesNotFound {
	return &AccessResourcesV1ListAccessResourcesNotFound{}
}

/*AccessResourcesV1ListAccessResourcesNotFound handles this case with default header values.

Resource does not exist.
*/
type AccessResourcesV1ListAccessResourcesNotFound struct {
	Payload interface{}
}

func (o *AccessResourcesV1ListAccessResourcesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/access_resources][%d] accessResourcesV1ListAccessResourcesNotFound  %+v", 404, o.Payload)
}

func (o *AccessResourcesV1ListAccessResourcesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *AccessResourcesV1ListAccessResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAccessResourcesV1ListAccessResourcesDefault creates a AccessResourcesV1ListAccessResourcesDefault with default headers values
func NewAccessResourcesV1ListAccessResourcesDefault(code int) *AccessResourcesV1ListAccessResourcesDefault {
	return &AccessResourcesV1ListAccessResourcesDefault{
		_statusCode: code,
	}
}

/*AccessResourcesV1ListAccessResourcesDefault handles this case with default header values.

An unexpected error response
*/
type AccessResourcesV1ListAccessResourcesDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the access resources v1 list access resources default response
func (o *AccessResourcesV1ListAccessResourcesDefault) Code() int {
	return o._statusCode
}

func (o *AccessResourcesV1ListAccessResourcesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/access_resources][%d] AccessResourcesV1_ListAccessResources default  %+v", o._statusCode, o.Payload)
}

func (o *AccessResourcesV1ListAccessResourcesDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *AccessResourcesV1ListAccessResourcesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
