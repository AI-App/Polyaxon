// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package access_resources_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new access resources v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for access resources v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AccessResourcesV1CreateAccessResource(params *AccessResourcesV1CreateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1CreateAccessResourceOK, *AccessResourcesV1CreateAccessResourceNoContent, error)

	AccessResourcesV1DeleteAccessResource(params *AccessResourcesV1DeleteAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1DeleteAccessResourceOK, *AccessResourcesV1DeleteAccessResourceNoContent, error)

	AccessResourcesV1GetAccessResource(params *AccessResourcesV1GetAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1GetAccessResourceOK, *AccessResourcesV1GetAccessResourceNoContent, error)

	AccessResourcesV1ListAccessResourceNames(params *AccessResourcesV1ListAccessResourceNamesParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1ListAccessResourceNamesOK, *AccessResourcesV1ListAccessResourceNamesNoContent, error)

	AccessResourcesV1ListAccessResources(params *AccessResourcesV1ListAccessResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1ListAccessResourcesOK, *AccessResourcesV1ListAccessResourcesNoContent, error)

	AccessResourcesV1PatchAccessResource(params *AccessResourcesV1PatchAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1PatchAccessResourceOK, *AccessResourcesV1PatchAccessResourceNoContent, error)

	AccessResourcesV1UpdateAccessResource(params *AccessResourcesV1UpdateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1UpdateAccessResourceOK, *AccessResourcesV1UpdateAccessResourceNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AccessResourcesV1CreateAccessResource creates access resource
*/
func (a *Client) AccessResourcesV1CreateAccessResource(params *AccessResourcesV1CreateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1CreateAccessResourceOK, *AccessResourcesV1CreateAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1CreateAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_CreateAccessResource",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1CreateAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1CreateAccessResourceOK:
		return value, nil, nil
	case *AccessResourcesV1CreateAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1CreateAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1DeleteAccessResource deletes access resource
*/
func (a *Client) AccessResourcesV1DeleteAccessResource(params *AccessResourcesV1DeleteAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1DeleteAccessResourceOK, *AccessResourcesV1DeleteAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1DeleteAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_DeleteAccessResource",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1DeleteAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1DeleteAccessResourceOK:
		return value, nil, nil
	case *AccessResourcesV1DeleteAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1DeleteAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1GetAccessResource gets access resource
*/
func (a *Client) AccessResourcesV1GetAccessResource(params *AccessResourcesV1GetAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1GetAccessResourceOK, *AccessResourcesV1GetAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1GetAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_GetAccessResource",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1GetAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1GetAccessResourceOK:
		return value, nil, nil
	case *AccessResourcesV1GetAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1GetAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1ListAccessResourceNames lists access resource names
*/
func (a *Client) AccessResourcesV1ListAccessResourceNames(params *AccessResourcesV1ListAccessResourceNamesParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1ListAccessResourceNamesOK, *AccessResourcesV1ListAccessResourceNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1ListAccessResourceNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_ListAccessResourceNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1ListAccessResourceNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1ListAccessResourceNamesOK:
		return value, nil, nil
	case *AccessResourcesV1ListAccessResourceNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1ListAccessResourceNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1ListAccessResources lists access resources
*/
func (a *Client) AccessResourcesV1ListAccessResources(params *AccessResourcesV1ListAccessResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1ListAccessResourcesOK, *AccessResourcesV1ListAccessResourcesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1ListAccessResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_ListAccessResources",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1ListAccessResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1ListAccessResourcesOK:
		return value, nil, nil
	case *AccessResourcesV1ListAccessResourcesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1ListAccessResourcesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1PatchAccessResource patches access resource
*/
func (a *Client) AccessResourcesV1PatchAccessResource(params *AccessResourcesV1PatchAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1PatchAccessResourceOK, *AccessResourcesV1PatchAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1PatchAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_PatchAccessResource",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{access_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1PatchAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1PatchAccessResourceOK:
		return value, nil, nil
	case *AccessResourcesV1PatchAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1PatchAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AccessResourcesV1UpdateAccessResource updates access resource
*/
func (a *Client) AccessResourcesV1UpdateAccessResource(params *AccessResourcesV1UpdateAccessResourceParams, authInfo runtime.ClientAuthInfoWriter) (*AccessResourcesV1UpdateAccessResourceOK, *AccessResourcesV1UpdateAccessResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAccessResourcesV1UpdateAccessResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AccessResourcesV1_UpdateAccessResource",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/access_resources/{access_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AccessResourcesV1UpdateAccessResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *AccessResourcesV1UpdateAccessResourceOK:
		return value, nil, nil
	case *AccessResourcesV1UpdateAccessResourceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AccessResourcesV1UpdateAccessResourceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
