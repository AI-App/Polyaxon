// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package versions_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// VersionsV1GetLogHandlerReader is a Reader for the VersionsV1GetLogHandler structure.
type VersionsV1GetLogHandlerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VersionsV1GetLogHandlerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVersionsV1GetLogHandlerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewVersionsV1GetLogHandlerNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewVersionsV1GetLogHandlerForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVersionsV1GetLogHandlerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewVersionsV1GetLogHandlerDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewVersionsV1GetLogHandlerOK creates a VersionsV1GetLogHandlerOK with default headers values
func NewVersionsV1GetLogHandlerOK() *VersionsV1GetLogHandlerOK {
	return &VersionsV1GetLogHandlerOK{}
}

/*VersionsV1GetLogHandlerOK handles this case with default header values.

A successful response.
*/
type VersionsV1GetLogHandlerOK struct {
	Payload *service_model.V1LogHandler
}

func (o *VersionsV1GetLogHandlerOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/log_handler][%d] versionsV1GetLogHandlerOK  %+v", 200, o.Payload)
}

func (o *VersionsV1GetLogHandlerOK) GetPayload() *service_model.V1LogHandler {
	return o.Payload
}

func (o *VersionsV1GetLogHandlerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1LogHandler)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionsV1GetLogHandlerNoContent creates a VersionsV1GetLogHandlerNoContent with default headers values
func NewVersionsV1GetLogHandlerNoContent() *VersionsV1GetLogHandlerNoContent {
	return &VersionsV1GetLogHandlerNoContent{}
}

/*VersionsV1GetLogHandlerNoContent handles this case with default header values.

No content.
*/
type VersionsV1GetLogHandlerNoContent struct {
	Payload interface{}
}

func (o *VersionsV1GetLogHandlerNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/log_handler][%d] versionsV1GetLogHandlerNoContent  %+v", 204, o.Payload)
}

func (o *VersionsV1GetLogHandlerNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *VersionsV1GetLogHandlerNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionsV1GetLogHandlerForbidden creates a VersionsV1GetLogHandlerForbidden with default headers values
func NewVersionsV1GetLogHandlerForbidden() *VersionsV1GetLogHandlerForbidden {
	return &VersionsV1GetLogHandlerForbidden{}
}

/*VersionsV1GetLogHandlerForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type VersionsV1GetLogHandlerForbidden struct {
	Payload interface{}
}

func (o *VersionsV1GetLogHandlerForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/log_handler][%d] versionsV1GetLogHandlerForbidden  %+v", 403, o.Payload)
}

func (o *VersionsV1GetLogHandlerForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *VersionsV1GetLogHandlerForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionsV1GetLogHandlerNotFound creates a VersionsV1GetLogHandlerNotFound with default headers values
func NewVersionsV1GetLogHandlerNotFound() *VersionsV1GetLogHandlerNotFound {
	return &VersionsV1GetLogHandlerNotFound{}
}

/*VersionsV1GetLogHandlerNotFound handles this case with default header values.

Resource does not exist.
*/
type VersionsV1GetLogHandlerNotFound struct {
	Payload interface{}
}

func (o *VersionsV1GetLogHandlerNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/log_handler][%d] versionsV1GetLogHandlerNotFound  %+v", 404, o.Payload)
}

func (o *VersionsV1GetLogHandlerNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *VersionsV1GetLogHandlerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVersionsV1GetLogHandlerDefault creates a VersionsV1GetLogHandlerDefault with default headers values
func NewVersionsV1GetLogHandlerDefault(code int) *VersionsV1GetLogHandlerDefault {
	return &VersionsV1GetLogHandlerDefault{
		_statusCode: code,
	}
}

/*VersionsV1GetLogHandlerDefault handles this case with default header values.

An unexpected error response
*/
type VersionsV1GetLogHandlerDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the versions v1 get log handler default response
func (o *VersionsV1GetLogHandlerDefault) Code() int {
	return o._statusCode
}

func (o *VersionsV1GetLogHandlerDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/log_handler][%d] VersionsV1_GetLogHandler default  %+v", o._statusCode, o.Payload)
}

func (o *VersionsV1GetLogHandlerDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *VersionsV1GetLogHandlerDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
