// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package connections_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new connections v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connections v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ConnectionsV1CreateConnection(params *ConnectionsV1CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1CreateConnectionOK, *ConnectionsV1CreateConnectionNoContent, error)

	ConnectionsV1DeleteConnection(params *ConnectionsV1DeleteConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1DeleteConnectionOK, *ConnectionsV1DeleteConnectionNoContent, error)

	ConnectionsV1GetConnection(params *ConnectionsV1GetConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1GetConnectionOK, *ConnectionsV1GetConnectionNoContent, error)

	ConnectionsV1ListConnectionNames(params *ConnectionsV1ListConnectionNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1ListConnectionNamesOK, *ConnectionsV1ListConnectionNamesNoContent, error)

	ConnectionsV1ListConnections(params *ConnectionsV1ListConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1ListConnectionsOK, *ConnectionsV1ListConnectionsNoContent, error)

	ConnectionsV1PatchConnection(params *ConnectionsV1PatchConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1PatchConnectionOK, *ConnectionsV1PatchConnectionNoContent, error)

	ConnectionsV1UpdateConnection(params *ConnectionsV1UpdateConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1UpdateConnectionOK, *ConnectionsV1UpdateConnectionNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ConnectionsV1CreateConnection creates connection
*/
func (a *Client) ConnectionsV1CreateConnection(params *ConnectionsV1CreateConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1CreateConnectionOK, *ConnectionsV1CreateConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1CreateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_CreateConnection",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1CreateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1CreateConnectionOK:
		return value, nil, nil
	case *ConnectionsV1CreateConnectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1CreateConnectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1DeleteConnection deletes connection
*/
func (a *Client) ConnectionsV1DeleteConnection(params *ConnectionsV1DeleteConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1DeleteConnectionOK, *ConnectionsV1DeleteConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1DeleteConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_DeleteConnection",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/connections/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1DeleteConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1DeleteConnectionOK:
		return value, nil, nil
	case *ConnectionsV1DeleteConnectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1DeleteConnectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1GetConnection gets connection
*/
func (a *Client) ConnectionsV1GetConnection(params *ConnectionsV1GetConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1GetConnectionOK, *ConnectionsV1GetConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1GetConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_GetConnection",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/connections/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1GetConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1GetConnectionOK:
		return value, nil, nil
	case *ConnectionsV1GetConnectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1GetConnectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1ListConnectionNames lists connections names
*/
func (a *Client) ConnectionsV1ListConnectionNames(params *ConnectionsV1ListConnectionNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1ListConnectionNamesOK, *ConnectionsV1ListConnectionNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1ListConnectionNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_ListConnectionNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/connections/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1ListConnectionNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1ListConnectionNamesOK:
		return value, nil, nil
	case *ConnectionsV1ListConnectionNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1ListConnectionNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1ListConnections lists connections
*/
func (a *Client) ConnectionsV1ListConnections(params *ConnectionsV1ListConnectionsParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1ListConnectionsOK, *ConnectionsV1ListConnectionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1ListConnectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_ListConnections",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/connections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1ListConnectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1ListConnectionsOK:
		return value, nil, nil
	case *ConnectionsV1ListConnectionsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1ListConnectionsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1PatchConnection patches connection
*/
func (a *Client) ConnectionsV1PatchConnection(params *ConnectionsV1PatchConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1PatchConnectionOK, *ConnectionsV1PatchConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1PatchConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_PatchConnection",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/connections/{connection.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1PatchConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1PatchConnectionOK:
		return value, nil, nil
	case *ConnectionsV1PatchConnectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1PatchConnectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ConnectionsV1UpdateConnection updates connection
*/
func (a *Client) ConnectionsV1UpdateConnection(params *ConnectionsV1UpdateConnectionParams, authInfo runtime.ClientAuthInfoWriter) (*ConnectionsV1UpdateConnectionOK, *ConnectionsV1UpdateConnectionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConnectionsV1UpdateConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ConnectionsV1_UpdateConnection",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/connections/{connection.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ConnectionsV1UpdateConnectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ConnectionsV1UpdateConnectionOK:
		return value, nil, nil
	case *ConnectionsV1UpdateConnectionNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ConnectionsV1UpdateConnectionDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
