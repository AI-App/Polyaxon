// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package regsitry_accesses_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new regsitry accesses v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for regsitry accesses v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRegsitryAccess lists runs
*/
func (a *Client) CreateRegsitryAccess(params *CreateRegsitryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegsitryAccessOK, *CreateRegsitryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegsitryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRegsitryAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/registry_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegsitryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRegsitryAccessOK:
		return value, nil, nil
	case *CreateRegsitryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRegsitryAccess patches run
*/
func (a *Client) DeleteRegsitryAccess(params *DeleteRegsitryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegsitryAccessOK, *DeleteRegsitryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegsitryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRegsitryAccess",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/registry_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegsitryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRegsitryAccessOK:
		return value, nil, nil
	case *DeleteRegsitryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegsitryAccess creates new run
*/
func (a *Client) GetRegsitryAccess(params *GetRegsitryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegsitryAccessOK, *GetRegsitryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegsitryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegsitryAccess",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/registry_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegsitryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRegsitryAccessOK:
		return value, nil, nil
	case *GetRegsitryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegsitryAccessNames lists bookmarked runs for user
*/
func (a *Client) ListRegsitryAccessNames(params *ListRegsitryAccessNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRegsitryAccessNamesOK, *ListRegsitryAccessNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegsitryAccessNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRegsitryAccessNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/registry_accesses/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegsitryAccessNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListRegsitryAccessNamesOK:
		return value, nil, nil
	case *ListRegsitryAccessNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegsitryAccesses lists archived runs for user
*/
func (a *Client) ListRegsitryAccesses(params *ListRegsitryAccessesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRegsitryAccessesOK, *ListRegsitryAccessesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegsitryAccessesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRegsitryAccesses",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/registry_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegsitryAccessesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListRegsitryAccessesOK:
		return value, nil, nil
	case *ListRegsitryAccessesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchRegsitryAccess updates run
*/
func (a *Client) PatchRegsitryAccess(params *PatchRegsitryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*PatchRegsitryAccessOK, *PatchRegsitryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRegsitryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchRegsitryAccess",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/registry_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchRegsitryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRegsitryAccessOK:
		return value, nil, nil
	case *PatchRegsitryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRegsitryAccess gets run
*/
func (a *Client) UpdateRegsitryAccess(params *UpdateRegsitryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegsitryAccessOK, *UpdateRegsitryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegsitryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRegsitryAccess",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/registry_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegsitryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRegsitryAccessOK:
		return value, nil, nil
	case *UpdateRegsitryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for regsitry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
