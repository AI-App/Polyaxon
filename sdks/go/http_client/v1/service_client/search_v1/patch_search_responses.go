// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package search_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	service_model "github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchSearchReader is a Reader for the PatchSearch structure.
type PatchSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchSearchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewPatchSearchOK creates a PatchSearchOK with default headers values
func NewPatchSearchOK() *PatchSearchOK {
	return &PatchSearchOK{}
}

/*PatchSearchOK handles this case with default header values.

A successful response.
*/
type PatchSearchOK struct {
	Payload *service_model.V1Search
}

func (o *PatchSearchOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] patchSearchOK  %+v", 200, o.Payload)
}

func (o *PatchSearchOK) GetPayload() *service_model.V1Search {
	return o.Payload
}

func (o *PatchSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Search)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchNoContent creates a PatchSearchNoContent with default headers values
func NewPatchSearchNoContent() *PatchSearchNoContent {
	return &PatchSearchNoContent{}
}

/*PatchSearchNoContent handles this case with default header values.

No content.
*/
type PatchSearchNoContent struct {
	Payload interface{}
}

func (o *PatchSearchNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] patchSearchNoContent  %+v", 204, o.Payload)
}

func (o *PatchSearchNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchForbidden creates a PatchSearchForbidden with default headers values
func NewPatchSearchForbidden() *PatchSearchForbidden {
	return &PatchSearchForbidden{}
}

/*PatchSearchForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type PatchSearchForbidden struct {
	Payload interface{}
}

func (o *PatchSearchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] patchSearchForbidden  %+v", 403, o.Payload)
}

func (o *PatchSearchForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchSearchNotFound creates a PatchSearchNotFound with default headers values
func NewPatchSearchNotFound() *PatchSearchNotFound {
	return &PatchSearchNotFound{}
}

/*PatchSearchNotFound handles this case with default header values.

Resource does not exist.
*/
type PatchSearchNotFound struct {
	Payload interface{}
}

func (o *PatchSearchNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] patchSearchNotFound  %+v", 404, o.Payload)
}

func (o *PatchSearchNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
