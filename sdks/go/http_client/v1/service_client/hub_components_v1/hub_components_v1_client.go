// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package hub_components_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new hub components v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hub components v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	HubComponentsV1CreateHubComponent(params *HubComponentsV1CreateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1CreateHubComponentOK, *HubComponentsV1CreateHubComponentNoContent, error)

	HubComponentsV1DeleteHubComponent(params *HubComponentsV1DeleteHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1DeleteHubComponentOK, *HubComponentsV1DeleteHubComponentNoContent, error)

	HubComponentsV1GetHubComponent(params *HubComponentsV1GetHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1GetHubComponentOK, *HubComponentsV1GetHubComponentNoContent, error)

	HubComponentsV1ListHubComponebtNames(params *HubComponentsV1ListHubComponebtNamesParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1ListHubComponebtNamesOK, *HubComponentsV1ListHubComponebtNamesNoContent, error)

	HubComponentsV1ListHubComponents(params *HubComponentsV1ListHubComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1ListHubComponentsOK, *HubComponentsV1ListHubComponentsNoContent, error)

	HubComponentsV1PatchHubComponent(params *HubComponentsV1PatchHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1PatchHubComponentOK, *HubComponentsV1PatchHubComponentNoContent, error)

	HubComponentsV1UpdateHubComponent(params *HubComponentsV1UpdateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1UpdateHubComponentOK, *HubComponentsV1UpdateHubComponentNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  HubComponentsV1CreateHubComponent creates hub model
*/
func (a *Client) HubComponentsV1CreateHubComponent(params *HubComponentsV1CreateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1CreateHubComponentOK, *HubComponentsV1CreateHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1CreateHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_CreateHubComponent",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1CreateHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1CreateHubComponentOK:
		return value, nil, nil
	case *HubComponentsV1CreateHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1CreateHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1DeleteHubComponent deletes hub model
*/
func (a *Client) HubComponentsV1DeleteHubComponent(params *HubComponentsV1DeleteHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1DeleteHubComponentOK, *HubComponentsV1DeleteHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1DeleteHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_DeleteHubComponent",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1DeleteHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1DeleteHubComponentOK:
		return value, nil, nil
	case *HubComponentsV1DeleteHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1DeleteHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1GetHubComponent gets hub model
*/
func (a *Client) HubComponentsV1GetHubComponent(params *HubComponentsV1GetHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1GetHubComponentOK, *HubComponentsV1GetHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1GetHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_GetHubComponent",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1GetHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1GetHubComponentOK:
		return value, nil, nil
	case *HubComponentsV1GetHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1GetHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1ListHubComponebtNames lists hub model names
*/
func (a *Client) HubComponentsV1ListHubComponebtNames(params *HubComponentsV1ListHubComponebtNamesParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1ListHubComponebtNamesOK, *HubComponentsV1ListHubComponebtNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1ListHubComponebtNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_ListHubComponebtNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1ListHubComponebtNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1ListHubComponebtNamesOK:
		return value, nil, nil
	case *HubComponentsV1ListHubComponebtNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1ListHubComponebtNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1ListHubComponents lists hub models
*/
func (a *Client) HubComponentsV1ListHubComponents(params *HubComponentsV1ListHubComponentsParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1ListHubComponentsOK, *HubComponentsV1ListHubComponentsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1ListHubComponentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_ListHubComponents",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1ListHubComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1ListHubComponentsOK:
		return value, nil, nil
	case *HubComponentsV1ListHubComponentsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1ListHubComponentsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1PatchHubComponent patches hub model
*/
func (a *Client) HubComponentsV1PatchHubComponent(params *HubComponentsV1PatchHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1PatchHubComponentOK, *HubComponentsV1PatchHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1PatchHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_PatchHubComponent",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1PatchHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1PatchHubComponentOK:
		return value, nil, nil
	case *HubComponentsV1PatchHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1PatchHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  HubComponentsV1UpdateHubComponent updates hub model
*/
func (a *Client) HubComponentsV1UpdateHubComponent(params *HubComponentsV1UpdateHubComponentParams, authInfo runtime.ClientAuthInfoWriter) (*HubComponentsV1UpdateHubComponentOK, *HubComponentsV1UpdateHubComponentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHubComponentsV1UpdateHubComponentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "HubComponentsV1_UpdateHubComponent",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HubComponentsV1UpdateHubComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *HubComponentsV1UpdateHubComponentOK:
		return value, nil, nil
	case *HubComponentsV1UpdateHubComponentNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*HubComponentsV1UpdateHubComponentDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
