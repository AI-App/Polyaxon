// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package k8_s_secrets_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new k8 s secrets v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for k8 s secrets v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateK8SSecrets lists runs
*/
func (a *Client) CreateK8SSecrets(params *CreateK8SSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateK8SSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateK8SSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateK8SSecrets",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/k8s_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &CreateK8SSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateK8SSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateK8SSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteK8SSecret patches run
*/
func (a *Client) DeleteK8SSecret(params *DeleteK8SSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteK8SSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteK8SSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteK8SSecret",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &DeleteK8SSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteK8SSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteK8SSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8SSecret creates new run
*/
func (a *Client) GetK8SSecret(params *GetK8SSecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetK8SSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8SSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetK8SSecret",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &GetK8SSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetK8SSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetK8SSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8SSecretNames lists bookmarked runs for user
*/
func (a *Client) ListK8SSecretNames(params *ListK8SSecretNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8SSecretNamesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8SSecretNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8SSecretNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &ListK8SSecretNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListK8SSecretNamesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListK8SSecretNames: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8SSecrets lists archived runs for user
*/
func (a *Client) ListK8SSecrets(params *ListK8SSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8SSecretsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8SSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8SSecrets",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &ListK8SSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListK8SSecretsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListK8SSecrets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchK8SSecret updates run
*/
func (a *Client) PatchK8SSecret(params *PatchK8SSecretParams, authInfo runtime.ClientAuthInfoWriter) (*PatchK8SSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchK8SSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchK8SSecret",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &PatchK8SSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchK8SSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchK8SSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateK8SSecret gets run
*/
func (a *Client) UpdateK8SSecret(params *UpdateK8SSecretParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateK8SSecretOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateK8SSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateK8SSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https", "ws", "wss"},
		Params:             params,
		Reader:             &UpdateK8SSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateK8SSecretOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateK8SSecret: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
