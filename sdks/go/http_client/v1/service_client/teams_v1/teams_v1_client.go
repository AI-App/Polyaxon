// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package teams_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new teams v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for teams v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	TeamsV1CreateTeam(params *TeamsV1CreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1CreateTeamOK, *TeamsV1CreateTeamNoContent, error)

	TeamsV1CreateTeamMember(params *TeamsV1CreateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1CreateTeamMemberOK, *TeamsV1CreateTeamMemberNoContent, error)

	TeamsV1DeleteTeam(params *TeamsV1DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1DeleteTeamOK, *TeamsV1DeleteTeamNoContent, error)

	TeamsV1DeleteTeamMember(params *TeamsV1DeleteTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1DeleteTeamMemberOK, *TeamsV1DeleteTeamMemberNoContent, error)

	TeamsV1GetTeam(params *TeamsV1GetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1GetTeamOK, *TeamsV1GetTeamNoContent, error)

	TeamsV1GetTeamMember(params *TeamsV1GetTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1GetTeamMemberOK, *TeamsV1GetTeamMemberNoContent, error)

	TeamsV1ListTeamMembers(params *TeamsV1ListTeamMembersParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamMembersOK, *TeamsV1ListTeamMembersNoContent, error)

	TeamsV1ListTeamNames(params *TeamsV1ListTeamNamesParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamNamesOK, *TeamsV1ListTeamNamesNoContent, error)

	TeamsV1ListTeams(params *TeamsV1ListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamsOK, *TeamsV1ListTeamsNoContent, error)

	TeamsV1PatchTeam(params *TeamsV1PatchTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1PatchTeamOK, *TeamsV1PatchTeamNoContent, error)

	TeamsV1PatchTeamMember(params *TeamsV1PatchTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1PatchTeamMemberOK, *TeamsV1PatchTeamMemberNoContent, error)

	TeamsV1UpdateTeam(params *TeamsV1UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1UpdateTeamOK, *TeamsV1UpdateTeamNoContent, error)

	TeamsV1UpdateTeamMember(params *TeamsV1UpdateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1UpdateTeamMemberOK, *TeamsV1UpdateTeamMemberNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  TeamsV1CreateTeam creates organization
*/
func (a *Client) TeamsV1CreateTeam(params *TeamsV1CreateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1CreateTeamOK, *TeamsV1CreateTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1CreateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_CreateTeam",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1CreateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1CreateTeamOK:
		return value, nil, nil
	case *TeamsV1CreateTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1CreateTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1CreateTeamMember creates organization member
*/
func (a *Client) TeamsV1CreateTeamMember(params *TeamsV1CreateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1CreateTeamMemberOK, *TeamsV1CreateTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1CreateTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_CreateTeamMember",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1CreateTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1CreateTeamMemberOK:
		return value, nil, nil
	case *TeamsV1CreateTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1CreateTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1DeleteTeam deletes organization
*/
func (a *Client) TeamsV1DeleteTeam(params *TeamsV1DeleteTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1DeleteTeamOK, *TeamsV1DeleteTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1DeleteTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_DeleteTeam",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1DeleteTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1DeleteTeamOK:
		return value, nil, nil
	case *TeamsV1DeleteTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1DeleteTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1DeleteTeamMember deletes organization member details
*/
func (a *Client) TeamsV1DeleteTeamMember(params *TeamsV1DeleteTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1DeleteTeamMemberOK, *TeamsV1DeleteTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1DeleteTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_DeleteTeamMember",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1DeleteTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1DeleteTeamMemberOK:
		return value, nil, nil
	case *TeamsV1DeleteTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1DeleteTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1GetTeam gets organization
*/
func (a *Client) TeamsV1GetTeam(params *TeamsV1GetTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1GetTeamOK, *TeamsV1GetTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1GetTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_GetTeam",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1GetTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1GetTeamOK:
		return value, nil, nil
	case *TeamsV1GetTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1GetTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1GetTeamMember gets organization member details
*/
func (a *Client) TeamsV1GetTeamMember(params *TeamsV1GetTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1GetTeamMemberOK, *TeamsV1GetTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1GetTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_GetTeamMember",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1GetTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1GetTeamMemberOK:
		return value, nil, nil
	case *TeamsV1GetTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1GetTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1ListTeamMembers gets organization members
*/
func (a *Client) TeamsV1ListTeamMembers(params *TeamsV1ListTeamMembersParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamMembersOK, *TeamsV1ListTeamMembersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1ListTeamMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_ListTeamMembers",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1ListTeamMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1ListTeamMembersOK:
		return value, nil, nil
	case *TeamsV1ListTeamMembersNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1ListTeamMembersDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1ListTeamNames lists organizations names
*/
func (a *Client) TeamsV1ListTeamNames(params *TeamsV1ListTeamNamesParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamNamesOK, *TeamsV1ListTeamNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1ListTeamNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_ListTeamNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1ListTeamNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1ListTeamNamesOK:
		return value, nil, nil
	case *TeamsV1ListTeamNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1ListTeamNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1ListTeams lists organizations
*/
func (a *Client) TeamsV1ListTeams(params *TeamsV1ListTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1ListTeamsOK, *TeamsV1ListTeamsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1ListTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_ListTeams",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1ListTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1ListTeamsOK:
		return value, nil, nil
	case *TeamsV1ListTeamsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1ListTeamsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1PatchTeam patches organization
*/
func (a *Client) TeamsV1PatchTeam(params *TeamsV1PatchTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1PatchTeamOK, *TeamsV1PatchTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1PatchTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_PatchTeam",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1PatchTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1PatchTeamOK:
		return value, nil, nil
	case *TeamsV1PatchTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1PatchTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1PatchTeamMember patches organization member
*/
func (a *Client) TeamsV1PatchTeamMember(params *TeamsV1PatchTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1PatchTeamMemberOK, *TeamsV1PatchTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1PatchTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_PatchTeamMember",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1PatchTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1PatchTeamMemberOK:
		return value, nil, nil
	case *TeamsV1PatchTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1PatchTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1UpdateTeam updates organization
*/
func (a *Client) TeamsV1UpdateTeam(params *TeamsV1UpdateTeamParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1UpdateTeamOK, *TeamsV1UpdateTeamNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1UpdateTeamParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_UpdateTeam",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1UpdateTeamReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1UpdateTeamOK:
		return value, nil, nil
	case *TeamsV1UpdateTeamNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1UpdateTeamDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  TeamsV1UpdateTeamMember updates organization member
*/
func (a *Client) TeamsV1UpdateTeamMember(params *TeamsV1UpdateTeamMemberParams, authInfo runtime.ClientAuthInfoWriter) (*TeamsV1UpdateTeamMemberOK, *TeamsV1UpdateTeamMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTeamsV1UpdateTeamMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "TeamsV1_UpdateTeamMember",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/teams/{team}/members/{member.user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TeamsV1UpdateTeamMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *TeamsV1UpdateTeamMemberOK:
		return value, nil, nil
	case *TeamsV1UpdateTeamMemberNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TeamsV1UpdateTeamMemberDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
