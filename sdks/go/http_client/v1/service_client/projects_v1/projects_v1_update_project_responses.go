// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectsV1UpdateProjectReader is a Reader for the ProjectsV1UpdateProject structure.
type ProjectsV1UpdateProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsV1UpdateProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsV1UpdateProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectsV1UpdateProjectNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectsV1UpdateProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsV1UpdateProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsV1UpdateProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsV1UpdateProjectOK creates a ProjectsV1UpdateProjectOK with default headers values
func NewProjectsV1UpdateProjectOK() *ProjectsV1UpdateProjectOK {
	return &ProjectsV1UpdateProjectOK{}
}

/*ProjectsV1UpdateProjectOK handles this case with default header values.

A successful response.
*/
type ProjectsV1UpdateProjectOK struct {
	Payload *service_model.V1Project
}

func (o *ProjectsV1UpdateProjectOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project.name}][%d] projectsV1UpdateProjectOK  %+v", 200, o.Payload)
}

func (o *ProjectsV1UpdateProjectOK) GetPayload() *service_model.V1Project {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectNoContent creates a ProjectsV1UpdateProjectNoContent with default headers values
func NewProjectsV1UpdateProjectNoContent() *ProjectsV1UpdateProjectNoContent {
	return &ProjectsV1UpdateProjectNoContent{}
}

/*ProjectsV1UpdateProjectNoContent handles this case with default header values.

No content.
*/
type ProjectsV1UpdateProjectNoContent struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project.name}][%d] projectsV1UpdateProjectNoContent  %+v", 204, o.Payload)
}

func (o *ProjectsV1UpdateProjectNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectForbidden creates a ProjectsV1UpdateProjectForbidden with default headers values
func NewProjectsV1UpdateProjectForbidden() *ProjectsV1UpdateProjectForbidden {
	return &ProjectsV1UpdateProjectForbidden{}
}

/*ProjectsV1UpdateProjectForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectsV1UpdateProjectForbidden struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project.name}][%d] projectsV1UpdateProjectForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsV1UpdateProjectForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectNotFound creates a ProjectsV1UpdateProjectNotFound with default headers values
func NewProjectsV1UpdateProjectNotFound() *ProjectsV1UpdateProjectNotFound {
	return &ProjectsV1UpdateProjectNotFound{}
}

/*ProjectsV1UpdateProjectNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectsV1UpdateProjectNotFound struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project.name}][%d] projectsV1UpdateProjectNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsV1UpdateProjectNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectDefault creates a ProjectsV1UpdateProjectDefault with default headers values
func NewProjectsV1UpdateProjectDefault(code int) *ProjectsV1UpdateProjectDefault {
	return &ProjectsV1UpdateProjectDefault{
		_statusCode: code,
	}
}

/*ProjectsV1UpdateProjectDefault handles this case with default header values.

An unexpected error response
*/
type ProjectsV1UpdateProjectDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the projects v1 update project default response
func (o *ProjectsV1UpdateProjectDefault) Code() int {
	return o._statusCode
}

func (o *ProjectsV1UpdateProjectDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project.name}][%d] ProjectsV1_UpdateProject default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsV1UpdateProjectDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
