// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectsV1UpdateProjectTeamsReader is a Reader for the ProjectsV1UpdateProjectTeams structure.
type ProjectsV1UpdateProjectTeamsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsV1UpdateProjectTeamsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsV1UpdateProjectTeamsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectsV1UpdateProjectTeamsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectsV1UpdateProjectTeamsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsV1UpdateProjectTeamsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsV1UpdateProjectTeamsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsV1UpdateProjectTeamsOK creates a ProjectsV1UpdateProjectTeamsOK with default headers values
func NewProjectsV1UpdateProjectTeamsOK() *ProjectsV1UpdateProjectTeamsOK {
	return &ProjectsV1UpdateProjectTeamsOK{}
}

/*ProjectsV1UpdateProjectTeamsOK handles this case with default header values.

A successful response.
*/
type ProjectsV1UpdateProjectTeamsOK struct {
	Payload *service_model.V1ProjectTeams
}

func (o *ProjectsV1UpdateProjectTeamsOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/teams][%d] projectsV1UpdateProjectTeamsOK  %+v", 200, o.Payload)
}

func (o *ProjectsV1UpdateProjectTeamsOK) GetPayload() *service_model.V1ProjectTeams {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectTeamsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ProjectTeams)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectTeamsNoContent creates a ProjectsV1UpdateProjectTeamsNoContent with default headers values
func NewProjectsV1UpdateProjectTeamsNoContent() *ProjectsV1UpdateProjectTeamsNoContent {
	return &ProjectsV1UpdateProjectTeamsNoContent{}
}

/*ProjectsV1UpdateProjectTeamsNoContent handles this case with default header values.

No content.
*/
type ProjectsV1UpdateProjectTeamsNoContent struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectTeamsNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/teams][%d] projectsV1UpdateProjectTeamsNoContent  %+v", 204, o.Payload)
}

func (o *ProjectsV1UpdateProjectTeamsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectTeamsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectTeamsForbidden creates a ProjectsV1UpdateProjectTeamsForbidden with default headers values
func NewProjectsV1UpdateProjectTeamsForbidden() *ProjectsV1UpdateProjectTeamsForbidden {
	return &ProjectsV1UpdateProjectTeamsForbidden{}
}

/*ProjectsV1UpdateProjectTeamsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectsV1UpdateProjectTeamsForbidden struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectTeamsForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/teams][%d] projectsV1UpdateProjectTeamsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsV1UpdateProjectTeamsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectTeamsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectTeamsNotFound creates a ProjectsV1UpdateProjectTeamsNotFound with default headers values
func NewProjectsV1UpdateProjectTeamsNotFound() *ProjectsV1UpdateProjectTeamsNotFound {
	return &ProjectsV1UpdateProjectTeamsNotFound{}
}

/*ProjectsV1UpdateProjectTeamsNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectsV1UpdateProjectTeamsNotFound struct {
	Payload interface{}
}

func (o *ProjectsV1UpdateProjectTeamsNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/teams][%d] projectsV1UpdateProjectTeamsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsV1UpdateProjectTeamsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectTeamsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1UpdateProjectTeamsDefault creates a ProjectsV1UpdateProjectTeamsDefault with default headers values
func NewProjectsV1UpdateProjectTeamsDefault(code int) *ProjectsV1UpdateProjectTeamsDefault {
	return &ProjectsV1UpdateProjectTeamsDefault{
		_statusCode: code,
	}
}

/*ProjectsV1UpdateProjectTeamsDefault handles this case with default header values.

An unexpected error response
*/
type ProjectsV1UpdateProjectTeamsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the projects v1 update project teams default response
func (o *ProjectsV1UpdateProjectTeamsDefault) Code() int {
	return o._statusCode
}

func (o *ProjectsV1UpdateProjectTeamsDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/teams][%d] ProjectsV1_UpdateProjectTeams default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsV1UpdateProjectTeamsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectsV1UpdateProjectTeamsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
