// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectsV1ArchiveProjectReader is a Reader for the ProjectsV1ArchiveProject structure.
type ProjectsV1ArchiveProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsV1ArchiveProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsV1ArchiveProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectsV1ArchiveProjectNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectsV1ArchiveProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsV1ArchiveProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsV1ArchiveProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsV1ArchiveProjectOK creates a ProjectsV1ArchiveProjectOK with default headers values
func NewProjectsV1ArchiveProjectOK() *ProjectsV1ArchiveProjectOK {
	return &ProjectsV1ArchiveProjectOK{}
}

/*ProjectsV1ArchiveProjectOK handles this case with default header values.

A successful response.
*/
type ProjectsV1ArchiveProjectOK struct {
}

func (o *ProjectsV1ArchiveProjectOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] projectsV1ArchiveProjectOK ", 200)
}

func (o *ProjectsV1ArchiveProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewProjectsV1ArchiveProjectNoContent creates a ProjectsV1ArchiveProjectNoContent with default headers values
func NewProjectsV1ArchiveProjectNoContent() *ProjectsV1ArchiveProjectNoContent {
	return &ProjectsV1ArchiveProjectNoContent{}
}

/*ProjectsV1ArchiveProjectNoContent handles this case with default header values.

No content.
*/
type ProjectsV1ArchiveProjectNoContent struct {
	Payload interface{}
}

func (o *ProjectsV1ArchiveProjectNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] projectsV1ArchiveProjectNoContent  %+v", 204, o.Payload)
}

func (o *ProjectsV1ArchiveProjectNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1ArchiveProjectNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1ArchiveProjectForbidden creates a ProjectsV1ArchiveProjectForbidden with default headers values
func NewProjectsV1ArchiveProjectForbidden() *ProjectsV1ArchiveProjectForbidden {
	return &ProjectsV1ArchiveProjectForbidden{}
}

/*ProjectsV1ArchiveProjectForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectsV1ArchiveProjectForbidden struct {
	Payload interface{}
}

func (o *ProjectsV1ArchiveProjectForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] projectsV1ArchiveProjectForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsV1ArchiveProjectForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1ArchiveProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1ArchiveProjectNotFound creates a ProjectsV1ArchiveProjectNotFound with default headers values
func NewProjectsV1ArchiveProjectNotFound() *ProjectsV1ArchiveProjectNotFound {
	return &ProjectsV1ArchiveProjectNotFound{}
}

/*ProjectsV1ArchiveProjectNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectsV1ArchiveProjectNotFound struct {
	Payload interface{}
}

func (o *ProjectsV1ArchiveProjectNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] projectsV1ArchiveProjectNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsV1ArchiveProjectNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1ArchiveProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1ArchiveProjectDefault creates a ProjectsV1ArchiveProjectDefault with default headers values
func NewProjectsV1ArchiveProjectDefault(code int) *ProjectsV1ArchiveProjectDefault {
	return &ProjectsV1ArchiveProjectDefault{
		_statusCode: code,
	}
}

/*ProjectsV1ArchiveProjectDefault handles this case with default header values.

An unexpected error response
*/
type ProjectsV1ArchiveProjectDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the projects v1 archive project default response
func (o *ProjectsV1ArchiveProjectDefault) Code() int {
	return o._statusCode
}

func (o *ProjectsV1ArchiveProjectDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/archive][%d] ProjectsV1_ArchiveProject default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsV1ArchiveProjectDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectsV1ArchiveProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
