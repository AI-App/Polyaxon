// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectsV1PatchProjectSettingsReader is a Reader for the ProjectsV1PatchProjectSettings structure.
type ProjectsV1PatchProjectSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsV1PatchProjectSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsV1PatchProjectSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectsV1PatchProjectSettingsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectsV1PatchProjectSettingsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsV1PatchProjectSettingsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsV1PatchProjectSettingsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsV1PatchProjectSettingsOK creates a ProjectsV1PatchProjectSettingsOK with default headers values
func NewProjectsV1PatchProjectSettingsOK() *ProjectsV1PatchProjectSettingsOK {
	return &ProjectsV1PatchProjectSettingsOK{}
}

/*ProjectsV1PatchProjectSettingsOK handles this case with default header values.

A successful response.
*/
type ProjectsV1PatchProjectSettingsOK struct {
	Payload *service_model.V1ProjectSettings
}

func (o *ProjectsV1PatchProjectSettingsOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] projectsV1PatchProjectSettingsOK  %+v", 200, o.Payload)
}

func (o *ProjectsV1PatchProjectSettingsOK) GetPayload() *service_model.V1ProjectSettings {
	return o.Payload
}

func (o *ProjectsV1PatchProjectSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ProjectSettings)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectSettingsNoContent creates a ProjectsV1PatchProjectSettingsNoContent with default headers values
func NewProjectsV1PatchProjectSettingsNoContent() *ProjectsV1PatchProjectSettingsNoContent {
	return &ProjectsV1PatchProjectSettingsNoContent{}
}

/*ProjectsV1PatchProjectSettingsNoContent handles this case with default header values.

No content.
*/
type ProjectsV1PatchProjectSettingsNoContent struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectSettingsNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] projectsV1PatchProjectSettingsNoContent  %+v", 204, o.Payload)
}

func (o *ProjectsV1PatchProjectSettingsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectSettingsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectSettingsForbidden creates a ProjectsV1PatchProjectSettingsForbidden with default headers values
func NewProjectsV1PatchProjectSettingsForbidden() *ProjectsV1PatchProjectSettingsForbidden {
	return &ProjectsV1PatchProjectSettingsForbidden{}
}

/*ProjectsV1PatchProjectSettingsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectsV1PatchProjectSettingsForbidden struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectSettingsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] projectsV1PatchProjectSettingsForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsV1PatchProjectSettingsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectSettingsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectSettingsNotFound creates a ProjectsV1PatchProjectSettingsNotFound with default headers values
func NewProjectsV1PatchProjectSettingsNotFound() *ProjectsV1PatchProjectSettingsNotFound {
	return &ProjectsV1PatchProjectSettingsNotFound{}
}

/*ProjectsV1PatchProjectSettingsNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectsV1PatchProjectSettingsNotFound struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectSettingsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] projectsV1PatchProjectSettingsNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsV1PatchProjectSettingsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectSettingsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectSettingsDefault creates a ProjectsV1PatchProjectSettingsDefault with default headers values
func NewProjectsV1PatchProjectSettingsDefault(code int) *ProjectsV1PatchProjectSettingsDefault {
	return &ProjectsV1PatchProjectSettingsDefault{
		_statusCode: code,
	}
}

/*ProjectsV1PatchProjectSettingsDefault handles this case with default header values.

An unexpected error response
*/
type ProjectsV1PatchProjectSettingsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the projects v1 patch project settings default response
func (o *ProjectsV1PatchProjectSettingsDefault) Code() int {
	return o._statusCode
}

func (o *ProjectsV1PatchProjectSettingsDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/settings][%d] ProjectsV1_PatchProjectSettings default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsV1PatchProjectSettingsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectsV1PatchProjectSettingsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
