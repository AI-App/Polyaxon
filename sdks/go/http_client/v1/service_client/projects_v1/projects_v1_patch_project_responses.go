// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectsV1PatchProjectReader is a Reader for the ProjectsV1PatchProject structure.
type ProjectsV1PatchProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectsV1PatchProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectsV1PatchProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectsV1PatchProjectNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectsV1PatchProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectsV1PatchProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectsV1PatchProjectDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectsV1PatchProjectOK creates a ProjectsV1PatchProjectOK with default headers values
func NewProjectsV1PatchProjectOK() *ProjectsV1PatchProjectOK {
	return &ProjectsV1PatchProjectOK{}
}

/*ProjectsV1PatchProjectOK handles this case with default header values.

A successful response.
*/
type ProjectsV1PatchProjectOK struct {
	Payload *service_model.V1Project
}

func (o *ProjectsV1PatchProjectOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project.name}][%d] projectsV1PatchProjectOK  %+v", 200, o.Payload)
}

func (o *ProjectsV1PatchProjectOK) GetPayload() *service_model.V1Project {
	return o.Payload
}

func (o *ProjectsV1PatchProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Project)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectNoContent creates a ProjectsV1PatchProjectNoContent with default headers values
func NewProjectsV1PatchProjectNoContent() *ProjectsV1PatchProjectNoContent {
	return &ProjectsV1PatchProjectNoContent{}
}

/*ProjectsV1PatchProjectNoContent handles this case with default header values.

No content.
*/
type ProjectsV1PatchProjectNoContent struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project.name}][%d] projectsV1PatchProjectNoContent  %+v", 204, o.Payload)
}

func (o *ProjectsV1PatchProjectNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectForbidden creates a ProjectsV1PatchProjectForbidden with default headers values
func NewProjectsV1PatchProjectForbidden() *ProjectsV1PatchProjectForbidden {
	return &ProjectsV1PatchProjectForbidden{}
}

/*ProjectsV1PatchProjectForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectsV1PatchProjectForbidden struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project.name}][%d] projectsV1PatchProjectForbidden  %+v", 403, o.Payload)
}

func (o *ProjectsV1PatchProjectForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectNotFound creates a ProjectsV1PatchProjectNotFound with default headers values
func NewProjectsV1PatchProjectNotFound() *ProjectsV1PatchProjectNotFound {
	return &ProjectsV1PatchProjectNotFound{}
}

/*ProjectsV1PatchProjectNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectsV1PatchProjectNotFound struct {
	Payload interface{}
}

func (o *ProjectsV1PatchProjectNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project.name}][%d] projectsV1PatchProjectNotFound  %+v", 404, o.Payload)
}

func (o *ProjectsV1PatchProjectNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectsV1PatchProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectsV1PatchProjectDefault creates a ProjectsV1PatchProjectDefault with default headers values
func NewProjectsV1PatchProjectDefault(code int) *ProjectsV1PatchProjectDefault {
	return &ProjectsV1PatchProjectDefault{
		_statusCode: code,
	}
}

/*ProjectsV1PatchProjectDefault handles this case with default header values.

An unexpected error response
*/
type ProjectsV1PatchProjectDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the projects v1 patch project default response
func (o *ProjectsV1PatchProjectDefault) Code() int {
	return o._statusCode
}

func (o *ProjectsV1PatchProjectDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project.name}][%d] ProjectsV1_PatchProject default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectsV1PatchProjectDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectsV1PatchProjectDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
