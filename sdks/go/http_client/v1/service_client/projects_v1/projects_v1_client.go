// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package projects_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectsV1ArchiveProject(params *ProjectsV1ArchiveProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ArchiveProjectOK, *ProjectsV1ArchiveProjectNoContent, error)

	ProjectsV1BookmarkProject(params *ProjectsV1BookmarkProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1BookmarkProjectOK, *ProjectsV1BookmarkProjectNoContent, error)

	ProjectsV1CreateProject(params *ProjectsV1CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1CreateProjectOK, *ProjectsV1CreateProjectNoContent, error)

	ProjectsV1DeleteProject(params *ProjectsV1DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1DeleteProjectOK, *ProjectsV1DeleteProjectNoContent, error)

	ProjectsV1DisableProjectCI(params *ProjectsV1DisableProjectCIParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1DisableProjectCIOK, *ProjectsV1DisableProjectCINoContent, error)

	ProjectsV1EnableProjectCI(params *ProjectsV1EnableProjectCIParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1EnableProjectCIOK, *ProjectsV1EnableProjectCINoContent, error)

	ProjectsV1FetchProjectTeams(params *ProjectsV1FetchProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1FetchProjectTeamsOK, *ProjectsV1FetchProjectTeamsNoContent, error)

	ProjectsV1GetProject(params *ProjectsV1GetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1GetProjectOK, *ProjectsV1GetProjectNoContent, error)

	ProjectsV1GetProjectSettings(params *ProjectsV1GetProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1GetProjectSettingsOK, *ProjectsV1GetProjectSettingsNoContent, error)

	ProjectsV1ListArchivedProjects(params *ProjectsV1ListArchivedProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListArchivedProjectsOK, *ProjectsV1ListArchivedProjectsNoContent, error)

	ProjectsV1ListBookmarkedProjects(params *ProjectsV1ListBookmarkedProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListBookmarkedProjectsOK, *ProjectsV1ListBookmarkedProjectsNoContent, error)

	ProjectsV1ListProjectNames(params *ProjectsV1ListProjectNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListProjectNamesOK, *ProjectsV1ListProjectNamesNoContent, error)

	ProjectsV1ListProjects(params *ProjectsV1ListProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListProjectsOK, *ProjectsV1ListProjectsNoContent, error)

	ProjectsV1PatchProject(params *ProjectsV1PatchProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectOK, *ProjectsV1PatchProjectNoContent, error)

	ProjectsV1PatchProjectSettings(params *ProjectsV1PatchProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectSettingsOK, *ProjectsV1PatchProjectSettingsNoContent, error)

	ProjectsV1PatchProjectTeams(params *ProjectsV1PatchProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectTeamsOK, *ProjectsV1PatchProjectTeamsNoContent, error)

	ProjectsV1RestoreProject(params *ProjectsV1RestoreProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1RestoreProjectOK, *ProjectsV1RestoreProjectNoContent, error)

	ProjectsV1UnbookmarkProject(params *ProjectsV1UnbookmarkProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UnbookmarkProjectOK, *ProjectsV1UnbookmarkProjectNoContent, error)

	ProjectsV1UpdateProject(params *ProjectsV1UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectOK, *ProjectsV1UpdateProjectNoContent, error)

	ProjectsV1UpdateProjectSettings(params *ProjectsV1UpdateProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectSettingsOK, *ProjectsV1UpdateProjectSettingsNoContent, error)

	ProjectsV1UpdateProjectTeams(params *ProjectsV1UpdateProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectTeamsOK, *ProjectsV1UpdateProjectTeamsNoContent, error)

	UploadProjectArtifact(params *UploadProjectArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UploadProjectArtifactOK, *UploadProjectArtifactNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectsV1ArchiveProject archives project
*/
func (a *Client) ProjectsV1ArchiveProject(params *ProjectsV1ArchiveProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ArchiveProjectOK, *ProjectsV1ArchiveProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1ArchiveProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_ArchiveProject",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1ArchiveProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1ArchiveProjectOK:
		return value, nil, nil
	case *ProjectsV1ArchiveProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1ArchiveProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1BookmarkProject bookmarks project
*/
func (a *Client) ProjectsV1BookmarkProject(params *ProjectsV1BookmarkProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1BookmarkProjectOK, *ProjectsV1BookmarkProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1BookmarkProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_BookmarkProject",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1BookmarkProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1BookmarkProjectOK:
		return value, nil, nil
	case *ProjectsV1BookmarkProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1BookmarkProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1CreateProject creates new project
*/
func (a *Client) ProjectsV1CreateProject(params *ProjectsV1CreateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1CreateProjectOK, *ProjectsV1CreateProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1CreateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_CreateProject",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/projects/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1CreateProjectOK:
		return value, nil, nil
	case *ProjectsV1CreateProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1CreateProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1DeleteProject deletes project
*/
func (a *Client) ProjectsV1DeleteProject(params *ProjectsV1DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1DeleteProjectOK, *ProjectsV1DeleteProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1DeleteProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_DeleteProject",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1DeleteProjectOK:
		return value, nil, nil
	case *ProjectsV1DeleteProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1DeleteProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1DisableProjectCI disbales project c i
*/
func (a *Client) ProjectsV1DisableProjectCI(params *ProjectsV1DisableProjectCIParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1DisableProjectCIOK, *ProjectsV1DisableProjectCINoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1DisableProjectCIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_DisableProjectCI",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/ci",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1DisableProjectCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1DisableProjectCIOK:
		return value, nil, nil
	case *ProjectsV1DisableProjectCINoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1DisableProjectCIDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1EnableProjectCI enables project c i
*/
func (a *Client) ProjectsV1EnableProjectCI(params *ProjectsV1EnableProjectCIParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1EnableProjectCIOK, *ProjectsV1EnableProjectCINoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1EnableProjectCIParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_EnableProjectCI",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/ci",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1EnableProjectCIReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1EnableProjectCIOK:
		return value, nil, nil
	case *ProjectsV1EnableProjectCINoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1EnableProjectCIDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1FetchProjectTeams gets project teams
*/
func (a *Client) ProjectsV1FetchProjectTeams(params *ProjectsV1FetchProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1FetchProjectTeamsOK, *ProjectsV1FetchProjectTeamsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1FetchProjectTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_FetchProjectTeams",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1FetchProjectTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1FetchProjectTeamsOK:
		return value, nil, nil
	case *ProjectsV1FetchProjectTeamsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1FetchProjectTeamsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1GetProject gets project
*/
func (a *Client) ProjectsV1GetProject(params *ProjectsV1GetProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1GetProjectOK, *ProjectsV1GetProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1GetProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_GetProject",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1GetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1GetProjectOK:
		return value, nil, nil
	case *ProjectsV1GetProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1GetProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1GetProjectSettings gets project settings
*/
func (a *Client) ProjectsV1GetProjectSettings(params *ProjectsV1GetProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1GetProjectSettingsOK, *ProjectsV1GetProjectSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1GetProjectSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_GetProjectSettings",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1GetProjectSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1GetProjectSettingsOK:
		return value, nil, nil
	case *ProjectsV1GetProjectSettingsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1GetProjectSettingsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1ListArchivedProjects lists archived projects for user
*/
func (a *Client) ProjectsV1ListArchivedProjects(params *ProjectsV1ListArchivedProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListArchivedProjectsOK, *ProjectsV1ListArchivedProjectsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1ListArchivedProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_ListArchivedProjects",
		Method:             "GET",
		PathPattern:        "/api/v1/archives/{user}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1ListArchivedProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1ListArchivedProjectsOK:
		return value, nil, nil
	case *ProjectsV1ListArchivedProjectsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1ListArchivedProjectsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1ListBookmarkedProjects lists bookmarked projects for user
*/
func (a *Client) ProjectsV1ListBookmarkedProjects(params *ProjectsV1ListBookmarkedProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListBookmarkedProjectsOK, *ProjectsV1ListBookmarkedProjectsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1ListBookmarkedProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_ListBookmarkedProjects",
		Method:             "GET",
		PathPattern:        "/api/v1/bookmarks/{user}/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1ListBookmarkedProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1ListBookmarkedProjectsOK:
		return value, nil, nil
	case *ProjectsV1ListBookmarkedProjectsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1ListBookmarkedProjectsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1ListProjectNames lists project names
*/
func (a *Client) ProjectsV1ListProjectNames(params *ProjectsV1ListProjectNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListProjectNamesOK, *ProjectsV1ListProjectNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1ListProjectNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_ListProjectNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/projects/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1ListProjectNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1ListProjectNamesOK:
		return value, nil, nil
	case *ProjectsV1ListProjectNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1ListProjectNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1ListProjects lists projects
*/
func (a *Client) ProjectsV1ListProjects(params *ProjectsV1ListProjectsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1ListProjectsOK, *ProjectsV1ListProjectsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1ListProjectsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_ListProjects",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/projects/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1ListProjectsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1ListProjectsOK:
		return value, nil, nil
	case *ProjectsV1ListProjectsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1ListProjectsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1PatchProject patches project
*/
func (a *Client) ProjectsV1PatchProject(params *ProjectsV1PatchProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectOK, *ProjectsV1PatchProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1PatchProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_PatchProject",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1PatchProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1PatchProjectOK:
		return value, nil, nil
	case *ProjectsV1PatchProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1PatchProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1PatchProjectSettings patches project settings
*/
func (a *Client) ProjectsV1PatchProjectSettings(params *ProjectsV1PatchProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectSettingsOK, *ProjectsV1PatchProjectSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1PatchProjectSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_PatchProjectSettings",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1PatchProjectSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1PatchProjectSettingsOK:
		return value, nil, nil
	case *ProjectsV1PatchProjectSettingsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1PatchProjectSettingsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1PatchProjectTeams patches project teams
*/
func (a *Client) ProjectsV1PatchProjectTeams(params *ProjectsV1PatchProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1PatchProjectTeamsOK, *ProjectsV1PatchProjectTeamsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1PatchProjectTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_PatchProjectTeams",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1PatchProjectTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1PatchProjectTeamsOK:
		return value, nil, nil
	case *ProjectsV1PatchProjectTeamsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1PatchProjectTeamsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1RestoreProject restores project
*/
func (a *Client) ProjectsV1RestoreProject(params *ProjectsV1RestoreProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1RestoreProjectOK, *ProjectsV1RestoreProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1RestoreProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_RestoreProject",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1RestoreProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1RestoreProjectOK:
		return value, nil, nil
	case *ProjectsV1RestoreProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1RestoreProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1UnbookmarkProject unbookmarks project
*/
func (a *Client) ProjectsV1UnbookmarkProject(params *ProjectsV1UnbookmarkProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UnbookmarkProjectOK, *ProjectsV1UnbookmarkProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1UnbookmarkProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_UnbookmarkProject",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/unbookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1UnbookmarkProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1UnbookmarkProjectOK:
		return value, nil, nil
	case *ProjectsV1UnbookmarkProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1UnbookmarkProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1UpdateProject updates project
*/
func (a *Client) ProjectsV1UpdateProject(params *ProjectsV1UpdateProjectParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectOK, *ProjectsV1UpdateProjectNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1UpdateProjectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_UpdateProject",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1UpdateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1UpdateProjectOK:
		return value, nil, nil
	case *ProjectsV1UpdateProjectNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1UpdateProjectDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1UpdateProjectSettings updates project settings
*/
func (a *Client) ProjectsV1UpdateProjectSettings(params *ProjectsV1UpdateProjectSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectSettingsOK, *ProjectsV1UpdateProjectSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1UpdateProjectSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_UpdateProjectSettings",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1UpdateProjectSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1UpdateProjectSettingsOK:
		return value, nil, nil
	case *ProjectsV1UpdateProjectSettingsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1UpdateProjectSettingsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectsV1UpdateProjectTeams updates project teams
*/
func (a *Client) ProjectsV1UpdateProjectTeams(params *ProjectsV1UpdateProjectTeamsParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectsV1UpdateProjectTeamsOK, *ProjectsV1UpdateProjectTeamsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectsV1UpdateProjectTeamsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectsV1_UpdateProjectTeams",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/teams",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectsV1UpdateProjectTeamsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectsV1UpdateProjectTeamsOK:
		return value, nil, nil
	case *ProjectsV1UpdateProjectTeamsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectsV1UpdateProjectTeamsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UploadProjectArtifact uploads artifact to a store via project access
*/
func (a *Client) UploadProjectArtifact(params *UploadProjectArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UploadProjectArtifactOK, *UploadProjectArtifactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadProjectArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UploadProjectArtifact",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/artifacts/{uuid}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadProjectArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadProjectArtifactOK:
		return value, nil, nil
	case *UploadProjectArtifactNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for projects_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
