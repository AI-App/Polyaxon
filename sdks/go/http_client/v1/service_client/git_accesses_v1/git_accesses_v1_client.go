// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package git_accesses_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new git accesses v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for git accesses v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateGitAccess lists runs
*/
func (a *Client) CreateGitAccess(params *CreateGitAccessParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGitAccessOK, *CreateGitAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGitAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateGitAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/git_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGitAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateGitAccessOK:
		return value, nil, nil
	case *CreateGitAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteGitAccess patches run
*/
func (a *Client) DeleteGitAccess(params *DeleteGitAccessParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGitAccessOK, *DeleteGitAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGitAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGitAccess",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/git_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteGitAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteGitAccessOK:
		return value, nil, nil
	case *DeleteGitAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetGitAccess creates new run
*/
func (a *Client) GetGitAccess(params *GetGitAccessParams, authInfo runtime.ClientAuthInfoWriter) (*GetGitAccessOK, *GetGitAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGitAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGitAccess",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/git_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGitAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetGitAccessOK:
		return value, nil, nil
	case *GetGitAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGitAccessNames lists bookmarked runs for user
*/
func (a *Client) ListGitAccessNames(params *ListGitAccessNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListGitAccessNamesOK, *ListGitAccessNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGitAccessNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListGitAccessNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/git_accesses/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGitAccessNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListGitAccessNamesOK:
		return value, nil, nil
	case *ListGitAccessNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListGitAccesses lists archived runs for user
*/
func (a *Client) ListGitAccesses(params *ListGitAccessesParams, authInfo runtime.ClientAuthInfoWriter) (*ListGitAccessesOK, *ListGitAccessesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGitAccessesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListGitAccesses",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/git_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListGitAccessesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListGitAccessesOK:
		return value, nil, nil
	case *ListGitAccessesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchGitAccess updates run
*/
func (a *Client) PatchGitAccess(params *PatchGitAccessParams, authInfo runtime.ClientAuthInfoWriter) (*PatchGitAccessOK, *PatchGitAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchGitAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchGitAccess",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/git_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchGitAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchGitAccessOK:
		return value, nil, nil
	case *PatchGitAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateGitAccess gets run
*/
func (a *Client) UpdateGitAccess(params *UpdateGitAccessParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGitAccessOK, *UpdateGitAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGitAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateGitAccess",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/git_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateGitAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateGitAccessOK:
		return value, nil, nil
	case *UpdateGitAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for git_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
