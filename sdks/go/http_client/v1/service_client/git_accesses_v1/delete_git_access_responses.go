// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package git_accesses_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteGitAccessReader is a Reader for the DeleteGitAccess structure.
type DeleteGitAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteGitAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteGitAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteGitAccessNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteGitAccessForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteGitAccessNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteGitAccessOK creates a DeleteGitAccessOK with default headers values
func NewDeleteGitAccessOK() *DeleteGitAccessOK {
	return &DeleteGitAccessOK{}
}

/*DeleteGitAccessOK handles this case with default header values.

A successful response.
*/
type DeleteGitAccessOK struct {
}

func (o *DeleteGitAccessOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/git_accesses/{uuid}][%d] deleteGitAccessOK ", 200)
}

func (o *DeleteGitAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteGitAccessNoContent creates a DeleteGitAccessNoContent with default headers values
func NewDeleteGitAccessNoContent() *DeleteGitAccessNoContent {
	return &DeleteGitAccessNoContent{}
}

/*DeleteGitAccessNoContent handles this case with default header values.

No content.
*/
type DeleteGitAccessNoContent struct {
	Payload interface{}
}

func (o *DeleteGitAccessNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/git_accesses/{uuid}][%d] deleteGitAccessNoContent  %+v", 204, o.Payload)
}

func (o *DeleteGitAccessNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteGitAccessNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitAccessForbidden creates a DeleteGitAccessForbidden with default headers values
func NewDeleteGitAccessForbidden() *DeleteGitAccessForbidden {
	return &DeleteGitAccessForbidden{}
}

/*DeleteGitAccessForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type DeleteGitAccessForbidden struct {
	Payload interface{}
}

func (o *DeleteGitAccessForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/git_accesses/{uuid}][%d] deleteGitAccessForbidden  %+v", 403, o.Payload)
}

func (o *DeleteGitAccessForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteGitAccessForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteGitAccessNotFound creates a DeleteGitAccessNotFound with default headers values
func NewDeleteGitAccessNotFound() *DeleteGitAccessNotFound {
	return &DeleteGitAccessNotFound{}
}

/*DeleteGitAccessNotFound handles this case with default header values.

Resource does not exist.
*/
type DeleteGitAccessNotFound struct {
	Payload interface{}
}

func (o *DeleteGitAccessNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/git_accesses/{uuid}][%d] deleteGitAccessNotFound  %+v", 404, o.Payload)
}

func (o *DeleteGitAccessNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteGitAccessNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
