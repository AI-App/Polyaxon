// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package k8s_secrets_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new k8s secrets v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for k8s secrets v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateK8sSecrets lists runs
*/
func (a *Client) CreateK8sSecrets(params *CreateK8sSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateK8sSecretsOK, *CreateK8sSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateK8sSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateK8sSecrets",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/k8s_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateK8sSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateK8sSecretsOK:
		return value, nil, nil
	case *CreateK8sSecretsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteK8sSecret patches run
*/
func (a *Client) DeleteK8sSecret(params *DeleteK8sSecretParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteK8sSecretOK, *DeleteK8sSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteK8sSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteK8sSecret",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteK8sSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteK8sSecretOK:
		return value, nil, nil
	case *DeleteK8sSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8sSecret creates new run
*/
func (a *Client) GetK8sSecret(params *GetK8sSecretParams, authInfo runtime.ClientAuthInfoWriter) (*GetK8sSecretOK, *GetK8sSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8sSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetK8sSecret",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetK8sSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetK8sSecretOK:
		return value, nil, nil
	case *GetK8sSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8sSecretNames lists bookmarked runs for user
*/
func (a *Client) ListK8sSecretNames(params *ListK8sSecretNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8sSecretNamesOK, *ListK8sSecretNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8sSecretNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8sSecretNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListK8sSecretNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListK8sSecretNamesOK:
		return value, nil, nil
	case *ListK8sSecretNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8sSecrets lists archived runs for user
*/
func (a *Client) ListK8sSecrets(params *ListK8sSecretsParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8sSecretsOK, *ListK8sSecretsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8sSecretsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8sSecrets",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_secrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListK8sSecretsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListK8sSecretsOK:
		return value, nil, nil
	case *ListK8sSecretsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchK8sSecret updates run
*/
func (a *Client) PatchK8sSecret(params *PatchK8sSecretParams, authInfo runtime.ClientAuthInfoWriter) (*PatchK8sSecretOK, *PatchK8sSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchK8sSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchK8sSecret",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchK8sSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchK8sSecretOK:
		return value, nil, nil
	case *PatchK8sSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateK8sSecret gets run
*/
func (a *Client) UpdateK8sSecret(params *UpdateK8sSecretParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateK8sSecretOK, *UpdateK8sSecretNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateK8sSecretParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateK8sSecret",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/k8s_secrets/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateK8sSecretReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateK8sSecretOK:
		return value, nil, nil
	case *UpdateK8sSecretNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8s_secrets_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
