// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package queues_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queues v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queues v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	QueuesV1CreateQueue(params *QueuesV1CreateQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1CreateQueueOK, *QueuesV1CreateQueueNoContent, error)

	QueuesV1DeleteQueue(params *QueuesV1DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1DeleteQueueOK, *QueuesV1DeleteQueueNoContent, error)

	QueuesV1GetQueue(params *QueuesV1GetQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1GetQueueOK, *QueuesV1GetQueueNoContent, error)

	QueuesV1ListOrganizationQueueNames(params *QueuesV1ListOrganizationQueueNamesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListOrganizationQueueNamesOK, *QueuesV1ListOrganizationQueueNamesNoContent, error)

	QueuesV1ListOrganizationQueues(params *QueuesV1ListOrganizationQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListOrganizationQueuesOK, *QueuesV1ListOrganizationQueuesNoContent, error)

	QueuesV1ListQueueNames(params *QueuesV1ListQueueNamesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListQueueNamesOK, *QueuesV1ListQueueNamesNoContent, error)

	QueuesV1ListQueues(params *QueuesV1ListQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListQueuesOK, *QueuesV1ListQueuesNoContent, error)

	QueuesV1PatchQueue(params *QueuesV1PatchQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1PatchQueueOK, *QueuesV1PatchQueueNoContent, error)

	QueuesV1UpdateQueue(params *QueuesV1UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1UpdateQueueOK, *QueuesV1UpdateQueueNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  QueuesV1CreateQueue updates agent
*/
func (a *Client) QueuesV1CreateQueue(params *QueuesV1CreateQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1CreateQueueOK, *QueuesV1CreateQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1CreateQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_CreateQueue",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1CreateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1CreateQueueOK:
		return value, nil, nil
	case *QueuesV1CreateQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1CreateQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1DeleteQueue syncs agent
*/
func (a *Client) QueuesV1DeleteQueue(params *QueuesV1DeleteQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1DeleteQueueOK, *QueuesV1DeleteQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1DeleteQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_DeleteQueue",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1DeleteQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1DeleteQueueOK:
		return value, nil, nil
	case *QueuesV1DeleteQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1DeleteQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1GetQueue patches agent
*/
func (a *Client) QueuesV1GetQueue(params *QueuesV1GetQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1GetQueueOK, *QueuesV1GetQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1GetQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_GetQueue",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1GetQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1GetQueueOK:
		return value, nil, nil
	case *QueuesV1GetQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1GetQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1ListOrganizationQueueNames lists agents names
*/
func (a *Client) QueuesV1ListOrganizationQueueNames(params *QueuesV1ListOrganizationQueueNamesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListOrganizationQueueNamesOK, *QueuesV1ListOrganizationQueueNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1ListOrganizationQueueNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_ListOrganizationQueueNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/queues/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1ListOrganizationQueueNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1ListOrganizationQueueNamesOK:
		return value, nil, nil
	case *QueuesV1ListOrganizationQueueNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1ListOrganizationQueueNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1ListOrganizationQueues lists agents
*/
func (a *Client) QueuesV1ListOrganizationQueues(params *QueuesV1ListOrganizationQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListOrganizationQueuesOK, *QueuesV1ListOrganizationQueuesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1ListOrganizationQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_ListOrganizationQueues",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1ListOrganizationQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1ListOrganizationQueuesOK:
		return value, nil, nil
	case *QueuesV1ListOrganizationQueuesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1ListOrganizationQueuesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1ListQueueNames creates agent
*/
func (a *Client) QueuesV1ListQueueNames(params *QueuesV1ListQueueNamesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListQueueNamesOK, *QueuesV1ListQueueNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1ListQueueNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_ListQueueNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1ListQueueNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1ListQueueNamesOK:
		return value, nil, nil
	case *QueuesV1ListQueueNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1ListQueueNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1ListQueues gets agent
*/
func (a *Client) QueuesV1ListQueues(params *QueuesV1ListQueuesParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1ListQueuesOK, *QueuesV1ListQueuesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1ListQueuesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_ListQueues",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{agent}/queues",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1ListQueuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1ListQueuesOK:
		return value, nil, nil
	case *QueuesV1ListQueuesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1ListQueuesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1PatchQueue gets state queues runs
*/
func (a *Client) QueuesV1PatchQueue(params *QueuesV1PatchQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1PatchQueueOK, *QueuesV1PatchQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1PatchQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_PatchQueue",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1PatchQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1PatchQueueOK:
		return value, nil, nil
	case *QueuesV1PatchQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1PatchQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  QueuesV1UpdateQueue deletes agent
*/
func (a *Client) QueuesV1UpdateQueue(params *QueuesV1UpdateQueueParams, authInfo runtime.ClientAuthInfoWriter) (*QueuesV1UpdateQueueOK, *QueuesV1UpdateQueueNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewQueuesV1UpdateQueueParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "QueuesV1_UpdateQueue",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &QueuesV1UpdateQueueReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *QueuesV1UpdateQueueOK:
		return value, nil, nil
	case *QueuesV1UpdateQueueNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*QueuesV1UpdateQueueDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
