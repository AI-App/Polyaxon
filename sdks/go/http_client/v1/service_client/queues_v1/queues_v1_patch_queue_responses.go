// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package queues_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// QueuesV1PatchQueueReader is a Reader for the QueuesV1PatchQueue structure.
type QueuesV1PatchQueueReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueuesV1PatchQueueReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueuesV1PatchQueueOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewQueuesV1PatchQueueNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewQueuesV1PatchQueueForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueuesV1PatchQueueNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewQueuesV1PatchQueueDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQueuesV1PatchQueueOK creates a QueuesV1PatchQueueOK with default headers values
func NewQueuesV1PatchQueueOK() *QueuesV1PatchQueueOK {
	return &QueuesV1PatchQueueOK{}
}

/*QueuesV1PatchQueueOK handles this case with default header values.

A successful response.
*/
type QueuesV1PatchQueueOK struct {
	Payload *service_model.V1Queue
}

func (o *QueuesV1PatchQueueOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}][%d] queuesV1PatchQueueOK  %+v", 200, o.Payload)
}

func (o *QueuesV1PatchQueueOK) GetPayload() *service_model.V1Queue {
	return o.Payload
}

func (o *QueuesV1PatchQueueOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Queue)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1PatchQueueNoContent creates a QueuesV1PatchQueueNoContent with default headers values
func NewQueuesV1PatchQueueNoContent() *QueuesV1PatchQueueNoContent {
	return &QueuesV1PatchQueueNoContent{}
}

/*QueuesV1PatchQueueNoContent handles this case with default header values.

No content.
*/
type QueuesV1PatchQueueNoContent struct {
	Payload interface{}
}

func (o *QueuesV1PatchQueueNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}][%d] queuesV1PatchQueueNoContent  %+v", 204, o.Payload)
}

func (o *QueuesV1PatchQueueNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1PatchQueueNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1PatchQueueForbidden creates a QueuesV1PatchQueueForbidden with default headers values
func NewQueuesV1PatchQueueForbidden() *QueuesV1PatchQueueForbidden {
	return &QueuesV1PatchQueueForbidden{}
}

/*QueuesV1PatchQueueForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type QueuesV1PatchQueueForbidden struct {
	Payload interface{}
}

func (o *QueuesV1PatchQueueForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}][%d] queuesV1PatchQueueForbidden  %+v", 403, o.Payload)
}

func (o *QueuesV1PatchQueueForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1PatchQueueForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1PatchQueueNotFound creates a QueuesV1PatchQueueNotFound with default headers values
func NewQueuesV1PatchQueueNotFound() *QueuesV1PatchQueueNotFound {
	return &QueuesV1PatchQueueNotFound{}
}

/*QueuesV1PatchQueueNotFound handles this case with default header values.

Resource does not exist.
*/
type QueuesV1PatchQueueNotFound struct {
	Payload interface{}
}

func (o *QueuesV1PatchQueueNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}][%d] queuesV1PatchQueueNotFound  %+v", 404, o.Payload)
}

func (o *QueuesV1PatchQueueNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1PatchQueueNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1PatchQueueDefault creates a QueuesV1PatchQueueDefault with default headers values
func NewQueuesV1PatchQueueDefault(code int) *QueuesV1PatchQueueDefault {
	return &QueuesV1PatchQueueDefault{
		_statusCode: code,
	}
}

/*QueuesV1PatchQueueDefault handles this case with default header values.

An unexpected error response
*/
type QueuesV1PatchQueueDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the queues v1 patch queue default response
func (o *QueuesV1PatchQueueDefault) Code() int {
	return o._statusCode
}

func (o *QueuesV1PatchQueueDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/orgs/{owner}/agents/{queue.agent}/queues/{queue.uuid}][%d] QueuesV1_PatchQueue default  %+v", o._statusCode, o.Payload)
}

func (o *QueuesV1PatchQueueDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *QueuesV1PatchQueueDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
