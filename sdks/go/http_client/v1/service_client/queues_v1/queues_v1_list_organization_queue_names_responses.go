// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package queues_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// QueuesV1ListOrganizationQueueNamesReader is a Reader for the QueuesV1ListOrganizationQueueNames structure.
type QueuesV1ListOrganizationQueueNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueuesV1ListOrganizationQueueNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueuesV1ListOrganizationQueueNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewQueuesV1ListOrganizationQueueNamesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewQueuesV1ListOrganizationQueueNamesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueuesV1ListOrganizationQueueNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewQueuesV1ListOrganizationQueueNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewQueuesV1ListOrganizationQueueNamesOK creates a QueuesV1ListOrganizationQueueNamesOK with default headers values
func NewQueuesV1ListOrganizationQueueNamesOK() *QueuesV1ListOrganizationQueueNamesOK {
	return &QueuesV1ListOrganizationQueueNamesOK{}
}

/*QueuesV1ListOrganizationQueueNamesOK handles this case with default header values.

A successful response.
*/
type QueuesV1ListOrganizationQueueNamesOK struct {
	Payload *service_model.V1ListQueuesResponse
}

func (o *QueuesV1ListOrganizationQueueNamesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/queues/names][%d] queuesV1ListOrganizationQueueNamesOK  %+v", 200, o.Payload)
}

func (o *QueuesV1ListOrganizationQueueNamesOK) GetPayload() *service_model.V1ListQueuesResponse {
	return o.Payload
}

func (o *QueuesV1ListOrganizationQueueNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListQueuesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1ListOrganizationQueueNamesNoContent creates a QueuesV1ListOrganizationQueueNamesNoContent with default headers values
func NewQueuesV1ListOrganizationQueueNamesNoContent() *QueuesV1ListOrganizationQueueNamesNoContent {
	return &QueuesV1ListOrganizationQueueNamesNoContent{}
}

/*QueuesV1ListOrganizationQueueNamesNoContent handles this case with default header values.

No content.
*/
type QueuesV1ListOrganizationQueueNamesNoContent struct {
	Payload interface{}
}

func (o *QueuesV1ListOrganizationQueueNamesNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/queues/names][%d] queuesV1ListOrganizationQueueNamesNoContent  %+v", 204, o.Payload)
}

func (o *QueuesV1ListOrganizationQueueNamesNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1ListOrganizationQueueNamesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1ListOrganizationQueueNamesForbidden creates a QueuesV1ListOrganizationQueueNamesForbidden with default headers values
func NewQueuesV1ListOrganizationQueueNamesForbidden() *QueuesV1ListOrganizationQueueNamesForbidden {
	return &QueuesV1ListOrganizationQueueNamesForbidden{}
}

/*QueuesV1ListOrganizationQueueNamesForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type QueuesV1ListOrganizationQueueNamesForbidden struct {
	Payload interface{}
}

func (o *QueuesV1ListOrganizationQueueNamesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/queues/names][%d] queuesV1ListOrganizationQueueNamesForbidden  %+v", 403, o.Payload)
}

func (o *QueuesV1ListOrganizationQueueNamesForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1ListOrganizationQueueNamesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1ListOrganizationQueueNamesNotFound creates a QueuesV1ListOrganizationQueueNamesNotFound with default headers values
func NewQueuesV1ListOrganizationQueueNamesNotFound() *QueuesV1ListOrganizationQueueNamesNotFound {
	return &QueuesV1ListOrganizationQueueNamesNotFound{}
}

/*QueuesV1ListOrganizationQueueNamesNotFound handles this case with default header values.

Resource does not exist.
*/
type QueuesV1ListOrganizationQueueNamesNotFound struct {
	Payload interface{}
}

func (o *QueuesV1ListOrganizationQueueNamesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/queues/names][%d] queuesV1ListOrganizationQueueNamesNotFound  %+v", 404, o.Payload)
}

func (o *QueuesV1ListOrganizationQueueNamesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *QueuesV1ListOrganizationQueueNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueuesV1ListOrganizationQueueNamesDefault creates a QueuesV1ListOrganizationQueueNamesDefault with default headers values
func NewQueuesV1ListOrganizationQueueNamesDefault(code int) *QueuesV1ListOrganizationQueueNamesDefault {
	return &QueuesV1ListOrganizationQueueNamesDefault{
		_statusCode: code,
	}
}

/*QueuesV1ListOrganizationQueueNamesDefault handles this case with default header values.

An unexpected error response
*/
type QueuesV1ListOrganizationQueueNamesDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the queues v1 list organization queue names default response
func (o *QueuesV1ListOrganizationQueueNamesDefault) Code() int {
	return o._statusCode
}

func (o *QueuesV1ListOrganizationQueueNamesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/orgs/{owner}/queues/names][%d] QueuesV1_ListOrganizationQueueNames default  %+v", o._statusCode, o.Payload)
}

func (o *QueuesV1ListOrganizationQueueNamesDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *QueuesV1ListOrganizationQueueNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
