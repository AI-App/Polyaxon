// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package component_hub_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new component hub v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for component hub v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateComponentHub(params *CreateComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*CreateComponentHubOK, *CreateComponentHubNoContent, error)

	DeleteComponentHub(params *DeleteComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteComponentHubOK, *DeleteComponentHubNoContent, error)

	GetComponentHub(params *GetComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*GetComponentHubOK, *GetComponentHubNoContent, error)

	ListComponentHubNames(params *ListComponentHubNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListComponentHubNamesOK, *ListComponentHubNamesNoContent, error)

	ListComponentHubs(params *ListComponentHubsParams, authInfo runtime.ClientAuthInfoWriter) (*ListComponentHubsOK, *ListComponentHubsNoContent, error)

	PatchComponentHub(params *PatchComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*PatchComponentHubOK, *PatchComponentHubNoContent, error)

	UpdateComponentHub(params *UpdateComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateComponentHubOK, *UpdateComponentHubNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateComponentHub creates hub component
*/
func (a *Client) CreateComponentHub(params *CreateComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*CreateComponentHubOK, *CreateComponentHubNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateComponentHubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateComponentHub",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateComponentHubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateComponentHubOK:
		return value, nil, nil
	case *CreateComponentHubNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateComponentHubDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteComponentHub deletes hub component
*/
func (a *Client) DeleteComponentHub(params *DeleteComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteComponentHubOK, *DeleteComponentHubNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteComponentHubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteComponentHub",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteComponentHubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteComponentHubOK:
		return value, nil, nil
	case *DeleteComponentHubNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteComponentHubDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetComponentHub gets hub component
*/
func (a *Client) GetComponentHub(params *GetComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*GetComponentHubOK, *GetComponentHubNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentHubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetComponentHub",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetComponentHubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetComponentHubOK:
		return value, nil, nil
	case *GetComponentHubNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetComponentHubDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListComponentHubNames lists hub component names
*/
func (a *Client) ListComponentHubNames(params *ListComponentHubNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListComponentHubNamesOK, *ListComponentHubNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListComponentHubNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListComponentHubNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListComponentHubNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListComponentHubNamesOK:
		return value, nil, nil
	case *ListComponentHubNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListComponentHubNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ListComponentHubs lists hub components
*/
func (a *Client) ListComponentHubs(params *ListComponentHubsParams, authInfo runtime.ClientAuthInfoWriter) (*ListComponentHubsOK, *ListComponentHubsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListComponentHubsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListComponentHubs",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListComponentHubsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListComponentHubsOK:
		return value, nil, nil
	case *ListComponentHubsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListComponentHubsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PatchComponentHub patches hub component
*/
func (a *Client) PatchComponentHub(params *PatchComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*PatchComponentHubOK, *PatchComponentHubNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchComponentHubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchComponentHub",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchComponentHubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchComponentHubOK:
		return value, nil, nil
	case *PatchComponentHubNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PatchComponentHubDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UpdateComponentHub updates hub component
*/
func (a *Client) UpdateComponentHub(params *UpdateComponentHubParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateComponentHubOK, *UpdateComponentHubNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateComponentHubParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateComponentHub",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/components/{component.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateComponentHubReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateComponentHubOK:
		return value, nil, nil
	case *UpdateComponentHubNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateComponentHubDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
