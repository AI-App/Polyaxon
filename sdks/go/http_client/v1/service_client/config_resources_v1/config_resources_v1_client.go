// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package config_resources_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new config resources v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for config resources v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateConfigResource lists runs
*/
func (a *Client) CreateConfigResource(params *CreateConfigResourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateConfigResourceOK, *CreateConfigResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateConfigResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateConfigResource",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateConfigResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateConfigResourceOK:
		return value, nil, nil
	case *CreateConfigResourceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteConfigResource patches run
*/
func (a *Client) DeleteConfigResource(params *DeleteConfigResourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConfigResourceOK, *DeleteConfigResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConfigResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteConfigResource",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteConfigResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteConfigResourceOK:
		return value, nil, nil
	case *DeleteConfigResourceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetConfigResource creates new run
*/
func (a *Client) GetConfigResource(params *GetConfigResourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetConfigResourceOK, *GetConfigResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConfigResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConfigResource",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetConfigResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetConfigResourceOK:
		return value, nil, nil
	case *GetConfigResourceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConfigResourceNames lists bookmarked runs for user
*/
func (a *Client) ListConfigResourceNames(params *ListConfigResourceNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListConfigResourceNamesOK, *ListConfigResourceNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigResourceNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListConfigResourceNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConfigResourceNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListConfigResourceNamesOK:
		return value, nil, nil
	case *ListConfigResourceNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListConfigResources lists archived runs for user
*/
func (a *Client) ListConfigResources(params *ListConfigResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*ListConfigResourcesOK, *ListConfigResourcesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListConfigResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListConfigResources",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListConfigResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListConfigResourcesOK:
		return value, nil, nil
	case *ListConfigResourcesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchConfigResource updates run
*/
func (a *Client) PatchConfigResource(params *PatchConfigResourceParams, authInfo runtime.ClientAuthInfoWriter) (*PatchConfigResourceOK, *PatchConfigResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchConfigResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchConfigResource",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources/{config_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchConfigResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchConfigResourceOK:
		return value, nil, nil
	case *PatchConfigResourceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateConfigResource gets run
*/
func (a *Client) UpdateConfigResource(params *UpdateConfigResourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConfigResourceOK, *UpdateConfigResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConfigResourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateConfigResource",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/config_resources/{config_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateConfigResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateConfigResourceOK:
		return value, nil, nil
	case *UpdateConfigResourceNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for config_resources_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
