// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package searches_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new searches v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for searches v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SearchesV1CreateSearch(params *SearchesV1CreateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1CreateSearchOK, *SearchesV1CreateSearchNoContent, error)

	SearchesV1DeleteSearch(params *SearchesV1DeleteSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1DeleteSearchOK, *SearchesV1DeleteSearchNoContent, error)

	SearchesV1GetSearch(params *SearchesV1GetSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1GetSearchOK, *SearchesV1GetSearchNoContent, error)

	SearchesV1ListSearchNames(params *SearchesV1ListSearchNamesParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1ListSearchNamesOK, *SearchesV1ListSearchNamesNoContent, error)

	SearchesV1ListSearches(params *SearchesV1ListSearchesParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1ListSearchesOK, *SearchesV1ListSearchesNoContent, error)

	SearchesV1PatchSearch(params *SearchesV1PatchSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1PatchSearchOK, *SearchesV1PatchSearchNoContent, error)

	SearchesV1UpdateSearch(params *SearchesV1UpdateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1UpdateSearchOK, *SearchesV1UpdateSearchNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SearchesV1CreateSearch creates search
*/
func (a *Client) SearchesV1CreateSearch(params *SearchesV1CreateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1CreateSearchOK, *SearchesV1CreateSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1CreateSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_CreateSearch",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1CreateSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1CreateSearchOK:
		return value, nil, nil
	case *SearchesV1CreateSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1CreateSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1DeleteSearch deletes search
*/
func (a *Client) SearchesV1DeleteSearch(params *SearchesV1DeleteSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1DeleteSearchOK, *SearchesV1DeleteSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1DeleteSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_DeleteSearch",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1DeleteSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1DeleteSearchOK:
		return value, nil, nil
	case *SearchesV1DeleteSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1DeleteSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1GetSearch gets search
*/
func (a *Client) SearchesV1GetSearch(params *SearchesV1GetSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1GetSearchOK, *SearchesV1GetSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1GetSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_GetSearch",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1GetSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1GetSearchOK:
		return value, nil, nil
	case *SearchesV1GetSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1GetSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1ListSearchNames lists search names
*/
func (a *Client) SearchesV1ListSearchNames(params *SearchesV1ListSearchNamesParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1ListSearchNamesOK, *SearchesV1ListSearchNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1ListSearchNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_ListSearchNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/searches/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1ListSearchNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1ListSearchNamesOK:
		return value, nil, nil
	case *SearchesV1ListSearchNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1ListSearchNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1ListSearches lists searches
*/
func (a *Client) SearchesV1ListSearches(params *SearchesV1ListSearchesParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1ListSearchesOK, *SearchesV1ListSearchesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1ListSearchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_ListSearches",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1ListSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1ListSearchesOK:
		return value, nil, nil
	case *SearchesV1ListSearchesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1ListSearchesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1PatchSearch patches search
*/
func (a *Client) SearchesV1PatchSearch(params *SearchesV1PatchSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1PatchSearchOK, *SearchesV1PatchSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1PatchSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_PatchSearch",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1PatchSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1PatchSearchOK:
		return value, nil, nil
	case *SearchesV1PatchSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1PatchSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchesV1UpdateSearch updates search
*/
func (a *Client) SearchesV1UpdateSearch(params *SearchesV1UpdateSearchParams, authInfo runtime.ClientAuthInfoWriter) (*SearchesV1UpdateSearchOK, *SearchesV1UpdateSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchesV1UpdateSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SearchesV1_UpdateSearch",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SearchesV1UpdateSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *SearchesV1UpdateSearchOK:
		return value, nil, nil
	case *SearchesV1UpdateSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchesV1UpdateSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
