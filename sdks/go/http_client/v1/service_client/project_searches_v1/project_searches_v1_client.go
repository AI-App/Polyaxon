// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project_searches_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project searches v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project searches v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ProjectSearchesV1CreateProjectSearch(params *ProjectSearchesV1CreateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1CreateProjectSearchOK, *ProjectSearchesV1CreateProjectSearchNoContent, error)

	ProjectSearchesV1DeleteProjectSearch(params *ProjectSearchesV1DeleteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1DeleteProjectSearchOK, *ProjectSearchesV1DeleteProjectSearchNoContent, error)

	ProjectSearchesV1GetProjectSearch(params *ProjectSearchesV1GetProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1GetProjectSearchOK, *ProjectSearchesV1GetProjectSearchNoContent, error)

	ProjectSearchesV1ListProjectSearchNames(params *ProjectSearchesV1ListProjectSearchNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1ListProjectSearchNamesOK, *ProjectSearchesV1ListProjectSearchNamesNoContent, error)

	ProjectSearchesV1ListProjectSearches(params *ProjectSearchesV1ListProjectSearchesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1ListProjectSearchesOK, *ProjectSearchesV1ListProjectSearchesNoContent, error)

	ProjectSearchesV1PatchProjectSearch(params *ProjectSearchesV1PatchProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1PatchProjectSearchOK, *ProjectSearchesV1PatchProjectSearchNoContent, error)

	ProjectSearchesV1PromoteProjectSearch(params *ProjectSearchesV1PromoteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1PromoteProjectSearchOK, *ProjectSearchesV1PromoteProjectSearchNoContent, error)

	ProjectSearchesV1UpdateProjectSearch(params *ProjectSearchesV1UpdateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1UpdateProjectSearchOK, *ProjectSearchesV1UpdateProjectSearchNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ProjectSearchesV1CreateProjectSearch creates project search
*/
func (a *Client) ProjectSearchesV1CreateProjectSearch(params *ProjectSearchesV1CreateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1CreateProjectSearchOK, *ProjectSearchesV1CreateProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1CreateProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_CreateProjectSearch",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1CreateProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1CreateProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1CreateProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1CreateProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1DeleteProjectSearch deletes project search
*/
func (a *Client) ProjectSearchesV1DeleteProjectSearch(params *ProjectSearchesV1DeleteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1DeleteProjectSearchOK, *ProjectSearchesV1DeleteProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1DeleteProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_DeleteProjectSearch",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1DeleteProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1DeleteProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1DeleteProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1DeleteProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1GetProjectSearch gets project search
*/
func (a *Client) ProjectSearchesV1GetProjectSearch(params *ProjectSearchesV1GetProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1GetProjectSearchOK, *ProjectSearchesV1GetProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1GetProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_GetProjectSearch",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1GetProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1GetProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1GetProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1GetProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1ListProjectSearchNames lists project search names
*/
func (a *Client) ProjectSearchesV1ListProjectSearchNames(params *ProjectSearchesV1ListProjectSearchNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1ListProjectSearchNamesOK, *ProjectSearchesV1ListProjectSearchNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1ListProjectSearchNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_ListProjectSearchNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/searches/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1ListProjectSearchNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1ListProjectSearchNamesOK:
		return value, nil, nil
	case *ProjectSearchesV1ListProjectSearchNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1ListProjectSearchNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1ListProjectSearches lists project searches
*/
func (a *Client) ProjectSearchesV1ListProjectSearches(params *ProjectSearchesV1ListProjectSearchesParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1ListProjectSearchesOK, *ProjectSearchesV1ListProjectSearchesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1ListProjectSearchesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_ListProjectSearches",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1ListProjectSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1ListProjectSearchesOK:
		return value, nil, nil
	case *ProjectSearchesV1ListProjectSearchesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1ListProjectSearchesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1PatchProjectSearch patches project search
*/
func (a *Client) ProjectSearchesV1PatchProjectSearch(params *ProjectSearchesV1PatchProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1PatchProjectSearchOK, *ProjectSearchesV1PatchProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1PatchProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_PatchProjectSearch",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1PatchProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1PatchProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1PatchProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1PatchProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1PromoteProjectSearch promotes project search
*/
func (a *Client) ProjectSearchesV1PromoteProjectSearch(params *ProjectSearchesV1PromoteProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1PromoteProjectSearchOK, *ProjectSearchesV1PromoteProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1PromoteProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_PromoteProjectSearch",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{uuid}/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1PromoteProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1PromoteProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1PromoteProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1PromoteProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ProjectSearchesV1UpdateProjectSearch updates project search
*/
func (a *Client) ProjectSearchesV1UpdateProjectSearch(params *ProjectSearchesV1UpdateProjectSearchParams, authInfo runtime.ClientAuthInfoWriter) (*ProjectSearchesV1UpdateProjectSearchOK, *ProjectSearchesV1UpdateProjectSearchNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewProjectSearchesV1UpdateProjectSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ProjectSearchesV1_UpdateProjectSearch",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/searches/{search.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ProjectSearchesV1UpdateProjectSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ProjectSearchesV1UpdateProjectSearchOK:
		return value, nil, nil
	case *ProjectSearchesV1UpdateProjectSearchNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ProjectSearchesV1UpdateProjectSearchDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
