// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project_searches_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectSearchesV1PatchProjectSearchReader is a Reader for the ProjectSearchesV1PatchProjectSearch structure.
type ProjectSearchesV1PatchProjectSearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectSearchesV1PatchProjectSearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectSearchesV1PatchProjectSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectSearchesV1PatchProjectSearchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectSearchesV1PatchProjectSearchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectSearchesV1PatchProjectSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectSearchesV1PatchProjectSearchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectSearchesV1PatchProjectSearchOK creates a ProjectSearchesV1PatchProjectSearchOK with default headers values
func NewProjectSearchesV1PatchProjectSearchOK() *ProjectSearchesV1PatchProjectSearchOK {
	return &ProjectSearchesV1PatchProjectSearchOK{}
}

/*ProjectSearchesV1PatchProjectSearchOK handles this case with default header values.

A successful response.
*/
type ProjectSearchesV1PatchProjectSearchOK struct {
	Payload *service_model.V1Search
}

func (o *ProjectSearchesV1PatchProjectSearchOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] projectSearchesV1PatchProjectSearchOK  %+v", 200, o.Payload)
}

func (o *ProjectSearchesV1PatchProjectSearchOK) GetPayload() *service_model.V1Search {
	return o.Payload
}

func (o *ProjectSearchesV1PatchProjectSearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Search)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectSearchesV1PatchProjectSearchNoContent creates a ProjectSearchesV1PatchProjectSearchNoContent with default headers values
func NewProjectSearchesV1PatchProjectSearchNoContent() *ProjectSearchesV1PatchProjectSearchNoContent {
	return &ProjectSearchesV1PatchProjectSearchNoContent{}
}

/*ProjectSearchesV1PatchProjectSearchNoContent handles this case with default header values.

No content.
*/
type ProjectSearchesV1PatchProjectSearchNoContent struct {
	Payload interface{}
}

func (o *ProjectSearchesV1PatchProjectSearchNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] projectSearchesV1PatchProjectSearchNoContent  %+v", 204, o.Payload)
}

func (o *ProjectSearchesV1PatchProjectSearchNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectSearchesV1PatchProjectSearchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectSearchesV1PatchProjectSearchForbidden creates a ProjectSearchesV1PatchProjectSearchForbidden with default headers values
func NewProjectSearchesV1PatchProjectSearchForbidden() *ProjectSearchesV1PatchProjectSearchForbidden {
	return &ProjectSearchesV1PatchProjectSearchForbidden{}
}

/*ProjectSearchesV1PatchProjectSearchForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectSearchesV1PatchProjectSearchForbidden struct {
	Payload interface{}
}

func (o *ProjectSearchesV1PatchProjectSearchForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] projectSearchesV1PatchProjectSearchForbidden  %+v", 403, o.Payload)
}

func (o *ProjectSearchesV1PatchProjectSearchForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectSearchesV1PatchProjectSearchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectSearchesV1PatchProjectSearchNotFound creates a ProjectSearchesV1PatchProjectSearchNotFound with default headers values
func NewProjectSearchesV1PatchProjectSearchNotFound() *ProjectSearchesV1PatchProjectSearchNotFound {
	return &ProjectSearchesV1PatchProjectSearchNotFound{}
}

/*ProjectSearchesV1PatchProjectSearchNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectSearchesV1PatchProjectSearchNotFound struct {
	Payload interface{}
}

func (o *ProjectSearchesV1PatchProjectSearchNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] projectSearchesV1PatchProjectSearchNotFound  %+v", 404, o.Payload)
}

func (o *ProjectSearchesV1PatchProjectSearchNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectSearchesV1PatchProjectSearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectSearchesV1PatchProjectSearchDefault creates a ProjectSearchesV1PatchProjectSearchDefault with default headers values
func NewProjectSearchesV1PatchProjectSearchDefault(code int) *ProjectSearchesV1PatchProjectSearchDefault {
	return &ProjectSearchesV1PatchProjectSearchDefault{
		_statusCode: code,
	}
}

/*ProjectSearchesV1PatchProjectSearchDefault handles this case with default header values.

An unexpected error response
*/
type ProjectSearchesV1PatchProjectSearchDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the project searches v1 patch project search default response
func (o *ProjectSearchesV1PatchProjectSearchDefault) Code() int {
	return o._statusCode
}

func (o *ProjectSearchesV1PatchProjectSearchDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/searches/{search.uuid}][%d] ProjectSearchesV1_PatchProjectSearch default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectSearchesV1PatchProjectSearchDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectSearchesV1PatchProjectSearchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
