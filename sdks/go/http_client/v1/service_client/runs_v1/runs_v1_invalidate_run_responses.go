// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1InvalidateRunReader is a Reader for the RunsV1InvalidateRun structure.
type RunsV1InvalidateRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1InvalidateRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1InvalidateRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1InvalidateRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1InvalidateRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1InvalidateRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1InvalidateRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1InvalidateRunOK creates a RunsV1InvalidateRunOK with default headers values
func NewRunsV1InvalidateRunOK() *RunsV1InvalidateRunOK {
	return &RunsV1InvalidateRunOK{}
}

/*RunsV1InvalidateRunOK handles this case with default header values.

A successful response.
*/
type RunsV1InvalidateRunOK struct {
}

func (o *RunsV1InvalidateRunOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/{uuid}/invalidate][%d] runsV1InvalidateRunOK ", 200)
}

func (o *RunsV1InvalidateRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunsV1InvalidateRunNoContent creates a RunsV1InvalidateRunNoContent with default headers values
func NewRunsV1InvalidateRunNoContent() *RunsV1InvalidateRunNoContent {
	return &RunsV1InvalidateRunNoContent{}
}

/*RunsV1InvalidateRunNoContent handles this case with default header values.

No content.
*/
type RunsV1InvalidateRunNoContent struct {
	Payload interface{}
}

func (o *RunsV1InvalidateRunNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/{uuid}/invalidate][%d] runsV1InvalidateRunNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1InvalidateRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1InvalidateRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1InvalidateRunForbidden creates a RunsV1InvalidateRunForbidden with default headers values
func NewRunsV1InvalidateRunForbidden() *RunsV1InvalidateRunForbidden {
	return &RunsV1InvalidateRunForbidden{}
}

/*RunsV1InvalidateRunForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1InvalidateRunForbidden struct {
	Payload interface{}
}

func (o *RunsV1InvalidateRunForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/{uuid}/invalidate][%d] runsV1InvalidateRunForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1InvalidateRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1InvalidateRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1InvalidateRunNotFound creates a RunsV1InvalidateRunNotFound with default headers values
func NewRunsV1InvalidateRunNotFound() *RunsV1InvalidateRunNotFound {
	return &RunsV1InvalidateRunNotFound{}
}

/*RunsV1InvalidateRunNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1InvalidateRunNotFound struct {
	Payload interface{}
}

func (o *RunsV1InvalidateRunNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/{uuid}/invalidate][%d] runsV1InvalidateRunNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1InvalidateRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1InvalidateRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1InvalidateRunDefault creates a RunsV1InvalidateRunDefault with default headers values
func NewRunsV1InvalidateRunDefault(code int) *RunsV1InvalidateRunDefault {
	return &RunsV1InvalidateRunDefault{
		_statusCode: code,
	}
}

/*RunsV1InvalidateRunDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1InvalidateRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 invalidate run default response
func (o *RunsV1InvalidateRunDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1InvalidateRunDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/{uuid}/invalidate][%d] RunsV1_InvalidateRun default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1InvalidateRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1InvalidateRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
