// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1GetRunEventsReader is a Reader for the RunsV1GetRunEvents structure.
type RunsV1GetRunEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1GetRunEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1GetRunEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1GetRunEventsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1GetRunEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1GetRunEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1GetRunEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1GetRunEventsOK creates a RunsV1GetRunEventsOK with default headers values
func NewRunsV1GetRunEventsOK() *RunsV1GetRunEventsOK {
	return &RunsV1GetRunEventsOK{}
}

/*RunsV1GetRunEventsOK handles this case with default header values.

A successful response.
*/
type RunsV1GetRunEventsOK struct {
	Payload *service_model.V1EventsResponse
}

func (o *RunsV1GetRunEventsOK) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}][%d] runsV1GetRunEventsOK  %+v", 200, o.Payload)
}

func (o *RunsV1GetRunEventsOK) GetPayload() *service_model.V1EventsResponse {
	return o.Payload
}

func (o *RunsV1GetRunEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1EventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunEventsNoContent creates a RunsV1GetRunEventsNoContent with default headers values
func NewRunsV1GetRunEventsNoContent() *RunsV1GetRunEventsNoContent {
	return &RunsV1GetRunEventsNoContent{}
}

/*RunsV1GetRunEventsNoContent handles this case with default header values.

No content.
*/
type RunsV1GetRunEventsNoContent struct {
	Payload interface{}
}

func (o *RunsV1GetRunEventsNoContent) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}][%d] runsV1GetRunEventsNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1GetRunEventsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunEventsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunEventsForbidden creates a RunsV1GetRunEventsForbidden with default headers values
func NewRunsV1GetRunEventsForbidden() *RunsV1GetRunEventsForbidden {
	return &RunsV1GetRunEventsForbidden{}
}

/*RunsV1GetRunEventsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1GetRunEventsForbidden struct {
	Payload interface{}
}

func (o *RunsV1GetRunEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}][%d] runsV1GetRunEventsForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1GetRunEventsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunEventsNotFound creates a RunsV1GetRunEventsNotFound with default headers values
func NewRunsV1GetRunEventsNotFound() *RunsV1GetRunEventsNotFound {
	return &RunsV1GetRunEventsNotFound{}
}

/*RunsV1GetRunEventsNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1GetRunEventsNotFound struct {
	Payload interface{}
}

func (o *RunsV1GetRunEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}][%d] runsV1GetRunEventsNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1GetRunEventsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunEventsDefault creates a RunsV1GetRunEventsDefault with default headers values
func NewRunsV1GetRunEventsDefault(code int) *RunsV1GetRunEventsDefault {
	return &RunsV1GetRunEventsDefault{
		_statusCode: code,
	}
}

/*RunsV1GetRunEventsDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1GetRunEventsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 get run events default response
func (o *RunsV1GetRunEventsDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1GetRunEventsDefault) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}][%d] RunsV1_GetRunEvents default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1GetRunEventsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1GetRunEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
