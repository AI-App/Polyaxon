// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1PatchRunReader is a Reader for the RunsV1PatchRun structure.
type RunsV1PatchRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1PatchRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1PatchRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1PatchRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1PatchRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1PatchRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1PatchRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1PatchRunOK creates a RunsV1PatchRunOK with default headers values
func NewRunsV1PatchRunOK() *RunsV1PatchRunOK {
	return &RunsV1PatchRunOK{}
}

/*RunsV1PatchRunOK handles this case with default header values.

A successful response.
*/
type RunsV1PatchRunOK struct {
	Payload *service_model.V1Run
}

func (o *RunsV1PatchRunOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] runsV1PatchRunOK  %+v", 200, o.Payload)
}

func (o *RunsV1PatchRunOK) GetPayload() *service_model.V1Run {
	return o.Payload
}

func (o *RunsV1PatchRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Run)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1PatchRunNoContent creates a RunsV1PatchRunNoContent with default headers values
func NewRunsV1PatchRunNoContent() *RunsV1PatchRunNoContent {
	return &RunsV1PatchRunNoContent{}
}

/*RunsV1PatchRunNoContent handles this case with default header values.

No content.
*/
type RunsV1PatchRunNoContent struct {
	Payload interface{}
}

func (o *RunsV1PatchRunNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] runsV1PatchRunNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1PatchRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1PatchRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1PatchRunForbidden creates a RunsV1PatchRunForbidden with default headers values
func NewRunsV1PatchRunForbidden() *RunsV1PatchRunForbidden {
	return &RunsV1PatchRunForbidden{}
}

/*RunsV1PatchRunForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1PatchRunForbidden struct {
	Payload interface{}
}

func (o *RunsV1PatchRunForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] runsV1PatchRunForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1PatchRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1PatchRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1PatchRunNotFound creates a RunsV1PatchRunNotFound with default headers values
func NewRunsV1PatchRunNotFound() *RunsV1PatchRunNotFound {
	return &RunsV1PatchRunNotFound{}
}

/*RunsV1PatchRunNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1PatchRunNotFound struct {
	Payload interface{}
}

func (o *RunsV1PatchRunNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] runsV1PatchRunNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1PatchRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1PatchRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1PatchRunDefault creates a RunsV1PatchRunDefault with default headers values
func NewRunsV1PatchRunDefault(code int) *RunsV1PatchRunDefault {
	return &RunsV1PatchRunDefault{
		_statusCode: code,
	}
}

/*RunsV1PatchRunDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1PatchRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 patch run default response
func (o *RunsV1PatchRunDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1PatchRunDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run.uuid}][%d] RunsV1_PatchRun default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1PatchRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1PatchRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
