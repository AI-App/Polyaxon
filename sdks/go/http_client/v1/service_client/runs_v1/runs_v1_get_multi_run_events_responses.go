// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1GetMultiRunEventsReader is a Reader for the RunsV1GetMultiRunEvents structure.
type RunsV1GetMultiRunEventsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1GetMultiRunEventsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1GetMultiRunEventsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1GetMultiRunEventsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1GetMultiRunEventsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1GetMultiRunEventsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1GetMultiRunEventsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1GetMultiRunEventsOK creates a RunsV1GetMultiRunEventsOK with default headers values
func NewRunsV1GetMultiRunEventsOK() *RunsV1GetMultiRunEventsOK {
	return &RunsV1GetMultiRunEventsOK{}
}

/*RunsV1GetMultiRunEventsOK handles this case with default header values.

A successful response.
*/
type RunsV1GetMultiRunEventsOK struct {
	Payload *service_model.V1EventsResponse
}

func (o *RunsV1GetMultiRunEventsOK) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}][%d] runsV1GetMultiRunEventsOK  %+v", 200, o.Payload)
}

func (o *RunsV1GetMultiRunEventsOK) GetPayload() *service_model.V1EventsResponse {
	return o.Payload
}

func (o *RunsV1GetMultiRunEventsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1EventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetMultiRunEventsNoContent creates a RunsV1GetMultiRunEventsNoContent with default headers values
func NewRunsV1GetMultiRunEventsNoContent() *RunsV1GetMultiRunEventsNoContent {
	return &RunsV1GetMultiRunEventsNoContent{}
}

/*RunsV1GetMultiRunEventsNoContent handles this case with default header values.

No content.
*/
type RunsV1GetMultiRunEventsNoContent struct {
	Payload interface{}
}

func (o *RunsV1GetMultiRunEventsNoContent) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}][%d] runsV1GetMultiRunEventsNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1GetMultiRunEventsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetMultiRunEventsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetMultiRunEventsForbidden creates a RunsV1GetMultiRunEventsForbidden with default headers values
func NewRunsV1GetMultiRunEventsForbidden() *RunsV1GetMultiRunEventsForbidden {
	return &RunsV1GetMultiRunEventsForbidden{}
}

/*RunsV1GetMultiRunEventsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1GetMultiRunEventsForbidden struct {
	Payload interface{}
}

func (o *RunsV1GetMultiRunEventsForbidden) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}][%d] runsV1GetMultiRunEventsForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1GetMultiRunEventsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetMultiRunEventsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetMultiRunEventsNotFound creates a RunsV1GetMultiRunEventsNotFound with default headers values
func NewRunsV1GetMultiRunEventsNotFound() *RunsV1GetMultiRunEventsNotFound {
	return &RunsV1GetMultiRunEventsNotFound{}
}

/*RunsV1GetMultiRunEventsNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1GetMultiRunEventsNotFound struct {
	Payload interface{}
}

func (o *RunsV1GetMultiRunEventsNotFound) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}][%d] runsV1GetMultiRunEventsNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1GetMultiRunEventsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetMultiRunEventsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetMultiRunEventsDefault creates a RunsV1GetMultiRunEventsDefault with default headers values
func NewRunsV1GetMultiRunEventsDefault(code int) *RunsV1GetMultiRunEventsDefault {
	return &RunsV1GetMultiRunEventsDefault{
		_statusCode: code,
	}
}

/*RunsV1GetMultiRunEventsDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1GetMultiRunEventsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 get multi run events default response
func (o *RunsV1GetMultiRunEventsDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1GetMultiRunEventsDefault) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}][%d] RunsV1_GetMultiRunEvents default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1GetMultiRunEventsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1GetMultiRunEventsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
