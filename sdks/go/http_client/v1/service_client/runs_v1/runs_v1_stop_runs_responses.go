// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1StopRunsReader is a Reader for the RunsV1StopRuns structure.
type RunsV1StopRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1StopRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1StopRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1StopRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1StopRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1StopRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1StopRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1StopRunsOK creates a RunsV1StopRunsOK with default headers values
func NewRunsV1StopRunsOK() *RunsV1StopRunsOK {
	return &RunsV1StopRunsOK{}
}

/*RunsV1StopRunsOK handles this case with default header values.

A successful response.
*/
type RunsV1StopRunsOK struct {
}

func (o *RunsV1StopRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] runsV1StopRunsOK ", 200)
}

func (o *RunsV1StopRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunsV1StopRunsNoContent creates a RunsV1StopRunsNoContent with default headers values
func NewRunsV1StopRunsNoContent() *RunsV1StopRunsNoContent {
	return &RunsV1StopRunsNoContent{}
}

/*RunsV1StopRunsNoContent handles this case with default header values.

No content.
*/
type RunsV1StopRunsNoContent struct {
	Payload interface{}
}

func (o *RunsV1StopRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] runsV1StopRunsNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1StopRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1StopRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1StopRunsForbidden creates a RunsV1StopRunsForbidden with default headers values
func NewRunsV1StopRunsForbidden() *RunsV1StopRunsForbidden {
	return &RunsV1StopRunsForbidden{}
}

/*RunsV1StopRunsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1StopRunsForbidden struct {
	Payload interface{}
}

func (o *RunsV1StopRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] runsV1StopRunsForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1StopRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1StopRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1StopRunsNotFound creates a RunsV1StopRunsNotFound with default headers values
func NewRunsV1StopRunsNotFound() *RunsV1StopRunsNotFound {
	return &RunsV1StopRunsNotFound{}
}

/*RunsV1StopRunsNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1StopRunsNotFound struct {
	Payload interface{}
}

func (o *RunsV1StopRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] runsV1StopRunsNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1StopRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1StopRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1StopRunsDefault creates a RunsV1StopRunsDefault with default headers values
func NewRunsV1StopRunsDefault(code int) *RunsV1StopRunsDefault {
	return &RunsV1StopRunsDefault{
		_statusCode: code,
	}
}

/*RunsV1StopRunsDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1StopRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 stop runs default response
func (o *RunsV1StopRunsDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1StopRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/stop][%d] RunsV1_StopRuns default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1StopRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1StopRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
