// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ListRunDashboardNamesReader is a Reader for the ListRunDashboardNames structure.
type ListRunDashboardNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRunDashboardNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListRunDashboardNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewListRunDashboardNamesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListRunDashboardNamesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListRunDashboardNamesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListRunDashboardNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListRunDashboardNamesOK creates a ListRunDashboardNamesOK with default headers values
func NewListRunDashboardNamesOK() *ListRunDashboardNamesOK {
	return &ListRunDashboardNamesOK{}
}

/*ListRunDashboardNamesOK handles this case with default header values.

A successful response.
*/
type ListRunDashboardNamesOK struct {
	Payload *service_model.V1ListDashboardsResponse
}

func (o *ListRunDashboardNamesOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/names][%d] listRunDashboardNamesOK  %+v", 200, o.Payload)
}

func (o *ListRunDashboardNamesOK) GetPayload() *service_model.V1ListDashboardsResponse {
	return o.Payload
}

func (o *ListRunDashboardNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ListDashboardsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunDashboardNamesNoContent creates a ListRunDashboardNamesNoContent with default headers values
func NewListRunDashboardNamesNoContent() *ListRunDashboardNamesNoContent {
	return &ListRunDashboardNamesNoContent{}
}

/*ListRunDashboardNamesNoContent handles this case with default header values.

No content.
*/
type ListRunDashboardNamesNoContent struct {
	Payload interface{}
}

func (o *ListRunDashboardNamesNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/names][%d] listRunDashboardNamesNoContent  %+v", 204, o.Payload)
}

func (o *ListRunDashboardNamesNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ListRunDashboardNamesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunDashboardNamesForbidden creates a ListRunDashboardNamesForbidden with default headers values
func NewListRunDashboardNamesForbidden() *ListRunDashboardNamesForbidden {
	return &ListRunDashboardNamesForbidden{}
}

/*ListRunDashboardNamesForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ListRunDashboardNamesForbidden struct {
	Payload interface{}
}

func (o *ListRunDashboardNamesForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/names][%d] listRunDashboardNamesForbidden  %+v", 403, o.Payload)
}

func (o *ListRunDashboardNamesForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ListRunDashboardNamesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunDashboardNamesNotFound creates a ListRunDashboardNamesNotFound with default headers values
func NewListRunDashboardNamesNotFound() *ListRunDashboardNamesNotFound {
	return &ListRunDashboardNamesNotFound{}
}

/*ListRunDashboardNamesNotFound handles this case with default header values.

Resource does not exist.
*/
type ListRunDashboardNamesNotFound struct {
	Payload interface{}
}

func (o *ListRunDashboardNamesNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/names][%d] listRunDashboardNamesNotFound  %+v", 404, o.Payload)
}

func (o *ListRunDashboardNamesNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ListRunDashboardNamesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRunDashboardNamesDefault creates a ListRunDashboardNamesDefault with default headers values
func NewListRunDashboardNamesDefault(code int) *ListRunDashboardNamesDefault {
	return &ListRunDashboardNamesDefault{
		_statusCode: code,
	}
}

/*ListRunDashboardNamesDefault handles this case with default header values.

An unexpected error response
*/
type ListRunDashboardNamesDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the list run dashboard names default response
func (o *ListRunDashboardNamesDefault) Code() int {
	return o._statusCode
}

func (o *ListRunDashboardNamesDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/names][%d] ListRunDashboardNames default  %+v", o._statusCode, o.Payload)
}

func (o *ListRunDashboardNamesDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ListRunDashboardNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
