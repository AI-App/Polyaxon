// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1DeleteRunReader is a Reader for the RunsV1DeleteRun structure.
type RunsV1DeleteRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1DeleteRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1DeleteRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1DeleteRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1DeleteRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1DeleteRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1DeleteRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1DeleteRunOK creates a RunsV1DeleteRunOK with default headers values
func NewRunsV1DeleteRunOK() *RunsV1DeleteRunOK {
	return &RunsV1DeleteRunOK{}
}

/*RunsV1DeleteRunOK handles this case with default header values.

A successful response.
*/
type RunsV1DeleteRunOK struct {
}

func (o *RunsV1DeleteRunOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1DeleteRunOK ", 200)
}

func (o *RunsV1DeleteRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunsV1DeleteRunNoContent creates a RunsV1DeleteRunNoContent with default headers values
func NewRunsV1DeleteRunNoContent() *RunsV1DeleteRunNoContent {
	return &RunsV1DeleteRunNoContent{}
}

/*RunsV1DeleteRunNoContent handles this case with default header values.

No content.
*/
type RunsV1DeleteRunNoContent struct {
	Payload interface{}
}

func (o *RunsV1DeleteRunNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1DeleteRunNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1DeleteRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1DeleteRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1DeleteRunForbidden creates a RunsV1DeleteRunForbidden with default headers values
func NewRunsV1DeleteRunForbidden() *RunsV1DeleteRunForbidden {
	return &RunsV1DeleteRunForbidden{}
}

/*RunsV1DeleteRunForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1DeleteRunForbidden struct {
	Payload interface{}
}

func (o *RunsV1DeleteRunForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1DeleteRunForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1DeleteRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1DeleteRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1DeleteRunNotFound creates a RunsV1DeleteRunNotFound with default headers values
func NewRunsV1DeleteRunNotFound() *RunsV1DeleteRunNotFound {
	return &RunsV1DeleteRunNotFound{}
}

/*RunsV1DeleteRunNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1DeleteRunNotFound struct {
	Payload interface{}
}

func (o *RunsV1DeleteRunNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1DeleteRunNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1DeleteRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1DeleteRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1DeleteRunDefault creates a RunsV1DeleteRunDefault with default headers values
func NewRunsV1DeleteRunDefault(code int) *RunsV1DeleteRunDefault {
	return &RunsV1DeleteRunDefault{
		_statusCode: code,
	}
}

/*RunsV1DeleteRunDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1DeleteRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 delete run default response
func (o *RunsV1DeleteRunDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1DeleteRunDefault) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/{owner}/{project}/runs/{uuid}][%d] RunsV1_DeleteRun default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1DeleteRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1DeleteRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
