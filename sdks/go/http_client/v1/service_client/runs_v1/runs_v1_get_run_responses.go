// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1GetRunReader is a Reader for the RunsV1GetRun structure.
type RunsV1GetRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1GetRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1GetRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1GetRunNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1GetRunForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1GetRunNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1GetRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1GetRunOK creates a RunsV1GetRunOK with default headers values
func NewRunsV1GetRunOK() *RunsV1GetRunOK {
	return &RunsV1GetRunOK{}
}

/*RunsV1GetRunOK handles this case with default header values.

A successful response.
*/
type RunsV1GetRunOK struct {
	Payload *service_model.V1Run
}

func (o *RunsV1GetRunOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1GetRunOK  %+v", 200, o.Payload)
}

func (o *RunsV1GetRunOK) GetPayload() *service_model.V1Run {
	return o.Payload
}

func (o *RunsV1GetRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Run)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunNoContent creates a RunsV1GetRunNoContent with default headers values
func NewRunsV1GetRunNoContent() *RunsV1GetRunNoContent {
	return &RunsV1GetRunNoContent{}
}

/*RunsV1GetRunNoContent handles this case with default header values.

No content.
*/
type RunsV1GetRunNoContent struct {
	Payload interface{}
}

func (o *RunsV1GetRunNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1GetRunNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1GetRunNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunForbidden creates a RunsV1GetRunForbidden with default headers values
func NewRunsV1GetRunForbidden() *RunsV1GetRunForbidden {
	return &RunsV1GetRunForbidden{}
}

/*RunsV1GetRunForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1GetRunForbidden struct {
	Payload interface{}
}

func (o *RunsV1GetRunForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1GetRunForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1GetRunForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunNotFound creates a RunsV1GetRunNotFound with default headers values
func NewRunsV1GetRunNotFound() *RunsV1GetRunNotFound {
	return &RunsV1GetRunNotFound{}
}

/*RunsV1GetRunNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1GetRunNotFound struct {
	Payload interface{}
}

func (o *RunsV1GetRunNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{uuid}][%d] runsV1GetRunNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1GetRunNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunDefault creates a RunsV1GetRunDefault with default headers values
func NewRunsV1GetRunDefault(code int) *RunsV1GetRunDefault {
	return &RunsV1GetRunDefault{
		_statusCode: code,
	}
}

/*RunsV1GetRunDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1GetRunDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 get run default response
func (o *RunsV1GetRunDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1GetRunDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{uuid}][%d] RunsV1_GetRun default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1GetRunDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1GetRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
