// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// PatchRunDashboardReader is a Reader for the PatchRunDashboard structure.
type PatchRunDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchRunDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchRunDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewPatchRunDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewPatchRunDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchRunDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPatchRunDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPatchRunDashboardOK creates a PatchRunDashboardOK with default headers values
func NewPatchRunDashboardOK() *PatchRunDashboardOK {
	return &PatchRunDashboardOK{}
}

/*PatchRunDashboardOK handles this case with default header values.

A successful response.
*/
type PatchRunDashboardOK struct {
	Payload *service_model.V1Dashboard
}

func (o *PatchRunDashboardOK) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run}/dashboards/{dashboard.uuid}][%d] patchRunDashboardOK  %+v", 200, o.Payload)
}

func (o *PatchRunDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *PatchRunDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunDashboardNoContent creates a PatchRunDashboardNoContent with default headers values
func NewPatchRunDashboardNoContent() *PatchRunDashboardNoContent {
	return &PatchRunDashboardNoContent{}
}

/*PatchRunDashboardNoContent handles this case with default header values.

No content.
*/
type PatchRunDashboardNoContent struct {
	Payload interface{}
}

func (o *PatchRunDashboardNoContent) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run}/dashboards/{dashboard.uuid}][%d] patchRunDashboardNoContent  %+v", 204, o.Payload)
}

func (o *PatchRunDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunDashboardForbidden creates a PatchRunDashboardForbidden with default headers values
func NewPatchRunDashboardForbidden() *PatchRunDashboardForbidden {
	return &PatchRunDashboardForbidden{}
}

/*PatchRunDashboardForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type PatchRunDashboardForbidden struct {
	Payload interface{}
}

func (o *PatchRunDashboardForbidden) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run}/dashboards/{dashboard.uuid}][%d] patchRunDashboardForbidden  %+v", 403, o.Payload)
}

func (o *PatchRunDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunDashboardNotFound creates a PatchRunDashboardNotFound with default headers values
func NewPatchRunDashboardNotFound() *PatchRunDashboardNotFound {
	return &PatchRunDashboardNotFound{}
}

/*PatchRunDashboardNotFound handles this case with default header values.

Resource does not exist.
*/
type PatchRunDashboardNotFound struct {
	Payload interface{}
}

func (o *PatchRunDashboardNotFound) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run}/dashboards/{dashboard.uuid}][%d] patchRunDashboardNotFound  %+v", 404, o.Payload)
}

func (o *PatchRunDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *PatchRunDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchRunDashboardDefault creates a PatchRunDashboardDefault with default headers values
func NewPatchRunDashboardDefault(code int) *PatchRunDashboardDefault {
	return &PatchRunDashboardDefault{
		_statusCode: code,
	}
}

/*PatchRunDashboardDefault handles this case with default header values.

An unexpected error response
*/
type PatchRunDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the patch run dashboard default response
func (o *PatchRunDashboardDefault) Code() int {
	return o._statusCode
}

func (o *PatchRunDashboardDefault) Error() string {
	return fmt.Sprintf("[PATCH /api/v1/{owner}/{project}/runs/{run}/dashboards/{dashboard.uuid}][%d] PatchRunDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *PatchRunDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *PatchRunDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
