// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1TagRunsReader is a Reader for the RunsV1TagRuns structure.
type RunsV1TagRunsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1TagRunsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1TagRunsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1TagRunsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1TagRunsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1TagRunsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1TagRunsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1TagRunsOK creates a RunsV1TagRunsOK with default headers values
func NewRunsV1TagRunsOK() *RunsV1TagRunsOK {
	return &RunsV1TagRunsOK{}
}

/*RunsV1TagRunsOK handles this case with default header values.

A successful response.
*/
type RunsV1TagRunsOK struct {
}

func (o *RunsV1TagRunsOK) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/tag][%d] runsV1TagRunsOK ", 200)
}

func (o *RunsV1TagRunsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRunsV1TagRunsNoContent creates a RunsV1TagRunsNoContent with default headers values
func NewRunsV1TagRunsNoContent() *RunsV1TagRunsNoContent {
	return &RunsV1TagRunsNoContent{}
}

/*RunsV1TagRunsNoContent handles this case with default header values.

No content.
*/
type RunsV1TagRunsNoContent struct {
	Payload interface{}
}

func (o *RunsV1TagRunsNoContent) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/tag][%d] runsV1TagRunsNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1TagRunsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1TagRunsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1TagRunsForbidden creates a RunsV1TagRunsForbidden with default headers values
func NewRunsV1TagRunsForbidden() *RunsV1TagRunsForbidden {
	return &RunsV1TagRunsForbidden{}
}

/*RunsV1TagRunsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1TagRunsForbidden struct {
	Payload interface{}
}

func (o *RunsV1TagRunsForbidden) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/tag][%d] runsV1TagRunsForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1TagRunsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1TagRunsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1TagRunsNotFound creates a RunsV1TagRunsNotFound with default headers values
func NewRunsV1TagRunsNotFound() *RunsV1TagRunsNotFound {
	return &RunsV1TagRunsNotFound{}
}

/*RunsV1TagRunsNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1TagRunsNotFound struct {
	Payload interface{}
}

func (o *RunsV1TagRunsNotFound) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/tag][%d] runsV1TagRunsNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1TagRunsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1TagRunsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1TagRunsDefault creates a RunsV1TagRunsDefault with default headers values
func NewRunsV1TagRunsDefault(code int) *RunsV1TagRunsDefault {
	return &RunsV1TagRunsDefault{
		_statusCode: code,
	}
}

/*RunsV1TagRunsDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1TagRunsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 tag runs default response
func (o *RunsV1TagRunsDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1TagRunsDefault) Error() string {
	return fmt.Sprintf("[POST /api/v1/{owner}/{project}/runs/tag][%d] RunsV1_TagRuns default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1TagRunsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1TagRunsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
