// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new runs v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for runs v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRunArtifact(params *GetRunArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunArtifactOK, *GetRunArtifactNoContent, error)

	GetRunArtifacts(params *GetRunArtifactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunArtifactsOK, *GetRunArtifactsNoContent, error)

	RunsV1ArchiveRun(params *RunsV1ArchiveRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ArchiveRunOK, *RunsV1ArchiveRunNoContent, error)

	RunsV1BookmarkRun(params *RunsV1BookmarkRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1BookmarkRunOK, *RunsV1BookmarkRunNoContent, error)

	RunsV1BookmarkRuns(params *RunsV1BookmarkRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1BookmarkRunsOK, *RunsV1BookmarkRunsNoContent, error)

	RunsV1CollectRunLogs(params *RunsV1CollectRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CollectRunLogsOK, *RunsV1CollectRunLogsNoContent, error)

	RunsV1CopyRun(params *RunsV1CopyRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CopyRunOK, *RunsV1CopyRunNoContent, error)

	RunsV1CreateRun(params *RunsV1CreateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunOK, *RunsV1CreateRunNoContent, error)

	RunsV1CreateRunArtifactsLineage(params *RunsV1CreateRunArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunArtifactsLineageOK, *RunsV1CreateRunArtifactsLineageNoContent, error)

	RunsV1CreateRunStatus(params *RunsV1CreateRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunStatusOK, *RunsV1CreateRunStatusNoContent, error)

	RunsV1DeleteRun(params *RunsV1DeleteRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunOK, *RunsV1DeleteRunNoContent, error)

	RunsV1DeleteRunArtifactLineage(params *RunsV1DeleteRunArtifactLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunArtifactLineageOK, *RunsV1DeleteRunArtifactLineageNoContent, error)

	RunsV1DeleteRuns(params *RunsV1DeleteRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunsOK, *RunsV1DeleteRunsNoContent, error)

	RunsV1GetMultiRunEvents(params *RunsV1GetMultiRunEventsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetMultiRunEventsOK, *RunsV1GetMultiRunEventsNoContent, error)

	RunsV1GetRun(params *RunsV1GetRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunOK, *RunsV1GetRunNoContent, error)

	RunsV1GetRunArtifactLineage(params *RunsV1GetRunArtifactLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactLineageOK, *RunsV1GetRunArtifactLineageNoContent, error)

	RunsV1GetRunArtifactsLineage(params *RunsV1GetRunArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsLineageOK, *RunsV1GetRunArtifactsLineageNoContent, error)

	RunsV1GetRunArtifactsLineageNames(params *RunsV1GetRunArtifactsLineageNamesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsLineageNamesOK, *RunsV1GetRunArtifactsLineageNamesNoContent, error)

	RunsV1GetRunArtifactsTree(params *RunsV1GetRunArtifactsTreeParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsTreeOK, *RunsV1GetRunArtifactsTreeNoContent, error)

	RunsV1GetRunEvents(params *RunsV1GetRunEventsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunEventsOK, *RunsV1GetRunEventsNoContent, error)

	RunsV1GetRunLogs(params *RunsV1GetRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunLogsOK, *RunsV1GetRunLogsNoContent, error)

	RunsV1GetRunNamespace(params *RunsV1GetRunNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunNamespaceOK, *RunsV1GetRunNamespaceNoContent, error)

	RunsV1GetRunResources(params *RunsV1GetRunResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunResourcesOK, *RunsV1GetRunResourcesNoContent, error)

	RunsV1GetRunSettings(params *RunsV1GetRunSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunSettingsOK, *RunsV1GetRunSettingsNoContent, error)

	RunsV1GetRunStatuses(params *RunsV1GetRunStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunStatusesOK, *RunsV1GetRunStatusesNoContent, error)

	RunsV1GetRunsArtifactsLineage(params *RunsV1GetRunsArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunsArtifactsLineageOK, *RunsV1GetRunsArtifactsLineageNoContent, error)

	RunsV1ImpersonateToken(params *RunsV1ImpersonateTokenParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ImpersonateTokenOK, *RunsV1ImpersonateTokenNoContent, error)

	RunsV1InvalidateRun(params *RunsV1InvalidateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1InvalidateRunOK, *RunsV1InvalidateRunNoContent, error)

	RunsV1InvalidateRuns(params *RunsV1InvalidateRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1InvalidateRunsOK, *RunsV1InvalidateRunsNoContent, error)

	RunsV1ListArchivedRuns(params *RunsV1ListArchivedRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListArchivedRunsOK, *RunsV1ListArchivedRunsNoContent, error)

	RunsV1ListBookmarkedRuns(params *RunsV1ListBookmarkedRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListBookmarkedRunsOK, *RunsV1ListBookmarkedRunsNoContent, error)

	RunsV1ListRuns(params *RunsV1ListRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListRunsOK, *RunsV1ListRunsNoContent, error)

	RunsV1ListRunsIo(params *RunsV1ListRunsIoParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListRunsIoOK, *RunsV1ListRunsIoNoContent, error)

	RunsV1NotifyRunStatus(params *RunsV1NotifyRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1NotifyRunStatusOK, *RunsV1NotifyRunStatusNoContent, error)

	RunsV1PatchRun(params *RunsV1PatchRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1PatchRunOK, *RunsV1PatchRunNoContent, error)

	RunsV1RestartRun(params *RunsV1RestartRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1RestartRunOK, *RunsV1RestartRunNoContent, error)

	RunsV1RestoreRun(params *RunsV1RestoreRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1RestoreRunOK, *RunsV1RestoreRunNoContent, error)

	RunsV1ResumeRun(params *RunsV1ResumeRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ResumeRunOK, *RunsV1ResumeRunNoContent, error)

	RunsV1StartRunTensorboard(params *RunsV1StartRunTensorboardParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StartRunTensorboardOK, *RunsV1StartRunTensorboardNoContent, error)

	RunsV1StopRun(params *RunsV1StopRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunOK, *RunsV1StopRunNoContent, error)

	RunsV1StopRunTensorboard(params *RunsV1StopRunTensorboardParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunTensorboardOK, *RunsV1StopRunTensorboardNoContent, error)

	RunsV1StopRuns(params *RunsV1StopRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunsOK, *RunsV1StopRunsNoContent, error)

	RunsV1TagRuns(params *RunsV1TagRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1TagRunsOK, *RunsV1TagRunsNoContent, error)

	RunsV1UnbookmarkRun(params *RunsV1UnbookmarkRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1UnbookmarkRunOK, *RunsV1UnbookmarkRunNoContent, error)

	RunsV1UpdateRun(params *RunsV1UpdateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1UpdateRunOK, *RunsV1UpdateRunNoContent, error)

	UploadRunArtifact(params *UploadRunArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRunArtifactOK, *UploadRunArtifactNoContent, error)

	UploadRunLogs(params *UploadRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRunLogsOK, *UploadRunLogsNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetRunArtifact gets run artifact
*/
func (a *Client) GetRunArtifact(params *GetRunArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunArtifactOK, *GetRunArtifactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRunArtifact",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifact",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRunArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRunArtifactOK:
		return value, nil, nil
	case *GetRunArtifactNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runs_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRunArtifacts gets run artifacts
*/
func (a *Client) GetRunArtifacts(params *GetRunArtifactsParams, authInfo runtime.ClientAuthInfoWriter) (*GetRunArtifactsOK, *GetRunArtifactsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunArtifactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRunArtifacts",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRunArtifactsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRunArtifactsOK:
		return value, nil, nil
	case *GetRunArtifactsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runs_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RunsV1ArchiveRun archives run
*/
func (a *Client) RunsV1ArchiveRun(params *RunsV1ArchiveRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ArchiveRunOK, *RunsV1ArchiveRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ArchiveRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ArchiveRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ArchiveRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ArchiveRunOK:
		return value, nil, nil
	case *RunsV1ArchiveRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ArchiveRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1BookmarkRun bookmarks run
*/
func (a *Client) RunsV1BookmarkRun(params *RunsV1BookmarkRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1BookmarkRunOK, *RunsV1BookmarkRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1BookmarkRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_BookmarkRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1BookmarkRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1BookmarkRunOK:
		return value, nil, nil
	case *RunsV1BookmarkRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1BookmarkRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1BookmarkRuns bookmarks runs
*/
func (a *Client) RunsV1BookmarkRuns(params *RunsV1BookmarkRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1BookmarkRunsOK, *RunsV1BookmarkRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1BookmarkRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_BookmarkRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/bookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1BookmarkRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1BookmarkRunsOK:
		return value, nil, nil
	case *RunsV1BookmarkRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1BookmarkRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1CollectRunLogs collects run logs
*/
func (a *Client) RunsV1CollectRunLogs(params *RunsV1CollectRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CollectRunLogsOK, *RunsV1CollectRunLogsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1CollectRunLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_CollectRunLogs",
		Method:             "POST",
		PathPattern:        "/streams/v1/{namespace}/_internal/{owner}/{project}/runs/{uuid}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1CollectRunLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1CollectRunLogsOK:
		return value, nil, nil
	case *RunsV1CollectRunLogsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1CollectRunLogsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1CopyRun restarts run with copy
*/
func (a *Client) RunsV1CopyRun(params *RunsV1CopyRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CopyRunOK, *RunsV1CopyRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1CopyRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_CopyRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1CopyRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1CopyRunOK:
		return value, nil, nil
	case *RunsV1CopyRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1CopyRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1CreateRun creates new run
*/
func (a *Client) RunsV1CreateRun(params *RunsV1CreateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunOK, *RunsV1CreateRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1CreateRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_CreateRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1CreateRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1CreateRunOK:
		return value, nil, nil
	case *RunsV1CreateRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1CreateRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1CreateRunArtifactsLineage creates bulk run run artifacts lineage
*/
func (a *Client) RunsV1CreateRunArtifactsLineage(params *RunsV1CreateRunArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunArtifactsLineageOK, *RunsV1CreateRunArtifactsLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1CreateRunArtifactsLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_CreateRunArtifactsLineage",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1CreateRunArtifactsLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1CreateRunArtifactsLineageOK:
		return value, nil, nil
	case *RunsV1CreateRunArtifactsLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1CreateRunArtifactsLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1CreateRunStatus creates new run status
*/
func (a *Client) RunsV1CreateRunStatus(params *RunsV1CreateRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1CreateRunStatusOK, *RunsV1CreateRunStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1CreateRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_CreateRunStatus",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1CreateRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1CreateRunStatusOK:
		return value, nil, nil
	case *RunsV1CreateRunStatusNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1CreateRunStatusDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1DeleteRun deletes run
*/
func (a *Client) RunsV1DeleteRun(params *RunsV1DeleteRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunOK, *RunsV1DeleteRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1DeleteRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_DeleteRun",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1DeleteRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1DeleteRunOK:
		return value, nil, nil
	case *RunsV1DeleteRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1DeleteRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1DeleteRunArtifactLineage deletes run artifact lineage
*/
func (a *Client) RunsV1DeleteRunArtifactLineage(params *RunsV1DeleteRunArtifactLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunArtifactLineageOK, *RunsV1DeleteRunArtifactLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1DeleteRunArtifactLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_DeleteRunArtifactLineage",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1DeleteRunArtifactLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1DeleteRunArtifactLineageOK:
		return value, nil, nil
	case *RunsV1DeleteRunArtifactLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1DeleteRunArtifactLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1DeleteRuns deletes runs
*/
func (a *Client) RunsV1DeleteRuns(params *RunsV1DeleteRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1DeleteRunsOK, *RunsV1DeleteRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1DeleteRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_DeleteRuns",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/runs/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1DeleteRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1DeleteRunsOK:
		return value, nil, nil
	case *RunsV1DeleteRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1DeleteRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetMultiRunEvents gets multi runs events
*/
func (a *Client) RunsV1GetMultiRunEvents(params *RunsV1GetMultiRunEventsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetMultiRunEventsOK, *RunsV1GetMultiRunEventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetMultiRunEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetMultiRunEvents",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/multi/events/{kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetMultiRunEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetMultiRunEventsOK:
		return value, nil, nil
	case *RunsV1GetMultiRunEventsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetMultiRunEventsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRun gets run
*/
func (a *Client) RunsV1GetRun(params *RunsV1GetRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunOK, *RunsV1GetRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRun",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunOK:
		return value, nil, nil
	case *RunsV1GetRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunArtifactLineage gets run artifacts lineage
*/
func (a *Client) RunsV1GetRunArtifactLineage(params *RunsV1GetRunArtifactLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactLineageOK, *RunsV1GetRunArtifactLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunArtifactLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunArtifactLineage",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunArtifactLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunArtifactLineageOK:
		return value, nil, nil
	case *RunsV1GetRunArtifactLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunArtifactLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunArtifactsLineage gets run artifacts lineage
*/
func (a *Client) RunsV1GetRunArtifactsLineage(params *RunsV1GetRunArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsLineageOK, *RunsV1GetRunArtifactsLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunArtifactsLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunArtifactsLineage",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunArtifactsLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunArtifactsLineageOK:
		return value, nil, nil
	case *RunsV1GetRunArtifactsLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunArtifactsLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunArtifactsLineageNames gets run artifacts lineage names
*/
func (a *Client) RunsV1GetRunArtifactsLineageNames(params *RunsV1GetRunArtifactsLineageNamesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsLineageNamesOK, *RunsV1GetRunArtifactsLineageNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunArtifactsLineageNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunArtifactsLineageNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts_lineage/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunArtifactsLineageNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunArtifactsLineageNamesOK:
		return value, nil, nil
	case *RunsV1GetRunArtifactsLineageNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunArtifactsLineageNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunArtifactsTree gets run artifacts tree
*/
func (a *Client) RunsV1GetRunArtifactsTree(params *RunsV1GetRunArtifactsTreeParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunArtifactsTreeOK, *RunsV1GetRunArtifactsTreeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunArtifactsTreeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunArtifactsTree",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunArtifactsTreeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunArtifactsTreeOK:
		return value, nil, nil
	case *RunsV1GetRunArtifactsTreeNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunArtifactsTreeDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunEvents gets run events
*/
func (a *Client) RunsV1GetRunEvents(params *RunsV1GetRunEventsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunEventsOK, *RunsV1GetRunEventsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunEvents",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/events/{kind}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunEventsOK:
		return value, nil, nil
	case *RunsV1GetRunEventsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunEventsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunLogs gets run logs
*/
func (a *Client) RunsV1GetRunLogs(params *RunsV1GetRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunLogsOK, *RunsV1GetRunLogsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunLogs",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunLogsOK:
		return value, nil, nil
	case *RunsV1GetRunLogsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunLogsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunNamespace gets run namespace
*/
func (a *Client) RunsV1GetRunNamespace(params *RunsV1GetRunNamespaceParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunNamespaceOK, *RunsV1GetRunNamespaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunNamespaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunNamespace",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/namespace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunNamespaceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunNamespaceOK:
		return value, nil, nil
	case *RunsV1GetRunNamespaceNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunNamespaceDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunResources gets run resources events
*/
func (a *Client) RunsV1GetRunResources(params *RunsV1GetRunResourcesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunResourcesOK, *RunsV1GetRunResourcesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunResourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunResources",
		Method:             "GET",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunResourcesOK:
		return value, nil, nil
	case *RunsV1GetRunResourcesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunResourcesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunSettings gets run settings
*/
func (a *Client) RunsV1GetRunSettings(params *RunsV1GetRunSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunSettingsOK, *RunsV1GetRunSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunSettings",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunSettingsOK:
		return value, nil, nil
	case *RunsV1GetRunSettingsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunSettingsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunStatuses gets run status
*/
func (a *Client) RunsV1GetRunStatuses(params *RunsV1GetRunStatusesParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunStatusesOK, *RunsV1GetRunStatusesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunStatusesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunStatuses",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/statuses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunStatusesOK:
		return value, nil, nil
	case *RunsV1GetRunStatusesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunStatusesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1GetRunsArtifactsLineage gets runs artifacts lineage
*/
func (a *Client) RunsV1GetRunsArtifactsLineage(params *RunsV1GetRunsArtifactsLineageParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1GetRunsArtifactsLineageOK, *RunsV1GetRunsArtifactsLineageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1GetRunsArtifactsLineageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_GetRunsArtifactsLineage",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/artifacts_lineage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1GetRunsArtifactsLineageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1GetRunsArtifactsLineageOK:
		return value, nil, nil
	case *RunsV1GetRunsArtifactsLineageNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1GetRunsArtifactsLineageDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ImpersonateToken impersonates run token
*/
func (a *Client) RunsV1ImpersonateToken(params *RunsV1ImpersonateTokenParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ImpersonateTokenOK, *RunsV1ImpersonateTokenNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ImpersonateTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ImpersonateToken",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/impersonate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ImpersonateTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ImpersonateTokenOK:
		return value, nil, nil
	case *RunsV1ImpersonateTokenNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ImpersonateTokenDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1InvalidateRun invalidates run
*/
func (a *Client) RunsV1InvalidateRun(params *RunsV1InvalidateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1InvalidateRunOK, *RunsV1InvalidateRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1InvalidateRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_InvalidateRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/invalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1InvalidateRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1InvalidateRunOK:
		return value, nil, nil
	case *RunsV1InvalidateRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1InvalidateRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1InvalidateRuns invalidates runs
*/
func (a *Client) RunsV1InvalidateRuns(params *RunsV1InvalidateRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1InvalidateRunsOK, *RunsV1InvalidateRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1InvalidateRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_InvalidateRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/invalidate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1InvalidateRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1InvalidateRunsOK:
		return value, nil, nil
	case *RunsV1InvalidateRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1InvalidateRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ListArchivedRuns lists archived runs for user
*/
func (a *Client) RunsV1ListArchivedRuns(params *RunsV1ListArchivedRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListArchivedRunsOK, *RunsV1ListArchivedRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ListArchivedRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ListArchivedRuns",
		Method:             "GET",
		PathPattern:        "/api/v1/archives/{user}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ListArchivedRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ListArchivedRunsOK:
		return value, nil, nil
	case *RunsV1ListArchivedRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ListArchivedRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ListBookmarkedRuns lists bookmarked runs for user
*/
func (a *Client) RunsV1ListBookmarkedRuns(params *RunsV1ListBookmarkedRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListBookmarkedRunsOK, *RunsV1ListBookmarkedRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ListBookmarkedRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ListBookmarkedRuns",
		Method:             "GET",
		PathPattern:        "/api/v1/bookmarks/{user}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ListBookmarkedRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ListBookmarkedRunsOK:
		return value, nil, nil
	case *RunsV1ListBookmarkedRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ListBookmarkedRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ListRuns lists runs
*/
func (a *Client) RunsV1ListRuns(params *RunsV1ListRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListRunsOK, *RunsV1ListRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ListRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ListRuns",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ListRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ListRunsOK:
		return value, nil, nil
	case *RunsV1ListRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ListRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ListRunsIo lists runs io
*/
func (a *Client) RunsV1ListRunsIo(params *RunsV1ListRunsIoParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ListRunsIoOK, *RunsV1ListRunsIoNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ListRunsIoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ListRunsIo",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/runs/io",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ListRunsIoReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ListRunsIoOK:
		return value, nil, nil
	case *RunsV1ListRunsIoNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ListRunsIoDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1NotifyRunStatus notifies run status
*/
func (a *Client) RunsV1NotifyRunStatus(params *RunsV1NotifyRunStatusParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1NotifyRunStatusOK, *RunsV1NotifyRunStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1NotifyRunStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_NotifyRunStatus",
		Method:             "POST",
		PathPattern:        "/streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/notify",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1NotifyRunStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1NotifyRunStatusOK:
		return value, nil, nil
	case *RunsV1NotifyRunStatusNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1NotifyRunStatusDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1PatchRun patches run
*/
func (a *Client) RunsV1PatchRun(params *RunsV1PatchRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1PatchRunOK, *RunsV1PatchRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1PatchRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_PatchRun",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{run.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1PatchRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1PatchRunOK:
		return value, nil, nil
	case *RunsV1PatchRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1PatchRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1RestartRun restarts run
*/
func (a *Client) RunsV1RestartRun(params *RunsV1RestartRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1RestartRunOK, *RunsV1RestartRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1RestartRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_RestartRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1RestartRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1RestartRunOK:
		return value, nil, nil
	case *RunsV1RestartRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1RestartRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1RestoreRun restores run
*/
func (a *Client) RunsV1RestoreRun(params *RunsV1RestoreRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1RestoreRunOK, *RunsV1RestoreRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1RestoreRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_RestoreRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1RestoreRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1RestoreRunOK:
		return value, nil, nil
	case *RunsV1RestoreRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1RestoreRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1ResumeRun resumes run
*/
func (a *Client) RunsV1ResumeRun(params *RunsV1ResumeRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1ResumeRunOK, *RunsV1ResumeRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1ResumeRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_ResumeRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{entity.owner}/{entity.project}/runs/{entity.uuid}/resume",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1ResumeRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1ResumeRunOK:
		return value, nil, nil
	case *RunsV1ResumeRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1ResumeRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1StartRunTensorboard starts run tensorboard
*/
func (a *Client) RunsV1StartRunTensorboard(params *RunsV1StartRunTensorboardParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StartRunTensorboardOK, *RunsV1StartRunTensorboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1StartRunTensorboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_StartRunTensorboard",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1StartRunTensorboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1StartRunTensorboardOK:
		return value, nil, nil
	case *RunsV1StartRunTensorboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1StartRunTensorboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1StopRun stops run
*/
func (a *Client) RunsV1StopRun(params *RunsV1StopRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunOK, *RunsV1StopRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1StopRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_StopRun",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1StopRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1StopRunOK:
		return value, nil, nil
	case *RunsV1StopRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1StopRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1StopRunTensorboard stops run tensorboard
*/
func (a *Client) RunsV1StopRunTensorboard(params *RunsV1StopRunTensorboardParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunTensorboardOK, *RunsV1StopRunTensorboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1StopRunTensorboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_StopRunTensorboard",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/tensorboard/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1StopRunTensorboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1StopRunTensorboardOK:
		return value, nil, nil
	case *RunsV1StopRunTensorboardNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1StopRunTensorboardDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1StopRuns stops runs
*/
func (a *Client) RunsV1StopRuns(params *RunsV1StopRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1StopRunsOK, *RunsV1StopRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1StopRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_StopRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1StopRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1StopRunsOK:
		return value, nil, nil
	case *RunsV1StopRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1StopRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1TagRuns tags runs
*/
func (a *Client) RunsV1TagRuns(params *RunsV1TagRunsParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1TagRunsOK, *RunsV1TagRunsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1TagRunsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_TagRuns",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1TagRunsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1TagRunsOK:
		return value, nil, nil
	case *RunsV1TagRunsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1TagRunsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1UnbookmarkRun unbookmarks run
*/
func (a *Client) RunsV1UnbookmarkRun(params *RunsV1UnbookmarkRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1UnbookmarkRunOK, *RunsV1UnbookmarkRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1UnbookmarkRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_UnbookmarkRun",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/unbookmark",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1UnbookmarkRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1UnbookmarkRunOK:
		return value, nil, nil
	case *RunsV1UnbookmarkRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1UnbookmarkRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunsV1UpdateRun updates run
*/
func (a *Client) RunsV1UpdateRun(params *RunsV1UpdateRunParams, authInfo runtime.ClientAuthInfoWriter) (*RunsV1UpdateRunOK, *RunsV1UpdateRunNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunsV1UpdateRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunsV1_UpdateRun",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{run.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunsV1UpdateRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunsV1UpdateRunOK:
		return value, nil, nil
	case *RunsV1UpdateRunNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunsV1UpdateRunDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  UploadRunArtifact uploads an artifact file to a store via run access
*/
func (a *Client) UploadRunArtifact(params *UploadRunArtifactParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRunArtifactOK, *UploadRunArtifactNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadRunArtifactParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UploadRunArtifact",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/artifacts/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadRunArtifactReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadRunArtifactOK:
		return value, nil, nil
	case *UploadRunArtifactNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runs_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UploadRunLogs uploads a logs file to a store via run access
*/
func (a *Client) UploadRunLogs(params *UploadRunLogsParams, authInfo runtime.ClientAuthInfoWriter) (*UploadRunLogsOK, *UploadRunLogsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadRunLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UploadRunLogs",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/runs/{uuid}/logs/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadRunLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UploadRunLogsOK:
		return value, nil, nil
	case *UploadRunLogsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for runs_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
