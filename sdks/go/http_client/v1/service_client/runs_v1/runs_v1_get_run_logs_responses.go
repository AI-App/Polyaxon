// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1GetRunLogsReader is a Reader for the RunsV1GetRunLogs structure.
type RunsV1GetRunLogsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1GetRunLogsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1GetRunLogsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1GetRunLogsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1GetRunLogsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1GetRunLogsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1GetRunLogsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1GetRunLogsOK creates a RunsV1GetRunLogsOK with default headers values
func NewRunsV1GetRunLogsOK() *RunsV1GetRunLogsOK {
	return &RunsV1GetRunLogsOK{}
}

/*RunsV1GetRunLogsOK handles this case with default header values.

A successful response.
*/
type RunsV1GetRunLogsOK struct {
	Payload *service_model.V1Logs
}

func (o *RunsV1GetRunLogsOK) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs][%d] runsV1GetRunLogsOK  %+v", 200, o.Payload)
}

func (o *RunsV1GetRunLogsOK) GetPayload() *service_model.V1Logs {
	return o.Payload
}

func (o *RunsV1GetRunLogsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Logs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunLogsNoContent creates a RunsV1GetRunLogsNoContent with default headers values
func NewRunsV1GetRunLogsNoContent() *RunsV1GetRunLogsNoContent {
	return &RunsV1GetRunLogsNoContent{}
}

/*RunsV1GetRunLogsNoContent handles this case with default header values.

No content.
*/
type RunsV1GetRunLogsNoContent struct {
	Payload interface{}
}

func (o *RunsV1GetRunLogsNoContent) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs][%d] runsV1GetRunLogsNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1GetRunLogsNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunLogsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunLogsForbidden creates a RunsV1GetRunLogsForbidden with default headers values
func NewRunsV1GetRunLogsForbidden() *RunsV1GetRunLogsForbidden {
	return &RunsV1GetRunLogsForbidden{}
}

/*RunsV1GetRunLogsForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1GetRunLogsForbidden struct {
	Payload interface{}
}

func (o *RunsV1GetRunLogsForbidden) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs][%d] runsV1GetRunLogsForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1GetRunLogsForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunLogsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunLogsNotFound creates a RunsV1GetRunLogsNotFound with default headers values
func NewRunsV1GetRunLogsNotFound() *RunsV1GetRunLogsNotFound {
	return &RunsV1GetRunLogsNotFound{}
}

/*RunsV1GetRunLogsNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1GetRunLogsNotFound struct {
	Payload interface{}
}

func (o *RunsV1GetRunLogsNotFound) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs][%d] runsV1GetRunLogsNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1GetRunLogsNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunLogsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunLogsDefault creates a RunsV1GetRunLogsDefault with default headers values
func NewRunsV1GetRunLogsDefault(code int) *RunsV1GetRunLogsDefault {
	return &RunsV1GetRunLogsDefault{
		_statusCode: code,
	}
}

/*RunsV1GetRunLogsDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1GetRunLogsDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 get run logs default response
func (o *RunsV1GetRunLogsDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1GetRunLogsDefault) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/logs][%d] RunsV1_GetRunLogs default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1GetRunLogsDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1GetRunLogsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
