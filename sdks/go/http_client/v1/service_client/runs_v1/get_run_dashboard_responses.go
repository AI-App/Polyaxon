// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// GetRunDashboardReader is a Reader for the GetRunDashboard structure.
type GetRunDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewGetRunDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRunDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRunDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRunDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRunDashboardOK creates a GetRunDashboardOK with default headers values
func NewGetRunDashboardOK() *GetRunDashboardOK {
	return &GetRunDashboardOK{}
}

/*GetRunDashboardOK handles this case with default header values.

A successful response.
*/
type GetRunDashboardOK struct {
	Payload *service_model.V1Dashboard
}

func (o *GetRunDashboardOK) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/{uuid}][%d] getRunDashboardOK  %+v", 200, o.Payload)
}

func (o *GetRunDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *GetRunDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunDashboardNoContent creates a GetRunDashboardNoContent with default headers values
func NewGetRunDashboardNoContent() *GetRunDashboardNoContent {
	return &GetRunDashboardNoContent{}
}

/*GetRunDashboardNoContent handles this case with default header values.

No content.
*/
type GetRunDashboardNoContent struct {
	Payload interface{}
}

func (o *GetRunDashboardNoContent) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/{uuid}][%d] getRunDashboardNoContent  %+v", 204, o.Payload)
}

func (o *GetRunDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *GetRunDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunDashboardForbidden creates a GetRunDashboardForbidden with default headers values
func NewGetRunDashboardForbidden() *GetRunDashboardForbidden {
	return &GetRunDashboardForbidden{}
}

/*GetRunDashboardForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type GetRunDashboardForbidden struct {
	Payload interface{}
}

func (o *GetRunDashboardForbidden) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/{uuid}][%d] getRunDashboardForbidden  %+v", 403, o.Payload)
}

func (o *GetRunDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *GetRunDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunDashboardNotFound creates a GetRunDashboardNotFound with default headers values
func NewGetRunDashboardNotFound() *GetRunDashboardNotFound {
	return &GetRunDashboardNotFound{}
}

/*GetRunDashboardNotFound handles this case with default header values.

Resource does not exist.
*/
type GetRunDashboardNotFound struct {
	Payload interface{}
}

func (o *GetRunDashboardNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/{uuid}][%d] getRunDashboardNotFound  %+v", 404, o.Payload)
}

func (o *GetRunDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *GetRunDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunDashboardDefault creates a GetRunDashboardDefault with default headers values
func NewGetRunDashboardDefault(code int) *GetRunDashboardDefault {
	return &GetRunDashboardDefault{
		_statusCode: code,
	}
}

/*GetRunDashboardDefault handles this case with default header values.

An unexpected error response
*/
type GetRunDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the get run dashboard default response
func (o *GetRunDashboardDefault) Code() int {
	return o._statusCode
}

func (o *GetRunDashboardDefault) Error() string {
	return fmt.Sprintf("[GET /api/v1/{owner}/{project}/runs/{run}/dashboards/{uuid}][%d] GetRunDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *GetRunDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *GetRunDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
