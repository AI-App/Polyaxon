// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package runs_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunsV1GetRunArtifactsTreeReader is a Reader for the RunsV1GetRunArtifactsTree structure.
type RunsV1GetRunArtifactsTreeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunsV1GetRunArtifactsTreeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunsV1GetRunArtifactsTreeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunsV1GetRunArtifactsTreeNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunsV1GetRunArtifactsTreeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunsV1GetRunArtifactsTreeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunsV1GetRunArtifactsTreeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunsV1GetRunArtifactsTreeOK creates a RunsV1GetRunArtifactsTreeOK with default headers values
func NewRunsV1GetRunArtifactsTreeOK() *RunsV1GetRunArtifactsTreeOK {
	return &RunsV1GetRunArtifactsTreeOK{}
}

/*RunsV1GetRunArtifactsTreeOK handles this case with default header values.

A successful response.
*/
type RunsV1GetRunArtifactsTreeOK struct {
	Payload *service_model.V1ArtifactTree
}

func (o *RunsV1GetRunArtifactsTreeOK) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree][%d] runsV1GetRunArtifactsTreeOK  %+v", 200, o.Payload)
}

func (o *RunsV1GetRunArtifactsTreeOK) GetPayload() *service_model.V1ArtifactTree {
	return o.Payload
}

func (o *RunsV1GetRunArtifactsTreeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1ArtifactTree)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunArtifactsTreeNoContent creates a RunsV1GetRunArtifactsTreeNoContent with default headers values
func NewRunsV1GetRunArtifactsTreeNoContent() *RunsV1GetRunArtifactsTreeNoContent {
	return &RunsV1GetRunArtifactsTreeNoContent{}
}

/*RunsV1GetRunArtifactsTreeNoContent handles this case with default header values.

No content.
*/
type RunsV1GetRunArtifactsTreeNoContent struct {
	Payload interface{}
}

func (o *RunsV1GetRunArtifactsTreeNoContent) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree][%d] runsV1GetRunArtifactsTreeNoContent  %+v", 204, o.Payload)
}

func (o *RunsV1GetRunArtifactsTreeNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunArtifactsTreeNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunArtifactsTreeForbidden creates a RunsV1GetRunArtifactsTreeForbidden with default headers values
func NewRunsV1GetRunArtifactsTreeForbidden() *RunsV1GetRunArtifactsTreeForbidden {
	return &RunsV1GetRunArtifactsTreeForbidden{}
}

/*RunsV1GetRunArtifactsTreeForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunsV1GetRunArtifactsTreeForbidden struct {
	Payload interface{}
}

func (o *RunsV1GetRunArtifactsTreeForbidden) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree][%d] runsV1GetRunArtifactsTreeForbidden  %+v", 403, o.Payload)
}

func (o *RunsV1GetRunArtifactsTreeForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunArtifactsTreeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunArtifactsTreeNotFound creates a RunsV1GetRunArtifactsTreeNotFound with default headers values
func NewRunsV1GetRunArtifactsTreeNotFound() *RunsV1GetRunArtifactsTreeNotFound {
	return &RunsV1GetRunArtifactsTreeNotFound{}
}

/*RunsV1GetRunArtifactsTreeNotFound handles this case with default header values.

Resource does not exist.
*/
type RunsV1GetRunArtifactsTreeNotFound struct {
	Payload interface{}
}

func (o *RunsV1GetRunArtifactsTreeNotFound) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree][%d] runsV1GetRunArtifactsTreeNotFound  %+v", 404, o.Payload)
}

func (o *RunsV1GetRunArtifactsTreeNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunsV1GetRunArtifactsTreeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunsV1GetRunArtifactsTreeDefault creates a RunsV1GetRunArtifactsTreeDefault with default headers values
func NewRunsV1GetRunArtifactsTreeDefault(code int) *RunsV1GetRunArtifactsTreeDefault {
	return &RunsV1GetRunArtifactsTreeDefault{
		_statusCode: code,
	}
}

/*RunsV1GetRunArtifactsTreeDefault handles this case with default header values.

An unexpected error response
*/
type RunsV1GetRunArtifactsTreeDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the runs v1 get run artifacts tree default response
func (o *RunsV1GetRunArtifactsTreeDefault) Code() int {
	return o._statusCode
}

func (o *RunsV1GetRunArtifactsTreeDefault) Error() string {
	return fmt.Sprintf("[GET /streams/v1/{namespace}/{owner}/{project}/runs/{uuid}/artifacts/tree][%d] RunsV1_GetRunArtifactsTree default  %+v", o._statusCode, o.Payload)
}

func (o *RunsV1GetRunArtifactsTreeDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunsV1GetRunArtifactsTreeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
