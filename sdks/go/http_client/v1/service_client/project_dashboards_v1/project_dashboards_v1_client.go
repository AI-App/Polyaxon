// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project_dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new project dashboards v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project dashboards v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProjectDashboard lists runs
*/
func (a *Client) CreateProjectDashboard(params *CreateProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProjectDashboardOK, *CreateProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateProjectDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateProjectDashboardOK:
		return value, nil, nil
	case *CreateProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectDashboard patches run
*/
func (a *Client) DeleteProjectDashboard(params *DeleteProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProjectDashboardOK, *DeleteProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteProjectDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteProjectDashboardOK:
		return value, nil, nil
	case *DeleteProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectDashboard creates new run
*/
func (a *Client) GetProjectDashboard(params *GetProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*GetProjectDashboardOK, *GetProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetProjectDashboard",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetProjectDashboardOK:
		return value, nil, nil
	case *GetProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectDashboardNames lists bookmarked runs for user
*/
func (a *Client) ListProjectDashboardNames(params *ListProjectDashboardNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListProjectDashboardNamesOK, *ListProjectDashboardNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectDashboardNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListProjectDashboardNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectDashboardNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListProjectDashboardNamesOK:
		return value, nil, nil
	case *ListProjectDashboardNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectDashboards lists archived runs for user
*/
func (a *Client) ListProjectDashboards(params *ListProjectDashboardsParams, authInfo runtime.ClientAuthInfoWriter) (*ListProjectDashboardsOK, *ListProjectDashboardsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectDashboardsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListProjectDashboards",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProjectDashboardsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListProjectDashboardsOK:
		return value, nil, nil
	case *ListProjectDashboardsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchProjectDashboard updates run
*/
func (a *Client) PatchProjectDashboard(params *PatchProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*PatchProjectDashboardOK, *PatchProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchProjectDashboard",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/{dashboard.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchProjectDashboardOK:
		return value, nil, nil
	case *PatchProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PromoteProjectDashboard deletes run
*/
func (a *Client) PromoteProjectDashboard(params *PromoteProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*PromoteProjectDashboardOK, *PromoteProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPromoteProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PromoteProjectDashboard",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/{dashboard.uuid}/promote",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PromoteProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PromoteProjectDashboardOK:
		return value, nil, nil
	case *PromoteProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateProjectDashboard gets run
*/
func (a *Client) UpdateProjectDashboard(params *UpdateProjectDashboardParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProjectDashboardOK, *UpdateProjectDashboardNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectDashboardParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateProjectDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/{project}/dashboards/{dashboard.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateProjectDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateProjectDashboardOK:
		return value, nil, nil
	case *UpdateProjectDashboardNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for project_dashboards_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
