// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package project_dashboards_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// ProjectDashboardsV1UpdateProjectDashboardReader is a Reader for the ProjectDashboardsV1UpdateProjectDashboard structure.
type ProjectDashboardsV1UpdateProjectDashboardReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ProjectDashboardsV1UpdateProjectDashboardReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewProjectDashboardsV1UpdateProjectDashboardOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewProjectDashboardsV1UpdateProjectDashboardNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewProjectDashboardsV1UpdateProjectDashboardForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewProjectDashboardsV1UpdateProjectDashboardNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewProjectDashboardsV1UpdateProjectDashboardDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewProjectDashboardsV1UpdateProjectDashboardOK creates a ProjectDashboardsV1UpdateProjectDashboardOK with default headers values
func NewProjectDashboardsV1UpdateProjectDashboardOK() *ProjectDashboardsV1UpdateProjectDashboardOK {
	return &ProjectDashboardsV1UpdateProjectDashboardOK{}
}

/*ProjectDashboardsV1UpdateProjectDashboardOK handles this case with default header values.

A successful response.
*/
type ProjectDashboardsV1UpdateProjectDashboardOK struct {
	Payload *service_model.V1Dashboard
}

func (o *ProjectDashboardsV1UpdateProjectDashboardOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] projectDashboardsV1UpdateProjectDashboardOK  %+v", 200, o.Payload)
}

func (o *ProjectDashboardsV1UpdateProjectDashboardOK) GetPayload() *service_model.V1Dashboard {
	return o.Payload
}

func (o *ProjectDashboardsV1UpdateProjectDashboardOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1Dashboard)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectDashboardsV1UpdateProjectDashboardNoContent creates a ProjectDashboardsV1UpdateProjectDashboardNoContent with default headers values
func NewProjectDashboardsV1UpdateProjectDashboardNoContent() *ProjectDashboardsV1UpdateProjectDashboardNoContent {
	return &ProjectDashboardsV1UpdateProjectDashboardNoContent{}
}

/*ProjectDashboardsV1UpdateProjectDashboardNoContent handles this case with default header values.

No content.
*/
type ProjectDashboardsV1UpdateProjectDashboardNoContent struct {
	Payload interface{}
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] projectDashboardsV1UpdateProjectDashboardNoContent  %+v", 204, o.Payload)
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectDashboardsV1UpdateProjectDashboardForbidden creates a ProjectDashboardsV1UpdateProjectDashboardForbidden with default headers values
func NewProjectDashboardsV1UpdateProjectDashboardForbidden() *ProjectDashboardsV1UpdateProjectDashboardForbidden {
	return &ProjectDashboardsV1UpdateProjectDashboardForbidden{}
}

/*ProjectDashboardsV1UpdateProjectDashboardForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type ProjectDashboardsV1UpdateProjectDashboardForbidden struct {
	Payload interface{}
}

func (o *ProjectDashboardsV1UpdateProjectDashboardForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] projectDashboardsV1UpdateProjectDashboardForbidden  %+v", 403, o.Payload)
}

func (o *ProjectDashboardsV1UpdateProjectDashboardForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectDashboardsV1UpdateProjectDashboardForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectDashboardsV1UpdateProjectDashboardNotFound creates a ProjectDashboardsV1UpdateProjectDashboardNotFound with default headers values
func NewProjectDashboardsV1UpdateProjectDashboardNotFound() *ProjectDashboardsV1UpdateProjectDashboardNotFound {
	return &ProjectDashboardsV1UpdateProjectDashboardNotFound{}
}

/*ProjectDashboardsV1UpdateProjectDashboardNotFound handles this case with default header values.

Resource does not exist.
*/
type ProjectDashboardsV1UpdateProjectDashboardNotFound struct {
	Payload interface{}
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] projectDashboardsV1UpdateProjectDashboardNotFound  %+v", 404, o.Payload)
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *ProjectDashboardsV1UpdateProjectDashboardNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewProjectDashboardsV1UpdateProjectDashboardDefault creates a ProjectDashboardsV1UpdateProjectDashboardDefault with default headers values
func NewProjectDashboardsV1UpdateProjectDashboardDefault(code int) *ProjectDashboardsV1UpdateProjectDashboardDefault {
	return &ProjectDashboardsV1UpdateProjectDashboardDefault{
		_statusCode: code,
	}
}

/*ProjectDashboardsV1UpdateProjectDashboardDefault handles this case with default header values.

An unexpected error response
*/
type ProjectDashboardsV1UpdateProjectDashboardDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the project dashboards v1 update project dashboard default response
func (o *ProjectDashboardsV1UpdateProjectDashboardDefault) Code() int {
	return o._statusCode
}

func (o *ProjectDashboardsV1UpdateProjectDashboardDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/{owner}/{project}/dashboards/{dashboard.uuid}][%d] ProjectDashboardsV1_UpdateProjectDashboard default  %+v", o._statusCode, o.Payload)
}

func (o *ProjectDashboardsV1UpdateProjectDashboardDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *ProjectDashboardsV1UpdateProjectDashboardDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
