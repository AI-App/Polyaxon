// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package k8_s_config_maps_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new k8 s config maps v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for k8 s config maps v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateK8SConfigMaps lists runs
*/
func (a *Client) CreateK8SConfigMaps(params *CreateK8SConfigMapsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateK8SConfigMapsOK, *CreateK8SConfigMapsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateK8SConfigMapsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateK8SConfigMaps",
		Method:             "POST",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateK8SConfigMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateK8SConfigMapsOK:
		return value, nil, nil
	case *CreateK8SConfigMapsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteK8SConfigMap patches run
*/
func (a *Client) DeleteK8SConfigMap(params *DeleteK8SConfigMapParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteK8SConfigMapOK, *DeleteK8SConfigMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteK8SConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteK8SConfigMap",
		Method:             "DELETE",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteK8SConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteK8SConfigMapOK:
		return value, nil, nil
	case *DeleteK8SConfigMapNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetK8SConfigMap creates new run
*/
func (a *Client) GetK8SConfigMap(params *GetK8SConfigMapParams, authInfo runtime.ClientAuthInfoWriter) (*GetK8SConfigMapOK, *GetK8SConfigMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetK8SConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetK8SConfigMap",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetK8SConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetK8SConfigMapOK:
		return value, nil, nil
	case *GetK8SConfigMapNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8SConfigMapNames lists bookmarked runs for user
*/
func (a *Client) ListK8SConfigMapNames(params *ListK8SConfigMapNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8SConfigMapNamesOK, *ListK8SConfigMapNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8SConfigMapNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8SConfigMapNames",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListK8SConfigMapNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListK8SConfigMapNamesOK:
		return value, nil, nil
	case *ListK8SConfigMapNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListK8SConfigMaps lists archived runs for user
*/
func (a *Client) ListK8SConfigMaps(params *ListK8SConfigMapsParams, authInfo runtime.ClientAuthInfoWriter) (*ListK8SConfigMapsOK, *ListK8SConfigMapsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListK8SConfigMapsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListK8SConfigMaps",
		Method:             "GET",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListK8SConfigMapsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListK8SConfigMapsOK:
		return value, nil, nil
	case *ListK8SConfigMapsNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchK8SConfigMap updates run
*/
func (a *Client) PatchK8SConfigMap(params *PatchK8SConfigMapParams, authInfo runtime.ClientAuthInfoWriter) (*PatchK8SConfigMapOK, *PatchK8SConfigMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchK8SConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchK8SConfigMap",
		Method:             "PATCH",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchK8SConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchK8SConfigMapOK:
		return value, nil, nil
	case *PatchK8SConfigMapNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateK8SConfigMap gets run
*/
func (a *Client) UpdateK8SConfigMap(params *UpdateK8SConfigMapParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateK8SConfigMapOK, *UpdateK8SConfigMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateK8SConfigMapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateK8SConfigMap",
		Method:             "PUT",
		PathPattern:        "/api/v1/{owner}/k8s_config_maps/{k8s_resource.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateK8SConfigMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateK8SConfigMapOK:
		return value, nil, nil
	case *UpdateK8SConfigMapNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for k8_s_config_maps_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
