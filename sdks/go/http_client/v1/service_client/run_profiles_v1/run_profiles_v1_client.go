// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package run_profiles_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new run profiles v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for run profiles v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	RunProfilesV1CreateRunProfile(params *RunProfilesV1CreateRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1CreateRunProfileOK, *RunProfilesV1CreateRunProfileNoContent, error)

	RunProfilesV1DeleteRunProfile(params *RunProfilesV1DeleteRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1DeleteRunProfileOK, *RunProfilesV1DeleteRunProfileNoContent, error)

	RunProfilesV1GetRunProfile(params *RunProfilesV1GetRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1GetRunProfileOK, *RunProfilesV1GetRunProfileNoContent, error)

	RunProfilesV1ListRunProfileNames(params *RunProfilesV1ListRunProfileNamesParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1ListRunProfileNamesOK, *RunProfilesV1ListRunProfileNamesNoContent, error)

	RunProfilesV1ListRunProfiles(params *RunProfilesV1ListRunProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1ListRunProfilesOK, *RunProfilesV1ListRunProfilesNoContent, error)

	RunProfilesV1PatchRunProfile(params *RunProfilesV1PatchRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1PatchRunProfileOK, *RunProfilesV1PatchRunProfileNoContent, error)

	RunProfilesV1UpdateRunProfile(params *RunProfilesV1UpdateRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1UpdateRunProfileOK, *RunProfilesV1UpdateRunProfileNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RunProfilesV1CreateRunProfile creates hub component
*/
func (a *Client) RunProfilesV1CreateRunProfile(params *RunProfilesV1CreateRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1CreateRunProfileOK, *RunProfilesV1CreateRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1CreateRunProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_CreateRunProfile",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1CreateRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1CreateRunProfileOK:
		return value, nil, nil
	case *RunProfilesV1CreateRunProfileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1CreateRunProfileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1DeleteRunProfile deletes hub component
*/
func (a *Client) RunProfilesV1DeleteRunProfile(params *RunProfilesV1DeleteRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1DeleteRunProfileOK, *RunProfilesV1DeleteRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1DeleteRunProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_DeleteRunProfile",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1DeleteRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1DeleteRunProfileOK:
		return value, nil, nil
	case *RunProfilesV1DeleteRunProfileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1DeleteRunProfileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1GetRunProfile gets hub component
*/
func (a *Client) RunProfilesV1GetRunProfile(params *RunProfilesV1GetRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1GetRunProfileOK, *RunProfilesV1GetRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1GetRunProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_GetRunProfile",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1GetRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1GetRunProfileOK:
		return value, nil, nil
	case *RunProfilesV1GetRunProfileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1GetRunProfileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1ListRunProfileNames lists hub component names
*/
func (a *Client) RunProfilesV1ListRunProfileNames(params *RunProfilesV1ListRunProfileNamesParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1ListRunProfileNamesOK, *RunProfilesV1ListRunProfileNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1ListRunProfileNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_ListRunProfileNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1ListRunProfileNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1ListRunProfileNamesOK:
		return value, nil, nil
	case *RunProfilesV1ListRunProfileNamesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1ListRunProfileNamesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1ListRunProfiles lists hub components
*/
func (a *Client) RunProfilesV1ListRunProfiles(params *RunProfilesV1ListRunProfilesParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1ListRunProfilesOK, *RunProfilesV1ListRunProfilesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1ListRunProfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_ListRunProfiles",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1ListRunProfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1ListRunProfilesOK:
		return value, nil, nil
	case *RunProfilesV1ListRunProfilesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1ListRunProfilesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1PatchRunProfile patches hub component
*/
func (a *Client) RunProfilesV1PatchRunProfile(params *RunProfilesV1PatchRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1PatchRunProfileOK, *RunProfilesV1PatchRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1PatchRunProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_PatchRunProfile",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1PatchRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1PatchRunProfileOK:
		return value, nil, nil
	case *RunProfilesV1PatchRunProfileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1PatchRunProfileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RunProfilesV1UpdateRunProfile updates hub component
*/
func (a *Client) RunProfilesV1UpdateRunProfile(params *RunProfilesV1UpdateRunProfileParams, authInfo runtime.ClientAuthInfoWriter) (*RunProfilesV1UpdateRunProfileOK, *RunProfilesV1UpdateRunProfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunProfilesV1UpdateRunProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RunProfilesV1_UpdateRunProfile",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunProfilesV1UpdateRunProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *RunProfilesV1UpdateRunProfileOK:
		return value, nil, nil
	case *RunProfilesV1UpdateRunProfileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RunProfilesV1UpdateRunProfileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
