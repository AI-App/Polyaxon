// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package run_profiles_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/polyaxon/polyaxon/sdks/go/http_client/v1/service_model"
)

// RunProfilesV1UpdateRunProfileReader is a Reader for the RunProfilesV1UpdateRunProfile structure.
type RunProfilesV1UpdateRunProfileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RunProfilesV1UpdateRunProfileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRunProfilesV1UpdateRunProfileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewRunProfilesV1UpdateRunProfileNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRunProfilesV1UpdateRunProfileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRunProfilesV1UpdateRunProfileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRunProfilesV1UpdateRunProfileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRunProfilesV1UpdateRunProfileOK creates a RunProfilesV1UpdateRunProfileOK with default headers values
func NewRunProfilesV1UpdateRunProfileOK() *RunProfilesV1UpdateRunProfileOK {
	return &RunProfilesV1UpdateRunProfileOK{}
}

/*RunProfilesV1UpdateRunProfileOK handles this case with default header values.

A successful response.
*/
type RunProfilesV1UpdateRunProfileOK struct {
	Payload *service_model.V1RunProfile
}

func (o *RunProfilesV1UpdateRunProfileOK) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}][%d] runProfilesV1UpdateRunProfileOK  %+v", 200, o.Payload)
}

func (o *RunProfilesV1UpdateRunProfileOK) GetPayload() *service_model.V1RunProfile {
	return o.Payload
}

func (o *RunProfilesV1UpdateRunProfileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.V1RunProfile)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunProfilesV1UpdateRunProfileNoContent creates a RunProfilesV1UpdateRunProfileNoContent with default headers values
func NewRunProfilesV1UpdateRunProfileNoContent() *RunProfilesV1UpdateRunProfileNoContent {
	return &RunProfilesV1UpdateRunProfileNoContent{}
}

/*RunProfilesV1UpdateRunProfileNoContent handles this case with default header values.

No content.
*/
type RunProfilesV1UpdateRunProfileNoContent struct {
	Payload interface{}
}

func (o *RunProfilesV1UpdateRunProfileNoContent) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}][%d] runProfilesV1UpdateRunProfileNoContent  %+v", 204, o.Payload)
}

func (o *RunProfilesV1UpdateRunProfileNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *RunProfilesV1UpdateRunProfileNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunProfilesV1UpdateRunProfileForbidden creates a RunProfilesV1UpdateRunProfileForbidden with default headers values
func NewRunProfilesV1UpdateRunProfileForbidden() *RunProfilesV1UpdateRunProfileForbidden {
	return &RunProfilesV1UpdateRunProfileForbidden{}
}

/*RunProfilesV1UpdateRunProfileForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type RunProfilesV1UpdateRunProfileForbidden struct {
	Payload interface{}
}

func (o *RunProfilesV1UpdateRunProfileForbidden) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}][%d] runProfilesV1UpdateRunProfileForbidden  %+v", 403, o.Payload)
}

func (o *RunProfilesV1UpdateRunProfileForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *RunProfilesV1UpdateRunProfileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunProfilesV1UpdateRunProfileNotFound creates a RunProfilesV1UpdateRunProfileNotFound with default headers values
func NewRunProfilesV1UpdateRunProfileNotFound() *RunProfilesV1UpdateRunProfileNotFound {
	return &RunProfilesV1UpdateRunProfileNotFound{}
}

/*RunProfilesV1UpdateRunProfileNotFound handles this case with default header values.

Resource does not exist.
*/
type RunProfilesV1UpdateRunProfileNotFound struct {
	Payload interface{}
}

func (o *RunProfilesV1UpdateRunProfileNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}][%d] runProfilesV1UpdateRunProfileNotFound  %+v", 404, o.Payload)
}

func (o *RunProfilesV1UpdateRunProfileNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *RunProfilesV1UpdateRunProfileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRunProfilesV1UpdateRunProfileDefault creates a RunProfilesV1UpdateRunProfileDefault with default headers values
func NewRunProfilesV1UpdateRunProfileDefault(code int) *RunProfilesV1UpdateRunProfileDefault {
	return &RunProfilesV1UpdateRunProfileDefault{
		_statusCode: code,
	}
}

/*RunProfilesV1UpdateRunProfileDefault handles this case with default header values.

An unexpected error response
*/
type RunProfilesV1UpdateRunProfileDefault struct {
	_statusCode int

	Payload *service_model.RuntimeError
}

// Code gets the status code for the run profiles v1 update run profile default response
func (o *RunProfilesV1UpdateRunProfileDefault) Code() int {
	return o._statusCode
}

func (o *RunProfilesV1UpdateRunProfileDefault) Error() string {
	return fmt.Sprintf("[PUT /api/v1/orgs/{owner}/run_profiles/{run_profile.uuid}][%d] RunProfilesV1_UpdateRunProfile default  %+v", o._statusCode, o.Payload)
}

func (o *RunProfilesV1UpdateRunProfileDefault) GetPayload() *service_model.RuntimeError {
	return o.Payload
}

func (o *RunProfilesV1UpdateRunProfileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(service_model.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
