// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package registry_accesses_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new registry accesses v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for registry accesses v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRegistryAccess lists runs
*/
func (a *Client) CreateRegistryAccess(params *CreateRegistryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRegistryAccessOK, *CreateRegistryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRegistryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRegistryAccess",
		Method:             "POST",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRegistryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateRegistryAccessOK:
		return value, nil, nil
	case *CreateRegistryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteRegistryAccess patches run
*/
func (a *Client) DeleteRegistryAccess(params *DeleteRegistryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRegistryAccessOK, *DeleteRegistryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRegistryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRegistryAccess",
		Method:             "DELETE",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRegistryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteRegistryAccessOK:
		return value, nil, nil
	case *DeleteRegistryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRegistryAccess creates new run
*/
func (a *Client) GetRegistryAccess(params *GetRegistryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegistryAccessOK, *GetRegistryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegistryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegistryAccess",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegistryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetRegistryAccessOK:
		return value, nil, nil
	case *GetRegistryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistryAccessNames lists bookmarked runs for user
*/
func (a *Client) ListRegistryAccessNames(params *ListRegistryAccessNamesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRegistryAccessNamesOK, *ListRegistryAccessNamesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegistryAccessNamesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRegistryAccessNames",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses/names",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistryAccessNamesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListRegistryAccessNamesOK:
		return value, nil, nil
	case *ListRegistryAccessNamesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListRegistryAccesses lists archived runs for user
*/
func (a *Client) ListRegistryAccesses(params *ListRegistryAccessesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRegistryAccessesOK, *ListRegistryAccessesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRegistryAccessesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRegistryAccesses",
		Method:             "GET",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRegistryAccessesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ListRegistryAccessesOK:
		return value, nil, nil
	case *ListRegistryAccessesNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchRegistryAccess updates run
*/
func (a *Client) PatchRegistryAccess(params *PatchRegistryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*PatchRegistryAccessOK, *PatchRegistryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchRegistryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchRegistryAccess",
		Method:             "PATCH",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PatchRegistryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *PatchRegistryAccessOK:
		return value, nil, nil
	case *PatchRegistryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateRegistryAccess gets run
*/
func (a *Client) UpdateRegistryAccess(params *UpdateRegistryAccessParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateRegistryAccessOK, *UpdateRegistryAccessNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRegistryAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRegistryAccess",
		Method:             "PUT",
		PathPattern:        "/api/v1/orgs/{owner}/registry_accesses/{host_access.uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRegistryAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *UpdateRegistryAccessOK:
		return value, nil, nil
	case *UpdateRegistryAccessNoContent:
		return nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for registry_accesses_v1: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
