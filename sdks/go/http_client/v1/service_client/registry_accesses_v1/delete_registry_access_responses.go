// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package registry_accesses_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// DeleteRegistryAccessReader is a Reader for the DeleteRegistryAccess structure.
type DeleteRegistryAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRegistryAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteRegistryAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 204:
		result := NewDeleteRegistryAccessNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDeleteRegistryAccessForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRegistryAccessNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewDeleteRegistryAccessOK creates a DeleteRegistryAccessOK with default headers values
func NewDeleteRegistryAccessOK() *DeleteRegistryAccessOK {
	return &DeleteRegistryAccessOK{}
}

/*DeleteRegistryAccessOK handles this case with default header values.

A successful response.
*/
type DeleteRegistryAccessOK struct {
}

func (o *DeleteRegistryAccessOK) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/orgs/{owner}/registry_accesses/{uuid}][%d] deleteRegistryAccessOK ", 200)
}

func (o *DeleteRegistryAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRegistryAccessNoContent creates a DeleteRegistryAccessNoContent with default headers values
func NewDeleteRegistryAccessNoContent() *DeleteRegistryAccessNoContent {
	return &DeleteRegistryAccessNoContent{}
}

/*DeleteRegistryAccessNoContent handles this case with default header values.

No content.
*/
type DeleteRegistryAccessNoContent struct {
	Payload interface{}
}

func (o *DeleteRegistryAccessNoContent) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/orgs/{owner}/registry_accesses/{uuid}][%d] deleteRegistryAccessNoContent  %+v", 204, o.Payload)
}

func (o *DeleteRegistryAccessNoContent) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRegistryAccessNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryAccessForbidden creates a DeleteRegistryAccessForbidden with default headers values
func NewDeleteRegistryAccessForbidden() *DeleteRegistryAccessForbidden {
	return &DeleteRegistryAccessForbidden{}
}

/*DeleteRegistryAccessForbidden handles this case with default header values.

You don't have permission to access the resource.
*/
type DeleteRegistryAccessForbidden struct {
	Payload interface{}
}

func (o *DeleteRegistryAccessForbidden) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/orgs/{owner}/registry_accesses/{uuid}][%d] deleteRegistryAccessForbidden  %+v", 403, o.Payload)
}

func (o *DeleteRegistryAccessForbidden) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRegistryAccessForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRegistryAccessNotFound creates a DeleteRegistryAccessNotFound with default headers values
func NewDeleteRegistryAccessNotFound() *DeleteRegistryAccessNotFound {
	return &DeleteRegistryAccessNotFound{}
}

/*DeleteRegistryAccessNotFound handles this case with default header values.

Resource does not exist.
*/
type DeleteRegistryAccessNotFound struct {
	Payload interface{}
}

func (o *DeleteRegistryAccessNotFound) Error() string {
	return fmt.Sprintf("[DELETE /api/v1/orgs/{owner}/registry_accesses/{uuid}][%d] deleteRegistryAccessNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRegistryAccessNotFound) GetPayload() interface{} {
	return o.Payload
}

func (o *DeleteRegistryAccessNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
