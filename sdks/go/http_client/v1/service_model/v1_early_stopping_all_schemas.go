// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1EarlyStoppingAllSchemas All Schemas message
// swagger:model v1EarlyStoppingAllSchemas
type V1EarlyStoppingAllSchemas struct {

	// average
	Average *V1AverageStoppingPolicy `json:"average,omitempty"`

	// failure
	Failure *V1FailureEarlyStopping `json:"failure,omitempty"`

	// median
	Median *V1MedianStoppingPolicy `json:"median,omitempty"`

	// metric
	Metric *V1MetricEarlyStopping `json:"metric,omitempty"`

	// truncation
	Truncation *V1TruncationStoppingPolicy `json:"truncation,omitempty"`
}

// Validate validates this v1 early stopping all schemas
func (m *V1EarlyStoppingAllSchemas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMedian(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetric(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTruncation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1EarlyStoppingAllSchemas) validateAverage(formats strfmt.Registry) error {

	if swag.IsZero(m.Average) { // not required
		return nil
	}

	if m.Average != nil {
		if err := m.Average.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("average")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStoppingAllSchemas) validateFailure(formats strfmt.Registry) error {

	if swag.IsZero(m.Failure) { // not required
		return nil
	}

	if m.Failure != nil {
		if err := m.Failure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("failure")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStoppingAllSchemas) validateMedian(formats strfmt.Registry) error {

	if swag.IsZero(m.Median) { // not required
		return nil
	}

	if m.Median != nil {
		if err := m.Median.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("median")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStoppingAllSchemas) validateMetric(formats strfmt.Registry) error {

	if swag.IsZero(m.Metric) { // not required
		return nil
	}

	if m.Metric != nil {
		if err := m.Metric.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metric")
			}
			return err
		}
	}

	return nil
}

func (m *V1EarlyStoppingAllSchemas) validateTruncation(formats strfmt.Registry) error {

	if swag.IsZero(m.Truncation) { // not required
		return nil
	}

	if m.Truncation != nil {
		if err := m.Truncation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("truncation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1EarlyStoppingAllSchemas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1EarlyStoppingAllSchemas) UnmarshalBinary(b []byte) error {
	var res V1EarlyStoppingAllSchemas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
