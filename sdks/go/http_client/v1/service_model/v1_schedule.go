// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1Schedule All Schemas message
//
// swagger:model v1Schedule
type V1Schedule struct {

	// cron
	Cron *V1CronSchedule `json:"cron,omitempty"`

	// datetime
	Datetime *V1DateTimeSchedule `json:"datetime,omitempty"`

	// interval
	Interval *V1IntervalSchedule `json:"interval,omitempty"`
}

// Validate validates this v1 schedule
func (m *V1Schedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCron(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatetime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Schedule) validateCron(formats strfmt.Registry) error {

	if swag.IsZero(m.Cron) { // not required
		return nil
	}

	if m.Cron != nil {
		if err := m.Cron.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cron")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schedule) validateDatetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Datetime) { // not required
		return nil
	}

	if m.Datetime != nil {
		if err := m.Datetime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("datetime")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schedule) validateInterval(formats strfmt.Registry) error {

	if swag.IsZero(m.Interval) { // not required
		return nil
	}

	if m.Interval != nil {
		if err := m.Interval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("interval")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Schedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Schedule) UnmarshalBinary(b []byte) error {
	var res V1Schedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
