// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1PipelineKind v1 pipeline kind
//
// swagger:model v1PipelineKind
type V1PipelineKind string

const (

	// V1PipelineKindDag captures enum value "dag"
	V1PipelineKindDag V1PipelineKind = "dag"

	// V1PipelineKindParallel captures enum value "parallel"
	V1PipelineKindParallel V1PipelineKind = "parallel"
)

// for schema
var v1PipelineKindEnum []interface{}

func init() {
	var res []V1PipelineKind
	if err := json.Unmarshal([]byte(`["dag","parallel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1PipelineKindEnum = append(v1PipelineKindEnum, v)
	}
}

func (m V1PipelineKind) validateV1PipelineKindEnum(path, location string, value V1PipelineKind) error {
	if err := validate.Enum(path, location, value, v1PipelineKindEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 pipeline kind
func (m V1PipelineKind) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1PipelineKindEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
