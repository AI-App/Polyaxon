// Copyright 2018-2020 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// V1NotificationTrigger NotificationTrigger enum
//
// swagger:model v1NotificationTrigger
type V1NotificationTrigger string

const (

	// V1NotificationTriggerSucceeded captures enum value "succeeded"
	V1NotificationTriggerSucceeded V1NotificationTrigger = "succeeded"

	// V1NotificationTriggerFailed captures enum value "failed"
	V1NotificationTriggerFailed V1NotificationTrigger = "failed"

	// V1NotificationTriggerStopped captures enum value "stopped"
	V1NotificationTriggerStopped V1NotificationTrigger = "stopped"

	// V1NotificationTriggerDone captures enum value "done"
	V1NotificationTriggerDone V1NotificationTrigger = "done"
)

// for schema
var v1NotificationTriggerEnum []interface{}

func init() {
	var res []V1NotificationTrigger
	if err := json.Unmarshal([]byte(`["succeeded","failed","stopped","done"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		v1NotificationTriggerEnum = append(v1NotificationTriggerEnum, v)
	}
}

func (m V1NotificationTrigger) validateV1NotificationTriggerEnum(path, location string, value V1NotificationTrigger) error {
	if err := validate.EnumCase(path, location, value, v1NotificationTriggerEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this v1 notification trigger
func (m V1NotificationTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateV1NotificationTriggerEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
