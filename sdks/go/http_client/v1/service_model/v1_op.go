// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1Op v1 op
// swagger:model v1Op
type V1Op struct {

	// Optional inline component to use for the op if a reference is not provided
	Component *V1Component `json:"component,omitempty"`

	// Optional component reference if a component is not provided
	ComponentRef *V1ComponentRef `json:"component_ref,omitempty"`

	// An optional list of condition to check before starting the run, entities should be a valid Condition
	Conditions []interface{} `json:"conditions"`

	// Optional graph dependencies of this op
	Dependencies []string `json:"dependencies"`

	// Optional component description
	Description string `json:"description,omitempty"`

	// Optional environment section
	Environment *V1Environment `json:"environment,omitempty"`

	// Optional init section
	Init *V1Init `json:"init,omitempty"`

	// Optional component kind, should be equal to "component"
	Kind string `json:"kind,omitempty"`

	// Optioanl mount section
	Mounts *V1Mounts `json:"mounts,omitempty"`

	// Optional component name, should a valid slug
	Name string `json:"name,omitempty"`

	// Optional flag to disable cache validation and force run this component
	Nocache bool `json:"nocache,omitempty"`

	// Optional parallel section, must be a valid Parallel option (Random/Grid/BO/Hyperband/Hyperopt/Mapping/Iterative)
	Parallel interface{} `json:"parallel,omitempty"`

	// Optional dict of params
	Params interface{} `json:"params,omitempty"`

	// Optional profile to use for running this component
	Profile string `json:"profile,omitempty"`

	// Optional queue to use for running this component
	Queue string `json:"queue,omitempty"`

	// Optional schedule section, must be a valid Schedule option (Cron/Interval/Repeatable/ExactTime)
	Schedule interface{} `json:"schedule,omitempty"`

	// Optional service section
	Service *V1Service `json:"service,omitempty"`

	// Optional flag to skip this run if upstream was skipped
	SkipOnUpstreamSkip bool `json:"skip_on_upstream_skip,omitempty"`

	// Optional component tag version
	Tag string `json:"tag,omitempty"`

	// Optional component tags
	Tags []string `json:"tags"`

	// optional termination section
	Termination *V1Termination `json:"termination,omitempty"`

	// Optional trigger policy
	Trigger V1TriggerPolicy `json:"trigger,omitempty"`

	// Spec version
	Version float32 `json:"version,omitempty"`
}

// Validate validates this v1 op
func (m *V1Op) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComponent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComponentRef(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Op) validateComponent(formats strfmt.Registry) error {

	if swag.IsZero(m.Component) { // not required
		return nil
	}

	if m.Component != nil {
		if err := m.Component.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateComponentRef(formats strfmt.Registry) error {

	if swag.IsZero(m.ComponentRef) { // not required
		return nil
	}

	if m.ComponentRef != nil {
		if err := m.ComponentRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("component_ref")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateEnvironment(formats strfmt.Registry) error {

	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	if m.Environment != nil {
		if err := m.Environment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("environment")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateInit(formats strfmt.Registry) error {

	if swag.IsZero(m.Init) { // not required
		return nil
	}

	if m.Init != nil {
		if err := m.Init.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("init")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateMounts(formats strfmt.Registry) error {

	if swag.IsZero(m.Mounts) { // not required
		return nil
	}

	if m.Mounts != nil {
		if err := m.Mounts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mounts")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateTermination(formats strfmt.Registry) error {

	if swag.IsZero(m.Termination) { // not required
		return nil
	}

	if m.Termination != nil {
		if err := m.Termination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termination")
			}
			return err
		}
	}

	return nil
}

func (m *V1Op) validateTrigger(formats strfmt.Registry) error {

	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if err := m.Trigger.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trigger")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Op) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Op) UnmarshalBinary(b []byte) error {
	var res V1Op
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
