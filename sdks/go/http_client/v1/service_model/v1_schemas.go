// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1Schemas v1 schemas
// swagger:model v1Schemas
type V1Schemas struct {

	// early stopping
	EarlyStopping *V1EarlyStoppingAllSchemas `json:"early_stopping,omitempty"`

	// mount
	Mount *V1Mounts `json:"mount,omitempty"`

	// parallel
	Parallel *V1ParallelAllSchemas `json:"parallel,omitempty"`

	// schedule
	Schedule *V1ScheduleAllSchemas `json:"schedule,omitempty"`

	// termination
	Termination *V1Termination `json:"termination,omitempty"`
}

// Validate validates this v1 schemas
func (m *V1Schemas) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEarlyStopping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParallel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Schemas) validateEarlyStopping(formats strfmt.Registry) error {

	if swag.IsZero(m.EarlyStopping) { // not required
		return nil
	}

	if m.EarlyStopping != nil {
		if err := m.EarlyStopping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("early_stopping")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateMount(formats strfmt.Registry) error {

	if swag.IsZero(m.Mount) { // not required
		return nil
	}

	if m.Mount != nil {
		if err := m.Mount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mount")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateParallel(formats strfmt.Registry) error {

	if swag.IsZero(m.Parallel) { // not required
		return nil
	}

	if m.Parallel != nil {
		if err := m.Parallel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parallel")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

func (m *V1Schemas) validateTermination(formats strfmt.Registry) error {

	if swag.IsZero(m.Termination) { // not required
		return nil
	}

	if m.Termination != nil {
		if err := m.Termination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("termination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Schemas) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Schemas) UnmarshalBinary(b []byte) error {
	var res V1Schemas
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
