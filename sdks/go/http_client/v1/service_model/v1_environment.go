// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by go-swagger; DO NOT EDIT.

package service_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// V1Environment Environment specification
// swagger:model v1Environment
type V1Environment struct {

	// Optional affinity to pass to the k8s
	Affinity []interface{} `json:"affinity"`

	// Optional labels to pass to the k8s
	Annotations map[string]string `json:"annotations,omitempty"`

	// Optional flag to tell Polyaxon if it should set an auth context for the run, default true
	Auth bool `json:"auth,omitempty"`

	// Optional flag to tell Polyaxon if it should set a docker socket context for the run, default false
	Docker bool `json:"docker,omitempty"`

	// Optional list of tuples(key, value) for defining env vars
	EnvVars []interface{} `json:"env_vars"`

	// Optional image pull secrets to use for this run
	ImagePullSecrets []string `json:"image_pull_secrets"`

	// Optional specification fot the init container
	InitContainer *V1ContainerEnv `json:"init_container,omitempty"`

	// Optional labels to pass to the k8s
	Labels map[string]string `json:"labels,omitempty"`

	// Optional log level
	LogLevel string `json:"log_level,omitempty"`

	// Optional flag to tell Polyaxon if it set/handle a logs context
	Logs bool `json:"logs,omitempty"`

	// Optional node seletors to pass to the k8s
	NodeSelector map[string]string `json:"node_selector,omitempty"`

	// Optional flag to tell Polyaxon if it set/handle an outputs context
	Outputs bool `json:"outputs,omitempty"`

	// Optional registy name to use for this run
	Registry string `json:"registry,omitempty"`

	// Optional resource requirements
	Resources *V1ResourceRequirements `json:"resources,omitempty"`

	// Optional security context to use for this run
	SecurityContext interface{} `json:"security_context,omitempty"`

	// Optional service account to use for this run
	ServiceAccount string `json:"service_account,omitempty"`

	// Optional flag to tell Polyaxon if it should set a shm context for the run, default false
	Shm bool `json:"shm,omitempty"`

	// Optional specification fot the sidecar container
	SidecarContainer *V1ContainerEnv `json:"sidecar_container,omitempty"`

	// Optional tolerations to pass to the k8s
	Tolerations []interface{} `json:"tolerations"`
}

// Validate validates this v1 environment
func (m *V1Environment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidecarContainer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1Environment) validateInitContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.InitContainer) { // not required
		return nil
	}

	if m.InitContainer != nil {
		if err := m.InitContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("init_container")
			}
			return err
		}
	}

	return nil
}

func (m *V1Environment) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resources")
			}
			return err
		}
	}

	return nil
}

func (m *V1Environment) validateSidecarContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.SidecarContainer) { // not required
		return nil
	}

	if m.SidecarContainer != nil {
		if err := m.SidecarContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidecar_container")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1Environment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1Environment) UnmarshalBinary(b []byte) error {
	var res V1Environment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
