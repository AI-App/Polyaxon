# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function

import json
import os

from polyaxon_client import PolyaxonClient, settings
from polyaxon_client.exceptions import PolyaxonException
from polyaxon_client.tracking.utils.project import get_project_info


class BaseTracker(object):
    def __init__(self, project=None, client=None, track_logs=None, track_git=None, track_env=None):
        if not settings.IN_CLUSTER and project is None:
            raise PolyaxonException('Please provide a valid project.')

        self.client = client or PolyaxonClient()
        if settings.IN_CLUSTER:
            self.user = None
        else:
            self.user = (self.client.auth.get_user().username
                         if self.client.api_config.schema_response
                         else self.client.auth.get_user().get('username'))

        username, project_name = get_project_info(current_user=self.user, project=project)
        self.track_logs = track_logs
        self.track_git = track_git
        self.track_env = track_env
        self.project = project
        self.username = username
        self.project_name = project_name

    @staticmethod
    def get_data_paths():
        """
        The data paths dictionary that yu mounted for the job/experiment.
        {'data1': '/data/1/', 'data-foo': '/data/foo'}
        """
        data_path = os.getenv('POLYAXON_RUN_DATA_PATHS', None)
        try:
            return json.loads(data_path) if data_path else None
        except (ValueError, TypeError):
            print('Could get data paths, '
                  'please make sure this is running inside a polyaxon job.')
            return None

    @staticmethod
    def get_outputs_path():
        """
        The outputs path generated by polyaxon based on the hierarchy of the experiment:
        Experiment:
            `user/project/group/experiment/files`
        Jobs:
            `user/project/jobs/files`
        """
        return os.getenv('POLYAXON_RUN_OUTPUTS_PATH', None)

    @staticmethod
    def get_outputs_refs_paths():
        """
        The references outputs paths requested by the user,
        the order follows the order specified by the user:
        {
            'experiments': [
                `user/project/job12/files`,
            ], 'experiments': [
                `user/project/group/experiment1/files`,
                `user/project/experiment100/files`
            ]
        }
        """
        outputs_refs = os.getenv('POLYAXON_REFS_OUTPUTS_PATHS', None)
        try:
            return json.loads(outputs_refs) if outputs_refs else None
        except (ValueError, TypeError):
            print('Could get outputs refs paths, '
                  'please make sure this is running inside a polyaxon job.')
            return None

    @staticmethod
    def get_log_level():
        """If set on the polyaxonfile it will return the log level."""
        return os.getenv('POLYAXON_LOG_LEVEL', None)


def ensure_in_custer():
    if not settings.IN_CLUSTER:
        raise PolyaxonException('This experiment/job is not running inside a Polyaxon job.')
