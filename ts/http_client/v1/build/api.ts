// Copyright 2019 Polyaxon, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Build service
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.14.4
 * Contact: contact@polyaxon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof ProtobufAny
     */
    type_url?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof ProtobufAny
     */
    value?: string;
}

/**
 * 
 * @export
 * @interface V1Build
 */
export interface V1Build {
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    unique_name?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof V1Build
     */
    tags?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof V1Build
     */
    deleted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    started_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    finished_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    project?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    is_managed?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    spec?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    backend?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    framework?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    last_status?: string;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    code_reference?: string;
    /**
     * 
     * @type {V1Dict}
     * @memberof V1Build
     */
    resources?: V1Dict;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    readme?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1Build
     */
    bookmarked?: boolean;
    /**
     * 
     * @type {V1Dict}
     * @memberof V1Build
     */
    params?: V1Dict;
    /**
     * 
     * @type {V1Dict}
     * @memberof V1Build
     */
    run_env?: V1Dict;
    /**
     * 
     * @type {string}
     * @memberof V1Build
     */
    build_build?: string;
}

/**
 * 
 * @export
 * @interface V1BuildBodyRequest
 */
export interface V1BuildBodyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1BuildBodyRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildBodyRequest
     */
    project?: string;
    /**
     * 
     * @type {V1Build}
     * @memberof V1BuildBodyRequest
     */
    build?: V1Build;
}

/**
 * 
 * @export
 * @interface V1BuildStatus
 */
export interface V1BuildStatus {
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    created_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof V1BuildStatus
     */
    message?: string;
}

/**
 * 
 * @export
 * @interface V1CodeReference
 */
export interface V1CodeReference {
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    commit?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    updated_at?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof V1CodeReference
     */
    git_url?: string;
    /**
     * 
     * @type {boolean}
     * @memberof V1CodeReference
     */
    is_dirty?: boolean;
}

/**
 * 
 * @export
 * @interface V1CodeReferenceBodyRequest
 */
export interface V1CodeReferenceBodyRequest {
    /**
     * 
     * @type {V1OwnedEntityIdRequest}
     * @memberof V1CodeReferenceBodyRequest
     */
    entity?: V1OwnedEntityIdRequest;
    /**
     * 
     * @type {V1CodeReference}
     * @memberof V1CodeReferenceBodyRequest
     */
    CodeReference?: V1CodeReference;
}

/**
 * 
 * @export
 * @interface V1Dict
 */
export interface V1Dict {
    /**
     * 
     * @type {Array<V1KV>}
     * @memberof V1Dict
     */
    kv?: Array<V1KV>;
}

/**
 * 
 * @export
 * @interface V1KV
 */
export interface V1KV {
    /**
     * 
     * @type {string}
     * @memberof V1KV
     */
    key?: string;
    /**
     * 
     * @type {ProtobufAny}
     * @memberof V1KV
     */
    value?: ProtobufAny;
}

/**
 * 
 * @export
 * @interface V1ListBuildStatusesResponse
 */
export interface V1ListBuildStatusesResponse {
    /**
     * 
     * @type {number}
     * @memberof V1ListBuildStatusesResponse
     */
    count?: number;
    /**
     * 
     * @type {Array<V1BuildStatus>}
     * @memberof V1ListBuildStatusesResponse
     */
    results?: Array<V1BuildStatus>;
    /**
     * 
     * @type {string}
     * @memberof V1ListBuildStatusesResponse
     */
    previous?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ListBuildStatusesResponse
     */
    next?: string;
}

/**
 * 
 * @export
 * @interface V1ListBuildsResponse
 */
export interface V1ListBuildsResponse {
    /**
     * 
     * @type {number}
     * @memberof V1ListBuildsResponse
     */
    count?: number;
    /**
     * 
     * @type {Array<V1Build>}
     * @memberof V1ListBuildsResponse
     */
    results?: Array<V1Build>;
    /**
     * 
     * @type {string}
     * @memberof V1ListBuildsResponse
     */
    previous?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ListBuildsResponse
     */
    next?: string;
}

/**
 * 
 * @export
 * @interface V1OwnedEntityIdRequest
 */
export interface V1OwnedEntityIdRequest {
    /**
     * 
     * @type {string}
     * @memberof V1OwnedEntityIdRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof V1OwnedEntityIdRequest
     */
    project?: string;
    /**
     * 
     * @type {string}
     * @memberof V1OwnedEntityIdRequest
     */
    id?: string;
}

/**
 * 
 * @export
 * @interface V1ProjectBodyRequest
 */
export interface V1ProjectBodyRequest {
    /**
     * 
     * @type {string}
     * @memberof V1ProjectBodyRequest
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ProjectBodyRequest
     */
    project?: string;
}

/**
 * 
 * @export
 * @interface V1StatusResponse
 */
export interface V1StatusResponse {
    /**
     * 
     * @type {string}
     * @memberof V1StatusResponse
     */
    status?: string;
}


/**
 * BuildServiceApi - fetch parameter creator
 * @export
 */
export const BuildServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Archive build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling archiveBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling archiveBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling archiveBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/archive`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Bookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmarkBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling bookmarkBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling bookmarkBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling bookmarkBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/bookmark`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuild(owner: string, project: string, body: V1BuildBodyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling createBuild.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1BuildBodyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new build status
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuildStatus(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createBuildStatus.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling createBuildStatus.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createBuildStatus.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createBuildStatus.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/statuses`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1OwnedEntityIdRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling deleteBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuilds(owner: string, project: string, body: V1OwnedEntityIdRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteBuilds.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling deleteBuilds.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling deleteBuilds.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/delete`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1OwnedEntityIdRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling getBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get build code ref
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildCodeRef(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBuildCodeRef.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling getBuildCodeRef.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getBuildCodeRef.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/coderef`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create build code ref
         * @param {string} entity_owner Owner of the namespace
         * @param {string} entity_project Project where the experiement will be assigned
         * @param {string} entity_id Unique integer identifier of the entity
         * @param {V1CodeReferenceBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greateBuildCodeRef(entity_owner: string, entity_project: string, entity_id: string, body: V1CodeReferenceBodyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'entity_owner' is not null or undefined
            if (entity_owner === null || entity_owner === undefined) {
                throw new RequiredError('entity_owner','Required parameter entity_owner was null or undefined when calling greateBuildCodeRef.');
            }
            // verify required parameter 'entity_project' is not null or undefined
            if (entity_project === null || entity_project === undefined) {
                throw new RequiredError('entity_project','Required parameter entity_project was null or undefined when calling greateBuildCodeRef.');
            }
            // verify required parameter 'entity_id' is not null or undefined
            if (entity_id === null || entity_id === undefined) {
                throw new RequiredError('entity_id','Required parameter entity_id was null or undefined when calling greateBuildCodeRef.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling greateBuildCodeRef.');
            }
            const localVarPath = `/v1/{entity.owner}/{entity.project}/builds/{entity.id}/coderef`
                .replace(`{${"entity.owner"}}`, encodeURIComponent(String(entity_owner)))
                .replace(`{${"entity.project"}}`, encodeURIComponent(String(entity_project)))
                .replace(`{${"entity.id"}}`, encodeURIComponent(String(entity_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1CodeReferenceBodyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List archived builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchivedBuilds(owner: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listArchivedBuilds.');
            }
            const localVarPath = `/v1/archives/{owner}/builds`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List bookmarked builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedBuilds(owner: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listBookmarkedBuilds.');
            }
            const localVarPath = `/v1/bookmarks/{owner}/builds`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List build statuses
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuildStatuses(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listBuildStatuses.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling listBuildStatuses.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listBuildStatuses.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/statuses`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuilds(owner: string, project: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listBuilds.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling listBuilds.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling restartBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling restartBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling restartBuild.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling restartBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/restart`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1OwnedEntityIdRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restore build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling restoreBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling restoreBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling restoreBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/restore`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling stopBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling stopBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling stopBuild.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stopBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/stop`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1OwnedEntityIdRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {V1ProjectBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuilds(owner: string, project: string, body: V1ProjectBodyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling stopBuilds.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling stopBuilds.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stopBuilds.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/stop`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1ProjectBodyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UnBookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBookmarkBuild(owner: string, project: string, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling unBookmarkBuild.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling unBookmarkBuild.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling unBookmarkBuild.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{id}/unbookmark`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} build_id Unique integer identifier
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuild2(owner: string, project: string, build_id: string, body: V1BuildBodyRequest, options: any = {}): FetchArgs {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateBuild2.');
            }
            // verify required parameter 'project' is not null or undefined
            if (project === null || project === undefined) {
                throw new RequiredError('project','Required parameter project was null or undefined when calling updateBuild2.');
            }
            // verify required parameter 'build_id' is not null or undefined
            if (build_id === null || build_id === undefined) {
                throw new RequiredError('build_id','Required parameter build_id was null or undefined when calling updateBuild2.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateBuild2.');
            }
            const localVarPath = `/v1/{owner}/{project}/builds/{build.id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"project"}}`, encodeURIComponent(String(project)))
                .replace(`{${"build.id"}}`, encodeURIComponent(String(build_id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"V1BuildBodyRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BuildServiceApi - functional programming interface
 * @export
 */
export const BuildServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Archive build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).archiveBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Bookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmarkBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).bookmarkBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create new build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuild(owner: string, project: string, body: V1BuildBodyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1Build> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).createBuild(owner, project, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create new build status
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuildStatus(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1BuildStatus> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).createBuildStatus(owner, project, id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).deleteBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuilds(owner: string, project: string, body: V1OwnedEntityIdRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).deleteBuilds(owner, project, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1Build> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).getBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get build code ref
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildCodeRef(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1CodeReference> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).getBuildCodeRef(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create build code ref
         * @param {string} entity_owner Owner of the namespace
         * @param {string} entity_project Project where the experiement will be assigned
         * @param {string} entity_id Unique integer identifier of the entity
         * @param {V1CodeReferenceBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greateBuildCodeRef(entity_owner: string, entity_project: string, entity_id: string, body: V1CodeReferenceBodyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1CodeReference> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).greateBuildCodeRef(entity_owner, entity_project, entity_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List archived builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchivedBuilds(owner: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListBuildsResponse> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).listArchivedBuilds(owner, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List bookmarked builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedBuilds(owner: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListBuildsResponse> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).listBookmarkedBuilds(owner, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List build statuses
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuildStatuses(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListBuildStatusesResponse> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).listBuildStatuses(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuilds(owner: string, project: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1ListBuildsResponse> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).listBuilds(owner, project, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Restart build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1Build> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).restartBuild(owner, project, id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Restore build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).restoreBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Stop build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).stopBuild(owner, project, id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Stop builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {V1ProjectBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuilds(owner: string, project: string, body: V1ProjectBodyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).stopBuilds(owner, project, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary UnBookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBookmarkBuild(owner: string, project: string, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).unBookmarkBuild(owner, project, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} build_id Unique integer identifier
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuild2(owner: string, project: string, build_id: string, body: V1BuildBodyRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<V1Build> {
            const localVarFetchArgs = BuildServiceApiFetchParamCreator(configuration).updateBuild2(owner, project, build_id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BuildServiceApi - factory interface
 * @export
 */
export const BuildServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Archive build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        archiveBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).archiveBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Bookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookmarkBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).bookmarkBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create new build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuild(owner: string, project: string, body: V1BuildBodyRequest, options?: any) {
            return BuildServiceApiFp(configuration).createBuild(owner, project, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create new build status
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBuildStatus(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
            return BuildServiceApiFp(configuration).createBuildStatus(owner, project, id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).deleteBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBuilds(owner: string, project: string, body: V1OwnedEntityIdRequest, options?: any) {
            return BuildServiceApiFp(configuration).deleteBuilds(owner, project, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).getBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get build code ref
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBuildCodeRef(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).getBuildCodeRef(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create build code ref
         * @param {string} entity_owner Owner of the namespace
         * @param {string} entity_project Project where the experiement will be assigned
         * @param {string} entity_id Unique integer identifier of the entity
         * @param {V1CodeReferenceBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        greateBuildCodeRef(entity_owner: string, entity_project: string, entity_id: string, body: V1CodeReferenceBodyRequest, options?: any) {
            return BuildServiceApiFp(configuration).greateBuildCodeRef(entity_owner, entity_project, entity_id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List archived builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listArchivedBuilds(owner: string, options?: any) {
            return BuildServiceApiFp(configuration).listArchivedBuilds(owner, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List bookmarked builds
         * @param {string} owner Owner of the namespace
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBookmarkedBuilds(owner: string, options?: any) {
            return BuildServiceApiFp(configuration).listBookmarkedBuilds(owner, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List build statuses
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuildStatuses(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).listBuildStatuses(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBuilds(owner: string, project: string, options?: any) {
            return BuildServiceApiFp(configuration).listBuilds(owner, project, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Restart build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restartBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
            return BuildServiceApiFp(configuration).restartBuild(owner, project, id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Restore build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restoreBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).restoreBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Stop build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {V1OwnedEntityIdRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
            return BuildServiceApiFp(configuration).stopBuild(owner, project, id, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Stop builds
         * @param {string} owner Owner of the namespace
         * @param {string} project Project under namesapce
         * @param {V1ProjectBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopBuilds(owner: string, project: string, body: V1ProjectBodyRequest, options?: any) {
            return BuildServiceApiFp(configuration).stopBuilds(owner, project, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary UnBookmark build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} id Unique integer identifier of the entity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unBookmarkBuild(owner: string, project: string, id: string, options?: any) {
            return BuildServiceApiFp(configuration).unBookmarkBuild(owner, project, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update build
         * @param {string} owner Owner of the namespace
         * @param {string} project Project where the experiement will be assigned
         * @param {string} build_id Unique integer identifier
         * @param {V1BuildBodyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBuild2(owner: string, project: string, build_id: string, body: V1BuildBodyRequest, options?: any) {
            return BuildServiceApiFp(configuration).updateBuild2(owner, project, build_id, body, options)(fetch, basePath);
        },
    };
};

/**
 * BuildServiceApi - object-oriented interface
 * @export
 * @class BuildServiceApi
 * @extends {BaseAPI}
 */
export class BuildServiceApi extends BaseAPI {
    /**
     * 
     * @summary Archive build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public archiveBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).archiveBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Bookmark build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public bookmarkBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).bookmarkBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create new build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {V1BuildBodyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public createBuild(owner: string, project: string, body: V1BuildBodyRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).createBuild(owner, project, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create new build status
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {V1OwnedEntityIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public createBuildStatus(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).createBuildStatus(owner, project, id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public deleteBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).deleteBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete builds
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {V1OwnedEntityIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public deleteBuilds(owner: string, project: string, body: V1OwnedEntityIdRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).deleteBuilds(owner, project, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public getBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).getBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get build code ref
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public getBuildCodeRef(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).getBuildCodeRef(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create build code ref
     * @param {string} entity_owner Owner of the namespace
     * @param {string} entity_project Project where the experiement will be assigned
     * @param {string} entity_id Unique integer identifier of the entity
     * @param {V1CodeReferenceBodyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public greateBuildCodeRef(entity_owner: string, entity_project: string, entity_id: string, body: V1CodeReferenceBodyRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).greateBuildCodeRef(entity_owner, entity_project, entity_id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List archived builds
     * @param {string} owner Owner of the namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public listArchivedBuilds(owner: string, options?: any) {
        return BuildServiceApiFp(this.configuration).listArchivedBuilds(owner, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List bookmarked builds
     * @param {string} owner Owner of the namespace
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public listBookmarkedBuilds(owner: string, options?: any) {
        return BuildServiceApiFp(this.configuration).listBookmarkedBuilds(owner, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List build statuses
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public listBuildStatuses(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).listBuildStatuses(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List builds
     * @param {string} owner Owner of the namespace
     * @param {string} project Project under namesapce
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public listBuilds(owner: string, project: string, options?: any) {
        return BuildServiceApiFp(this.configuration).listBuilds(owner, project, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Restart build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {V1OwnedEntityIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public restartBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).restartBuild(owner, project, id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Restore build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public restoreBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).restoreBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Stop build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {V1OwnedEntityIdRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public stopBuild(owner: string, project: string, id: string, body: V1OwnedEntityIdRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).stopBuild(owner, project, id, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Stop builds
     * @param {string} owner Owner of the namespace
     * @param {string} project Project under namesapce
     * @param {V1ProjectBodyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public stopBuilds(owner: string, project: string, body: V1ProjectBodyRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).stopBuilds(owner, project, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary UnBookmark build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} id Unique integer identifier of the entity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public unBookmarkBuild(owner: string, project: string, id: string, options?: any) {
        return BuildServiceApiFp(this.configuration).unBookmarkBuild(owner, project, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update build
     * @param {string} owner Owner of the namespace
     * @param {string} project Project where the experiement will be assigned
     * @param {string} build_id Unique integer identifier
     * @param {V1BuildBodyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BuildServiceApi
     */
    public updateBuild2(owner: string, project: string, build_id: string, body: V1BuildBodyRequest, options?: any) {
        return BuildServiceApiFp(this.configuration).updateBuild2(owner, project, build_id, body, options)(this.fetch, this.basePath);
    }

}

