---
version: 0.6

kind: component

description: Run default image entry-point

container:
  image: image

---
version: 0.6

kind: component

description: Run image with updated command/args

container:
  image: image
  command: my_command
  args: my_arg

---
version: 0.6

kind: component

description: Run image with updated list command/args

container:
  image: image
  command: [/bin/bash, -c]
  args: [arg1, arg2]

---
version: 0.6

kind: component

description: Run image with updated list command/args

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
    - arg1
    - arg2


---
version: 0.6

kind: component

description: Run image with updated command/args based on code I download with git clone

container:
  image: image-with-git-installed
  command:
    - /bin/bash
    - -c
  args: git clone github.com/user/public-repo && cd public-repo && ./run stuff


---
version: 0.6

kind: component

description: Run image with updated command/args based on code I download with (ssh) git clone


mounts:
  secrets:
    - name: my-ssh-secret

container:
  image: image-with-git-installed
  command:
    - /bin/bash
    - -c
  args: git clone github.com/user/private-repo && cd private-repo && ./run stuff

---
version: 0.6

kind: component

description: Run image with updated command/args based on my code with no need to to clone (using repos catalog)


init:
  repos:
    - name: default-repo
      brnach: dev
    - name: user/my-repo1
      commit: c29c31d5912eede1790b38e6c24e00198e67b807

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: {{REPOS_CONTEXT}}/my-repo1/script.sh --arg1=foo && python3 -u {{REPOS_CONTEXT}}/default-repo/model.py


---
version: 0.6

kind: component

description: Run with data from a bucket

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: aws s3 cp s3://public-bucket ./data/ --recursive && ./do-stuff.sh --data_path=./data/


---
version: 0.6

kind: component

description: Run with data from a bucket


mounts:
  secrets:
    - name: my-s3-secret  # Secret used to authenticate aws cli or your python/java/.. code to download the s3 bucket

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: aws s3 cp s3://foo ./data/ --recursive && ./do-stuff.sh --data_path=./data/

---
version: 0.6

kind: component

description: Run with data from a bucket based in artifacts catalog


init:
  artifacts:
    - name: images-data-in-gcs

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: python3 -u model.py --data-path={{ARTIFACTS_CONTEXTS}}/images-data-in-gcs/



---
version: 0.6

kind: component

description: Run with data from a bucket based in artifacts catalog

# This tells polyaxon to take care of downloading and preparing a context
init:
  artifacts:
    - name: images-data-in-gcs
      paths:["path1/cat-images", "path2/dog-images"]

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: ls {{ARTIFACTS_CONTEXTS}}/images-data-in-gcs  # Result should be "path1/cat-images" "path2/dog-images"


---
version: 0.6

kind: component

description: Run with data from a multiple bucket based in artifacts catalog


init:
  artifacts:
    - name: images-data-in-gcs
      paths:["path1/cat-images", "path2/dog-images"]
    - name: azure-blob-data

container:
  image: image
  command:
    - /bin/bash
    - -c
  args: ls {{ARTIFACTS_CONTEXTS}}/  # Result should be "images-data-in-gcs/path1/cat-images" "images-data-in-gcs/path2/dog-images" "azure-blob-data/*"



---
version: 0.6

kind: component

description: Run with data from a volumes


init:
  artifacts:
    - name: images-data-in-volume-claim
      paths:["path1/cat-images", "path2/dog-images"]
    - name: audio-data-in-read-only-volume-claim

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
   - ls {{ARTIFACTS_CONTEXTS}}/  # Result should be "images-data-in-volume-claim/path1/cat-images" "images-data-in-volume-claim/path2/dog-images"
   - ls /user/knows/where/mount/path/is  # user can hard code the path if the path is known and does not change, this is equivalent to the ls in next arg
   - ls {{ARTIFACTS_PATHS_0}} #  user relies on the env var that Polyaxon will expose: ARTIFACTS_PATHS + order of the artifact: this is important if the name will eb resolved in later steps



---
version: 0.6

kind: component

description: Run with data from a volumes

init:
  artifacts:
    - name: images-data-in-volume-claim
      paths:["path1/cat-images", "path2/dog-images"]
    - name: audio-data-in-read-only-volume-claim

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
   - ls {{ARTIFACTS_CONTEXTS}}/  # Result should be "images-data-in-volume-claim/path1/cat-images" "images-data-in-volume-claim/path2/dog-images"
   - ls /user/knows/where/mount/path/is  # user can hard code the path if the path is known and does not change, this is equivalent to the ls in next arg
   - ls {{ARTIFACTS_PATHS_1}} #  user relies on the env var that Polyaxon will expose: ARTIFACTS_PATHS + name of the artifact



---
version: 0.6

kind: component

description: Run and upload outputs to a bucket


mounts:

  secrets:
    - name: my-s3-secret  # Secret used to authenticate aws cli or your python/java/.. code to upload the s3 bucket
    - name: my-gcs-secret  # Secret used to authenticate gcs cli or your python/java/.. code to upload the gcs bucket
    - name: my-azure-secret  # Secret used to authenticate azure cli or your python/java/.. code to upload the azure bucket

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
   - aws sync ...
   - gcs upload ...
   - az upload ...


---
version: 0.6

kind: component

description: Run and upload outputs to a bucket based on artifacts stores


mounts:

  artifacts:
    - name: my-s3-artifact
    - name: my-gcs-artifact
    - name: my-azure-artifact

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
   - aws sync {{ARTIFACTS_PATHS_0}}/relative-path ...
   - gcs upload {{ARTIFACTS_PATHS_1}}/relative-path ...
   - az upload {{ARTIFACTS_PATHS_2}}/relative-path ...




---
version: 0.6

kind: component

description:
  Run and upload outputs to the default outputs store. In Polyaxon,
  you can configure a default outputs store for your projects so that you don't need to deal with remembring name of artifacts that can change.


environment:

  outputs: true  # This tells Polyaxon to enable the default outputs store
    # This tells Polyaxon to expose a context to the user and manage the process of uploading any artifact generated by her code,
    # this abstract completely your code & yaml file from the process of storage connexion / claim volume. Polyaxon takes care of sync to the underlaying backend.

container:
  image: image
  command:
    - /bin/bash
    - -c
  args:
   - python model.py --outputs-path={{OUTPUTS_CONTEXTS}}


---
version: 0.6

kind: component

description: Run some code with env vars coming from config map or config-map mounted somewhere

mounts:
  config_maps:
    - name: env-vars-config-map
    - name: mount-path-config-map
  secrets:
    - name: env-vars-secret
    - name: mount-path-secret

container:
  image: image
  command: [/bin/bash, -c]
  args:
   - env  # Will print all items of the env-vars-config-map and env-vars-secret
   - ls {{CONFIG_MAPS_PATHS_mount-path-config-map}}  # paths exposed by this config_map
   - ls {{CONFIG_MAPS_PATHS_mount-path-secret}}  # paths exposed by this secret



---
version: 0.6

kind: component

description: Building docker image with Polyaxon using the docker context

environemnt:
  docker:  # Expose a docker context containing the docker socket
    enabled: true

init:
  build:  # The build context is a helper to create a simple docker file, for advance use case, you can just clone a repo with a dockerfile, or use a repo from the catalog with dockerile
    image: my_image
    run:
    - pip install package1
    env:
    - ['KEY1', 'en_US.UTF-8']
    - ['KEY2', 2]

mounts:
  config_maps:
    - name: config-map-for-pushing-to-registry
  secrets:
    - name: secret-for-pushing-to-private-registry

container:
  image: docker-builder
  command: [/bin/bash, -c]
  args:
   - docker build


---
version: 0.6

kind: component

description: Building docker image with Polyaxon
  for code and dockerfile, you can use the `repos`context, or attach and ssh/token secret to git clone the code

init:
  repos:
    - name: my-repo-with-dockerfile-to-build
mounts:
  config_maps:
    - name: config-map-for-pushing-to-registry
  secrets:
    - name: secret-for-pushing-to-private-registry

container:
  image: kaniko
  command: [/bin/bash, -c]
  args:
   - kaniko build



---
version: 0.6

kind: component

description: Building docker image with Polyaxon and default registry connexion
  Similar to the outputs store, Polyaxon allows users to create a registry in the catalog to define how to connect to that registry, and where to push the images to

environment:
  registry: "A"

init:
  repos:
    - name: my-repo-with-dockerfile-to-build

container:
  image: kaniko
  command: [/bin/bash, -c]
  args:
   - kaniko build



---
version: 0.6

kind: Pipeline

description: Building and running: user can build and create images that they can reuse later on, but they can also abstract this process using a pipeline

ops:
  - name: build
    environment:
      registry: "A"

    init:
      repos:
        - name: my-repo-with-dockerfile-to-build

    container:
      image: kaniko
      command: [/bin/bash, -c]
      args:
       - kaniko build
  - name: run
    inputs:
      - name: image
        type: container
    params:
      image: {{build.outputs.image}}
    container:
      image: {{image}}
      command: [python3, -u, my-model]

---
kind: component
name: experiment
inputs:
  - name: batch_size
    is_optional: true
    default: 128
    type: int
  - name: num_steps
    is_optional: true
    default: 300
    type: int
  - name: learning_rate
    is_optional: true
    default: 0.001
    type: float
  - name: dropout
    is_optional: true
    default: 0.25
    type: float
  - name: num_epochs
    is_optional: true
    default: 1
    type: int
  - name: activation
    is_optional: true
    default: relu
    type: str


workflow:
  strategy: random_search
  matrix:
    learning_rate:
      linspace: 0.001:0.1:5
    dropout:
      values: [0.25, 0.3]
    activation:
      values: [relu, sigmoid]
  concurrency: 5

container:
  image: polyaxon/polyaxon-init:dev
  command: ["python3", "-u", "model.py"]
  args:
  - "--batch_size={{ batch_size }}"
  - "--num_steps={{ num_steps }}"
  - "--learning_rate={{ learning_rate }}"
  - "--dropout={{ dropout }}"
  - "--num_epochs={{ num_epochs }}"
  - "--activation={{ activation }}"

---
kind: component
name: experiment
inputs:
  - name: batch_size
    is_optional: true
    default: 128
    type: int
  - name: num_steps
    is_optional: true
    default: 300
    type: int
  - name: learning_rate
    is_optional: true
    default: 0.001
    type: float
  - name: dropout
    is_optional: true
    default: 0.25
    type: float
  - name: num_epochs
    is_optional: true
    default: 1
    type: int
  - name: activation
    is_optional: true
    default: relu
    type: str

workflow:
  strategy: grid_search
  matrix:
    learning_rate:
      linspace: 0.001:0.1:5
    dropout:
      values: [0.25, 0.3]
    activation:
      values: [relu, sigmoid]
  concurrency: 5

container:
  image: polyaxon/polyaxon-init:dev
  command: ["python3", "-u", "model.py"]
  args:
  - "--batch_size={{ batch_size }}"
  - "--num_steps={{ num_steps }}"
  - "--learning_rate={{ learning_rate }}"
  - "--dropout={{ dropout }}"
  - "--num_epochs={{ num_epochs }}"
  - "--activation={{ activation }}"

---
version: 0.6
kind: component
description: Parallel pipeline
workflow:
  concurrency: 5
  strategy: map
  values:
    iteration: [1, 2, 3, 4 , 10]

ops:
  - name: iteration
    component_ref:
  - name: random-search
    component_ref: {name: random-search}
    cond:
  - name: bo-suggestion
    component_ref: {name: bo-suggestor}
    params: "{{ pipeline.inputs.__runs__ }}"
    metrics: "{{ ops.random-search.outputs.__all__ }}"

components:
  - kind: component
    name: random-search
    workflow:
      strategy: random_search
      matrix:
        learning_rate:
          linspace: 0.001:0.1:5
        dropout:
          values: [0.25, 0.3]
        activation:
          values: [relu, sigmoid]
      concurrency: 5

    ops:
      - name: op
        component_ref: {name: experiment}
        params:
          batch_size: "{{ pipeline.inputs.learning_rate }}"
          dropout: "{{ pipeline.inputs.dropout }}"
          activation: "{{ pipeline.inputs.activation }}"
    components:
      - kind: component
        name: experiment
        inputs:
        - name: batch_size
          is_optional: true
          default: 128
          type: int
        - name: num_steps
          is_optional: true
          default: 300
          type: int
        - name: learning_rate
          is_optional: true
          default: 0.001
          type: float
        - name: dropout
          is_optional: true
          default: 0.25
          type: float
        - name: num_epochs
          is_optional: true
          default: 1
          type: int
        - name: activation
          is_optional: true
          default: relu
          type: str

        outputs:
          - name: test_result
            is_optional: false
            type: str

        container:
          image: polyaxon/polyaxon-init:dev
          command: ["python3", "-u", "model.py"]
          args:
          - "--batch_size={{ batch_size }}"
          - "--num_steps={{ num_steps }}"
          - "--learning_rate={{ learning_rate }}"
          - "--dropout={{ dropout }}"
          - "--num_epochs={{ num_epochs }}"
          - "--activation={{ activation }}"
---

version: 0.6
kind: component
description: Workflow based ops
workflow:
  concurrency: 5
  strategy: dag
  early_stopping:
  - metric: loss
    value: 0.01
    optimization: minimize

  - metric: accuracy
    value: 0.97
    optimization: maximize

  ops:
    - name: iteration
      component_ref:
    - name: random-search
      component_ref: {name: random-search}
      cond:
    - name: bo-suggestion
      component_ref: {name: bo-suggestor}
      params: "{{ pipeline.inputs.__runs__ }}"
      metrics: "{{ ops.random-search.outputs.__all__ }}"

  components:
    - kind: Pipeline
      name: random-search
      workflow:
        strategy: random_search
        matrix:
          learning_rate:
            linspace: 0.001:0.1:5
          dropout:
            values: [0.25, 0.3]
          activation:
            values: [relu, sigmoid]
        concurrency: 5

      ops:
        - name: experiment
          component_ref: {name: experiment}
          params:
            batch_size: "{{ pipeline.inputs.learning_rate }}"
            dropout: "{{ pipeline.inputs.dropout }}"
            activation: "{{ pipeline.inputs.activation }}"
