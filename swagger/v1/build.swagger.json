{
  "swagger": "2.0",
  "info": {
    "title": "Build service",
    "version": "1.14.4",
    "contact": {
      "name": "Polyaxon build service",
      "url": "https://github.com/polyaxon/polyaxon-sdks",
      "email": "contact@polyaxon.com"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/archives/{owner}/builds": {
      "get": {
        "summary": "List archived builds",
        "operationId": "ListArchivedBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuildsResponse"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/bookmarks/{owner}/builds": {
      "get": {
        "summary": "List bookmarked builds",
        "operationId": "ListBookmarkedBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuildsResponse"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{entity.owner}/{entity.project}/builds/{entity.id}/coderef": {
      "post": {
        "summary": "Create build code ref",
        "operationId": "GreateBuildCodeRef",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CodeReference"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "entity.owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity.project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "entity.id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CodeReferenceBodyRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds": {
      "get": {
        "summary": "List builds",
        "operationId": "ListBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuildsResponse"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project under namesapce",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BuildService"
        ]
      },
      "post": {
        "summary": "Create new build",
        "operationId": "CreateBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Build"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BuildBodyRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/delete": {
      "delete": {
        "summary": "Delete builds",
        "operationId": "DeleteBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OwnedEntityIdRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/stop": {
      "post": {
        "summary": "Stop builds",
        "operationId": "StopBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project under namesapce",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ProjectBodyRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{build.id}": {
      "put": {
        "summary": "Update build",
        "operationId": "UpdateBuild2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Build"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build.id",
            "description": "Unique integer identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BuildBodyRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}": {
      "get": {
        "summary": "Get build",
        "operationId": "GetBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Build"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      },
      "delete": {
        "summary": "Delete build",
        "operationId": "DeleteBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/archive": {
      "post": {
        "summary": "Archive build",
        "operationId": "ArchiveBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/bookmark": {
      "post": {
        "summary": "Bookmark build",
        "operationId": "BookmarkBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/coderef": {
      "get": {
        "summary": "Get build code ref",
        "operationId": "GetBuildCodeRef",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CodeReference"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/restart": {
      "post": {
        "summary": "Restart build",
        "operationId": "RestartBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Build"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OwnedEntityIdRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/restore": {
      "post": {
        "summary": "Restore build",
        "operationId": "RestoreBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/statuses": {
      "get": {
        "summary": "List build statuses",
        "operationId": "ListBuildStatuses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuildStatusesResponse"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      },
      "post": {
        "summary": "Create new build status",
        "operationId": "CreateBuildStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuildStatus"
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OwnedEntityIdRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/stop": {
      "post": {
        "summary": "Stop build",
        "operationId": "StopBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OwnedEntityIdRequest"
            }
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    },
    "/v1/{owner}/{project}/builds/{id}/unbookmark": {
      "delete": {
        "summary": "UnBookmark build",
        "operationId": "UnBookmarkBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "404": {
            "description": "Resource does not exist.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "owner",
            "description": "Owner of the namespace",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "project",
            "description": "Project where the experiement will be assigned",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "description": "Unique integer identifier of the entity",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "BuildService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "v1Build": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier"
        },
        "uuid": {
          "type": "string",
          "title": "UUID"
        },
        "unique_name": {
          "type": "string",
          "title": "Unique name generated"
        },
        "name": {
          "type": "string",
          "title": "Optional name"
        },
        "description": {
          "type": "string",
          "title": "Optional description"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Optional Tags of this entity"
        },
        "deleted": {
          "type": "boolean",
          "format": "boolean",
          "title": "Optional if the entity has been deleted"
        },
        "user": {
          "type": "string",
          "title": "Required name of user started this entity"
        },
        "created_at": {
          "type": "string",
          "title": "Optional time when the entityt was created"
        },
        "updated_at": {
          "type": "string",
          "title": "Optional last time the entity was updated"
        },
        "started_at": {
          "type": "string",
          "title": "Optional last time the entity was started"
        },
        "finished_at": {
          "type": "string",
          "title": "Optional last time the entity was started"
        },
        "project": {
          "type": "string",
          "title": "Required project name"
        },
        "is_managed": {
          "type": "string",
          "title": "Optional flag to tell if this entity is managed by the platform"
        },
        "spec": {
          "type": "string",
          "title": "Optional content of the entity's spec"
        },
        "backend": {
          "type": "string",
          "title": "Optional backend value of this entity"
        },
        "framework": {
          "type": "string",
          "title": "Optional framework name of this entity"
        },
        "last_status": {
          "type": "string",
          "title": "Optional latest status of this entity"
        },
        "code_reference": {
          "type": "string",
          "format": "int64",
          "title": "Optional Code reference"
        },
        "resources": {
          "$ref": "#/definitions/v1Dict",
          "title": "Optional hardware resources requested by this entity"
        },
        "readme": {
          "type": "string",
          "title": "Optional a readme text describing this entity"
        },
        "bookmarked": {
          "type": "boolean",
          "format": "boolean",
          "title": "Optional if this entity was bookmarked"
        },
        "params": {
          "$ref": "#/definitions/v1Dict",
          "title": "Optional params of this entity"
        },
        "run_env": {
          "$ref": "#/definitions/v1Dict",
          "title": "Optional run enivronment tracked"
        },
        "build_build": {
          "type": "string",
          "title": "Optional build build name"
        }
      },
      "title": "Build specification"
    },
    "v1BuildBodyRequest": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "title": "Owner of the namespace"
        },
        "project": {
          "type": "string",
          "title": "Project where the experiement will be assigned"
        },
        "build": {
          "$ref": "#/definitions/v1Build",
          "title": "Build object"
        }
      },
      "title": "Request data to create/update build"
    },
    "v1BuildStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier"
        },
        "uuid": {
          "type": "string",
          "title": "UUID"
        },
        "created_at": {
          "type": "string",
          "title": "Optional time when the entityt was created"
        },
        "updated_at": {
          "type": "string",
          "title": "Optional last time the entity was updated"
        },
        "status": {
          "type": "string",
          "title": "Optional status recorded"
        },
        "message": {
          "type": "string",
          "title": "Optional status message"
        }
      },
      "title": "Build specification"
    },
    "v1CodeReference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier"
        },
        "uuid": {
          "type": "string",
          "title": "UUID"
        },
        "commit": {
          "type": "string",
          "title": "Optional commit of the code ref"
        },
        "updated_at": {
          "type": "string",
          "title": "Optional head of the code ref"
        },
        "status": {
          "type": "string",
          "title": "Optional branch of the code ref"
        },
        "git_url": {
          "type": "string",
          "title": "Optional git url for this code ref"
        },
        "is_dirty": {
          "type": "boolean",
          "format": "boolean",
          "title": "Optional whether this code ref is dirty"
        }
      },
      "title": "Code Reference specification"
    },
    "v1CodeReferenceBodyRequest": {
      "type": "object",
      "properties": {
        "entity": {
          "$ref": "#/definitions/v1OwnedEntityIdRequest",
          "title": "Owner of the code ref"
        },
        "CodeReference": {
          "$ref": "#/definitions/v1CodeReference",
          "title": "Build object"
        }
      },
      "title": "Request data to create/update CodeReference"
    },
    "v1Dict": {
      "type": "object",
      "properties": {
        "kv": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KV"
          }
        }
      }
    },
    "v1KV": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/protobufAny"
        }
      }
    },
    "v1ListBuildStatusesResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "title": "Count of the entities"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1BuildStatus"
          },
          "title": "List of all entities"
        },
        "previous": {
          "type": "string",
          "title": "Previous page"
        },
        "next": {
          "type": "string",
          "title": "Next page"
        }
      },
      "title": "Contains list builds"
    },
    "v1ListBuildsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "title": "Count of the entities"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Build"
          },
          "title": "List of all entities"
        },
        "previous": {
          "type": "string",
          "title": "Previous page"
        },
        "next": {
          "type": "string",
          "title": "Next page"
        }
      },
      "title": "Contains list builds"
    },
    "v1OwnedEntityIdRequest": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "title": "Owner of the namespace"
        },
        "project": {
          "type": "string",
          "title": "Project where the experiement will be assigned"
        },
        "id": {
          "type": "string",
          "format": "int64",
          "title": "Unique integer identifier of the entity"
        }
      },
      "title": "Request data to get/delete entity"
    },
    "v1ProjectBodyRequest": {
      "type": "object",
      "properties": {
        "owner": {
          "type": "string",
          "title": "Owner of the namespace"
        },
        "project": {
          "type": "string",
          "title": "Project under namesapce"
        }
      },
      "title": "Request data with owner/project namespace"
    },
    "v1StatusResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "title": "The status of the entity"
        }
      },
      "title": "Request data for a status"
    }
  }
}
