# Generated by Django 2.1.2 on 2018-11-07 14:31

import re
import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import db.models.tokens


def create_owners(apps, schema_editor):
    User = apps.get_model('db', 'User')
    Owner = apps.get_model('db', 'Owner')
    ContentType = apps.get_model('contenttypes', 'ContentType')
    user_type_id = ContentType.objects.get_for_model(User).id
    for user in User.objects.all():
        Owner.objects.create(object_id=user.id,
                             content_type_id=user_type_id,
                             name=user.username)


def migrate_project_owner(apps, schema_editor):
    Project = apps.get_model('db', 'Project')
    Owner = apps.get_model('db', 'Owner')

    for project in Project.objects.all():
        owner = Owner.objects.get(name=project.user.username)
        project.owner = owner
        project.save(update_fields=['owner'])


def migrate_activity_ref(apps, schema_editor):
    ActivityLog = apps.get_model('db', 'ActivityLog')
    Cluster = apps.get_model('db', 'Cluster')

    cluster = Cluster.objects.last()
    if not cluster:
        ActivityLog.objects.all().delete()
    else:
        cluster_uuid = cluster.uuid
        for activity in ActivityLog.objects.all():
            activity.ref = cluster_uuid
            activity.save(update_fields=['ref'])


def migrate_experiment_group(apps, schema_editor):
    ExperimentGroupStatus = apps.get_model('db', 'ExperimentGroupStatus')
    ExperimentGroupStatus.objects.filter(status='succeeded').update(status='done')


class Migration(migrations.Migration):
    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('db', '0013_auto_20181107_1718'),
    ]

    operations = [
        migrations.AlterField(
            model_name='bookmark',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AlterField(
            model_name='notificationevent',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.AlterUniqueTogether(
            name='search',
            unique_together={('user', 'project', 'name')},
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(default=db.models.tokens.generate_token, max_length=64,
                                         unique=True)),
                ('refresh_key',
                 models.CharField(default=db.models.tokens.generate_token, max_length=64, null=True,
                                  unique=True)),
                ('scopes', django.contrib.postgres.fields.ArrayField(
                    base_field=models.CharField(max_length=20), blank=True, default=list,
                    size=None)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                           related_name='tokens', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False,
                                        verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.PositiveIntegerField()),
                ('name', models.CharField(max_length=150, unique=True, validators=[
                    django.core.validators.RegexValidator(re.compile('^[-\\w]+\\Z'),
                                                          "Enter a valid 'slug' consisting of Unicode letters, numbers, underscores, or hyphens.",
                                                          'invalid')])),
                ('content_type',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   to='contenttypes.ContentType')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='project',
            name='owner',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE,
                                    related_name='+', to='db.Owner'),
            preserve_default=False,
        ),
        migrations.RunPython(create_owners),
        migrations.RunPython(migrate_project_owner),
        migrations.AlterField(
            model_name='project',
            name='user',
            field=models.ForeignKey(blank=True, null=True,
                                    on_delete=django.db.models.deletion.SET_NULL,
                                    related_name='projects', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='owner',
            unique_together={('content_type', 'object_id')},
        ),
        migrations.AddField(
            model_name='activitylog',
            name='ref',
            field=models.UUIDField(default=uuid.uuid4(), editable=False),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='activitylog',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+',
                                    to='contenttypes.ContentType'),
        ),
        migrations.RunPython(migrate_activity_ref),
        migrations.RunPython(migrate_experiment_group),
    ]
