syntax = "proto3";

package v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protoc-gen-swagger/options/annotations.proto";

import "v1/base.proto";
import "v1/code_ref.proto";
import "v1/build.proto";
import "v1/experiment.proto";
import "v1/job.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Polyaxon sdk";
		version: "1.14.4";
		contact: {
			name: "Polyaxon sdk";
			url: "https://github.com/polyaxon/polyaxon-sdks";
			email: "contact@polyaxon.com";
        };
    };
    schemes: HTTP;
	schemes: HTTPS;
    schemes: WS;
    schemes: WSS;
    consumes: "application/json";
    produces: "application/json";
    security_definitions: {
		security: {
			key: "ApiKey";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "Authorization";
			}
        }
    };
	security: {
		security_requirement: {
			key: "ApiKey";
			value: {};
        }
	};
    responses: {
		key: "403";
		value: {
			description: "You don't have permission to access the resource.";
		}
	}
    responses: {
		key: "404";
		value: {
			description: "Resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};


// Service to manage builds
service BuildService {
    // List builds
    rpc ListBuilds(ProjectBodyRequest) returns (ListBuildsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/builds"
        };
    }

    // List bookmarked builds
    rpc ListBookmarkedBuilds(OwnerBodyRequest) returns (ListBuildsResponse) {
        option (google.api.http) = {
            get: "/api/v1/bookmarks/{owner}/builds"
        };
    }

    // List archived builds
    rpc ListArchivedBuilds(OwnerBodyRequest) returns (ListBuildsResponse) {
        option (google.api.http) = {
            get: "/api/v1/archives/{owner}/builds"
        };
    }

    // Create new build
    rpc CreateBuild(BuildBodyRequest) returns (Build) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds"
            body: "*"
        };
    }

    // Get build
    rpc GetBuild(OwnedEntityIdRequest) returns (Build) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/builds/{id}"
        };
    }

    // Update build
    rpc UpdateBuild(BuildBodyRequest) returns (Build) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project}/builds/{build.id}"
            body: "*"
        };
    }

    // Patch build
    rpc PatchBuild(BuildBodyRequest) returns (Build) {
        option (google.api.http) = {
            patch: "/api/v1/{owner}/{project}/builds/{build.id}"
            body: "*"
        };
    }

    // Delete build
    rpc DeleteBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/builds/{id}"
        };
    }

    // Delete builds
    rpc DeleteBuilds(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/builds/delete"
            body: "*"
        };
    }

    // Stop build
    rpc StopBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/stop"
            body: "*"
        };
    }

    // Stop builds
    rpc StopBuilds(ProjectBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/stop"
            body: "*"
        };
    }

    // Restart build
    rpc RestartBuild(OwnedEntityIdRequest) returns (Build) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/restart"
            body: "*"
        };
    }

    // Archive build
    rpc ArchiveBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/archive"
        };
    }

    // Restore build
    rpc RestoreBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/restore"
        };
    }

    // Bookmark build
    rpc BookmarkBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/bookmark"
        };
    }

    // UnBookmark build
    rpc UnBookmarkBuild(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/builds/{id}/unbookmark"
        };
    }

    // Get build status
    rpc GetBuildStatuses(OwnedEntityIdRequest) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/builds/{id}/statuses"
        };
    }

    // List build statuses
    rpc ListBuildStatuses(OwnedEntityIdRequest) returns (ListBuildStatusesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/builds/{id}/statuses"
        };
    }

    // Create new build status
    rpc CreateBuildStatus(EntityStatusRequest) returns (BuildStatus) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/builds/{id}/statuses"
            body: "*"
        };
    }

    // Get build code ref
    rpc GetBuildCodeRef(OwnedEntityIdRequest) returns (CodeReference) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/builds/{id}/coderef"
        };
    }

    // Create build code ref
    rpc CreateBuildCodeRef(CodeReferenceBodyRequest) returns (CodeReference) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/builds/{entity.id}/coderef"
            body: "*"
        };
    }
}


// Service to manage jobs
service JobService {
    // List jobs
    rpc ListJobs(ProjectBodyRequest) returns (ListJobsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/jobs"
        };
    }

    // List bookmarked jobs
    rpc ListBookmarkedJobs(OwnerBodyRequest) returns (ListJobsResponse) {
        option (google.api.http) = {
            get: "/api/v1/bookmarks/{owner}/jobs"
        };
    }

    // List archived jobs
    rpc ListArchivedJobs(OwnerBodyRequest) returns (ListJobsResponse) {
        option (google.api.http) = {
            get: "/api/v1/archives/{owner}/jobs"
        };
    }

    // Create new job
    rpc CreateJob(JobBodyRequest) returns (Job) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs"
            body: "*"
        };
    }

    // Get job
    rpc GetJob(OwnedEntityIdRequest) returns (Job) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/jobs/{id}"
        };
    }

    // Update job
    rpc UpdateJob(JobBodyRequest) returns (Job) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project}/jobs/{job.id}"
            body: "*"
        };
    }

    // Patch job
    rpc PatchJob(JobBodyRequest) returns (Job) {
        option (google.api.http) = {
            patch: "/api/v1/{owner}/{project}/jobs/{job.id}"
            body: "*"
        };
    }

    // Delete job
    rpc DeleteJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/jobs/{id}"
        };
    }

    // Delete jobs
    rpc DeleteJobs(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/jobs/delete"
            body: "*"
        };
    }

    // Stop job
    rpc StopJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/stop"
            body: "*"
        };
    }

    // Stop jobs
    rpc StopJobs(ProjectBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/stop"
            body: "*"
        };
    }

    // Restart job
    rpc RestartJob(OwnedEntityIdRequest) returns (Job) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/restart"
            body: "*"
        };
    }

    // Resume job
    rpc ResumeJob(OwnedEntityIdRequest) returns (Job) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/resume"
            body: "*"
        };
    }

    // Archive job
    rpc ArchiveJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/archive"
        };
    }

    // Restore job
    rpc RestoreJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/restore"
        };
    }

    // Bookmark job
    rpc BookmarkJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/bookmark"
        };
    }

    // UnBookmark job
    rpc UnBookmarkJob(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/jobs/{id}/unbookmark"
        };
    }

    // Get job status
    rpc GetJobStatuses(OwnedEntityIdRequest) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/jobs/{id}/statuses"
        };
    }

    // List job statuses
    rpc ListJobStatuses(OwnedEntityIdRequest) returns (ListJobStatusesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/jobs/{id}/statuses"
        };
    }

    // Create new job status
    rpc CreateJobStatus(EntityStatusRequest) returns (JobStatus) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/jobs/{id}/statuses"
            body: "*"
        };
    }

    // Get job code ref
    rpc GetJobCodeRef(OwnedEntityIdRequest) returns (CodeReference) {  // TODO: should be an code ref
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/jobs/{id}/coderef"
        };
    }

    // Get job code ref
    rpc CreateJobCodeRef(CodeReferenceBodyRequest) returns (CodeReference) {  // TODO: should be an code ref
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/jobs/{entity.id}/coderef"
            body: "*"
        };
    }
}


// Service to manage experiments
service ExperimentService {
    // List experiments
    rpc ListExperiments(ProjectBodyRequest) returns (ListExperimentsResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/experiments"
        };
    }

    // List bookmarked experiments
    rpc ListBookmarkedExperiments(OwnerBodyRequest) returns (ListExperimentsResponse) {
        option (google.api.http) = {
            get: "/api/v1/bookmarks/{owner}/experiments"
        };
    }

    // List archived experiments
    rpc ListArchivedExperiments(OwnerBodyRequest) returns (ListExperimentsResponse) {
        option (google.api.http) = {
            get: "/api/v1/archives/{owner}/experiments"
        };
    }

    // Create new experiment
    rpc CreateExperiment(ExperimentBodyRequest) returns (Experiment) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments"
            body: "*"
        };
    }

    // Get experiment
    rpc GetExperiment(OwnedEntityIdRequest) returns (Experiment) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/experiments/{id}"
        };
    }

    // Update experiment
    rpc UpdateExperiment(ExperimentBodyRequest) returns (Experiment) {
        option (google.api.http) = {
            put: "/api/v1/{owner}/{project}/experiments/{experiment.id}"
            body: "*"
        };
    }

    // Patch experiment
    rpc PatchExperiment(ExperimentBodyRequest) returns (Experiment) {
        option (google.api.http) = {
            patch: "/api/v1/{owner}/{project}/experiments/{experiment.id}"
            body: "*"
        };
    }

    // Delete experiment
    rpc DeleteExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/experiments/{id}"
        };
    }

    // Delete experiments
    rpc DeleteExperiments(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/experiments/delete"
            body: "*"
        };
    }

    // Stop experiment
    rpc StopExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/stop"
            body: "*"
        };
    }

    // Stop experiments
    rpc StopExperiments(ProjectBodyRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/stop"
            body: "*"
        };
    }

    // Restart experiment
    rpc RestartExperiment(OwnedEntityIdRequest) returns (Experiment) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/restart"
            body: "*"
        };
    }

    // Resume experiment
    rpc ResumeExperiment(OwnedEntityIdRequest) returns (Experiment) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/resume"
            body: "*"
        };
    }

    // Archive experiment
    rpc ArchiveExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/archive"
        };
    }

    // Restore experiment
    rpc RestoreExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/restore"
        };
    }

    // Bookmark experiment
    rpc BookmarkExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/bookmark"
        };
    }

    // UnBookmark experiment
    rpc UnBookmarkExperiment(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/experiments/{id}/unbookmark"
        };
    }

    // Start experiment tensorboard
    rpc StartExperimentTensorboard(OwnedEntityIdRequest) returns (google.protobuf.Empty) {  // TODO: should be a tensorboard object
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/tensorboard/start"
            body: "*"
        };
    }

    // Stop experiment tensorboard
    rpc StopExperimentTensorboard(OwnedEntityIdRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/v1/{owner}/{project}/experiments/{id}/tensorboard/stop"
        };
    }

    // Get experiment status
    rpc GetExperimentStatuses(OwnedEntityIdRequest) returns (StatusResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/experiments/{id}/statuses"
        };
    }

    // List experiment statuses
    rpc ListExperimentStatuses(OwnedEntityIdRequest) returns (ListExperimentStatusesResponse) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/experiments/{id}/statuses"
        };
    }

    // Create new experiment status
    rpc CreateExperimentStatus(EntityStatusRequest) returns (ExperimentStatus) {
        option (google.api.http) = {
            post: "/api/v1/{owner}/{project}/experiments/{id}/statuses"
            body: "*"
        };
    }

    // Get experiment code ref
    rpc GetExperimentCodeRef(OwnedEntityIdRequest) returns (CodeReference) {
        option (google.api.http) = {
            get: "/api/v1/{owner}/{project}/experiments/{id}/coderef"
        };
    }

    // Get experiment code ref
    rpc CreateExperimentCodeRef(CodeReferenceBodyRequest) returns (CodeReference) {
        option (google.api.http) = {
            post: "/api/v1/{entity.owner}/{entity.project}/experiments/{entity.id}/coderef"
            body: "*"
        };
    }
}
